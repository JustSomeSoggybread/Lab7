
c:/Users/evanh/OneDrive/Desktop/CTD/InternetOfThings/Lab7/target/3.0.0/argon/Lab7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003b90  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d7bb0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  2003e334  000d7bb4  0001e334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000450  2003e3a0  2003e3a0  0002e3a0  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d7c20  000d7c20  00027c20  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d7c48  000d7c48  00027c48  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001d259c  00000000  00000000  00027c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001b438  00000000  00000000  001fa1e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00038519  00000000  00000000  00215620  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002ea0  00000000  00000000  0024db39  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00009b08  00000000  00000000  002509d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003f9bd  00000000  00000000  0025a4e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00046350  00000000  00000000  00299e9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0012d7c3  00000000  00000000  002e01ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00008500  00000000  00000000  0040d9b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f003 f85d 	bl	d70f0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f003 f865 	bl	d710c <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e334 	.word	0x2003e334
   d404c:	000d7bb4 	.word	0x000d7bb4
   d4050:	2003e3a0 	.word	0x2003e3a0
   d4054:	2003e3a0 	.word	0x2003e3a0
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f001 fb8b 	bl	d577c <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d7b80 	.word	0x000d7b80
   d4080:	000d7ba4 	.word	0x000d7ba4

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bc4c 	b.w	d4920 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fd55 	bl	d4b38 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f001 bb35 	b.w	d5700 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f001 b8bd 	b.w	d5214 <malloc>

000d409a <_Znaj>:
   d409a:	f001 b8bb 	b.w	d5214 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f001 b8c1 	b.w	d5224 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <_Z15enableTimerCallv>:
    Serial.println(" C");
  }
}

void enableTimerCall(){
  buttonEnabled = true;
   d40b4:	4b01      	ldr	r3, [pc, #4]	; (d40bc <_Z15enableTimerCallv+0x8>)
   d40b6:	2201      	movs	r2, #1
   d40b8:	701a      	strb	r2, [r3, #0]
   d40ba:	4770      	bx	lr
   d40bc:	2003e334 	.word	0x2003e334

000d40c0 <_Z11tempDisplayv>:
void tempDisplay(){
   d40c0:	b538      	push	{r3, r4, r5, lr}
  if (buttonEnabled){
   d40c2:	4b1b      	ldr	r3, [pc, #108]	; (d4130 <_Z11tempDisplayv+0x70>)
   d40c4:	781b      	ldrb	r3, [r3, #0]
   d40c6:	b34b      	cbz	r3, d411c <_Z11tempDisplayv+0x5c>
    uint64_t reading = analogRead(A4);
   d40c8:	200f      	movs	r0, #15
   d40ca:	f002 f9ae 	bl	d642a <analogRead>
   d40ce:	4605      	mov	r5, r0
    Serial.print(temperature);
   d40d0:	f001 fc7c 	bl	d59cc <_Z16_fetch_usbserialv>
    double voltage = (reading * 3.3) / 4095.0;
   d40d4:	17e9      	asrs	r1, r5, #31
    Serial.print(temperature);
   d40d6:	4604      	mov	r4, r0
    double voltage = (reading * 3.3) / 4095.0;
   d40d8:	4628      	mov	r0, r5
   d40da:	f002 fcc5 	bl	d6a68 <__aeabi_ul2d>
   d40de:	a310      	add	r3, pc, #64	; (adr r3, d4120 <_Z11tempDisplayv+0x60>)
   d40e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d40e4:	f002 fcf6 	bl	d6ad4 <__aeabi_dmul>
   d40e8:	a30f      	add	r3, pc, #60	; (adr r3, d4128 <_Z11tempDisplayv+0x68>)
   d40ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   d40ee:	f002 fe1b 	bl	d6d28 <__aeabi_ddiv>
    double temperature = (voltage - 0.5) * 100;
   d40f2:	4b10      	ldr	r3, [pc, #64]	; (d4134 <_Z11tempDisplayv+0x74>)
   d40f4:	2200      	movs	r2, #0
   d40f6:	f002 fb35 	bl	d6764 <__aeabi_dsub>
   d40fa:	4b0f      	ldr	r3, [pc, #60]	; (d4138 <_Z11tempDisplayv+0x78>)
   d40fc:	2200      	movs	r2, #0
   d40fe:	f002 fce9 	bl	d6ad4 <__aeabi_dmul>
   d4102:	ec41 0b10 	vmov	d0, r0, r1
    Serial.print(temperature);
   d4106:	2102      	movs	r1, #2
   d4108:	4620      	mov	r0, r4
   d410a:	f001 fa7d 	bl	d5608 <_ZN5Print5printEdi>
    Serial.println(" C");
   d410e:	f001 fc5d 	bl	d59cc <_Z16_fetch_usbserialv>
}
   d4112:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Serial.println(" C");
   d4116:	4909      	ldr	r1, [pc, #36]	; (d413c <_Z11tempDisplayv+0x7c>)
   d4118:	f001 b985 	b.w	d5426 <_ZN5Print7printlnEPKc>
}
   d411c:	bd38      	pop	{r3, r4, r5, pc}
   d411e:	bf00      	nop
   d4120:	66666666 	.word	0x66666666
   d4124:	400a6666 	.word	0x400a6666
   d4128:	00000000 	.word	0x00000000
   d412c:	40affe00 	.word	0x40affe00
   d4130:	2003e334 	.word	0x2003e334
   d4134:	3fe00000 	.word	0x3fe00000
   d4138:	40590000 	.word	0x40590000
   d413c:	000d72cc 	.word	0x000d72cc

000d4140 <_ZN10BlynkParam3addEPKc.part.0>:
    memcpy(buff+len, b, l);
    len += l;
}

inline
void BlynkParam::add(const char* str)
   d4140:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4142:	4604      	mov	r4, r0
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
   d4144:	4608      	mov	r0, r1
   d4146:	9101      	str	r1, [sp, #4]
   d4148:	f003 f816 	bl	d7178 <strlen>
    if (len + l > buff_size)
   d414c:	6863      	ldr	r3, [r4, #4]
   d414e:	68a2      	ldr	r2, [r4, #8]
    add(str, strlen(str)+1);
   d4150:	1c45      	adds	r5, r0, #1
    if (len + l > buff_size)
   d4152:	18e8      	adds	r0, r5, r3
   d4154:	4290      	cmp	r0, r2
   d4156:	d808      	bhi.n	d416a <_ZN10BlynkParam3addEPKc.part.0+0x2a>
    memcpy(buff+len, b, l);
   d4158:	6820      	ldr	r0, [r4, #0]
   d415a:	9901      	ldr	r1, [sp, #4]
   d415c:	462a      	mov	r2, r5
   d415e:	4418      	add	r0, r3
   d4160:	f002 ffc6 	bl	d70f0 <memcpy>
    len += l;
   d4164:	6860      	ldr	r0, [r4, #4]
   d4166:	4428      	add	r0, r5
   d4168:	6060      	str	r0, [r4, #4]
}
   d416a:	b003      	add	sp, #12
   d416c:	bd30      	pop	{r4, r5, pc}
	...

000d4170 <_ZN22BlynkTransportParticleD1Ev>:
#define BlynkParticle_h

#include "BlynkApiParticle.h"
#include "Blynk/BlynkProtocol.h"

class BlynkTransportParticle
   d4170:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4172:	6984      	ldr	r4, [r0, #24]
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d4174:	4b0a      	ldr	r3, [pc, #40]	; (d41a0 <_ZN22BlynkTransportParticleD1Ev+0x30>)
   d4176:	6003      	str	r3, [r0, #0]
   d4178:	4605      	mov	r5, r0
   d417a:	b17c      	cbz	r4, d419c <_ZN22BlynkTransportParticleD1Ev+0x2c>
      if (--_M_use_count == 0)
   d417c:	6863      	ldr	r3, [r4, #4]
   d417e:	3b01      	subs	r3, #1
   d4180:	6063      	str	r3, [r4, #4]
   d4182:	b95b      	cbnz	r3, d419c <_ZN22BlynkTransportParticleD1Ev+0x2c>
          _M_dispose();
   d4184:	6823      	ldr	r3, [r4, #0]
   d4186:	4620      	mov	r0, r4
   d4188:	689b      	ldr	r3, [r3, #8]
   d418a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d418c:	68a3      	ldr	r3, [r4, #8]
   d418e:	3b01      	subs	r3, #1
   d4190:	60a3      	str	r3, [r4, #8]
   d4192:	b91b      	cbnz	r3, d419c <_ZN22BlynkTransportParticleD1Ev+0x2c>
            _M_destroy();
   d4194:	6823      	ldr	r3, [r4, #0]
   d4196:	4620      	mov	r0, r4
   d4198:	68db      	ldr	r3, [r3, #12]
   d419a:	4798      	blx	r3
   d419c:	4628      	mov	r0, r5
   d419e:	bd38      	pop	{r3, r4, r5, pc}
   d41a0:	000d78cc 	.word	0x000d78cc

000d41a4 <_ZN10CloudClass7processEv>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
   d41a4:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d41a6:	f000 fe71 	bl	d4e8c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d41aa:	4b03      	ldr	r3, [pc, #12]	; (d41b8 <_ZN10CloudClass7processEv+0x14>)
   d41ac:	6018      	str	r0, [r3, #0]
    		application_checkin();
    		spark_process();
    }
   d41ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    		spark_process();
   d41b2:	f001 b81f 	b.w	d51f4 <spark_process>
   d41b6:	bf00      	nop
   d41b8:	2003e7d4 	.word	0x2003e7d4

000d41bc <_ZNK10BlynkParam8iterator5asIntEv>:
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d41bc:	6803      	ldr	r3, [r0, #0]
   d41be:	b12b      	cbz	r3, d41cc <_ZNK10BlynkParam8iterator5asIntEv+0x10>
   d41c0:	6842      	ldr	r2, [r0, #4]
   d41c2:	4293      	cmp	r3, r2
   d41c4:	d202      	bcs.n	d41cc <_ZNK10BlynkParam8iterator5asIntEv+0x10>
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
   d41c6:	4618      	mov	r0, r3
   d41c8:	f002 bf7c 	b.w	d70c4 <atoi>
   d41cc:	2000      	movs	r0, #0
   d41ce:	4770      	bx	lr

000d41d0 <_ZN10BlynkParam8iteratorppEv>:
        iterator& operator ++() {
   d41d0:	b538      	push	{r3, r4, r5, lr}
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d41d2:	6805      	ldr	r5, [r0, #0]
        iterator& operator ++() {
   d41d4:	4604      	mov	r4, r0
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d41d6:	b145      	cbz	r5, d41ea <_ZN10BlynkParam8iteratorppEv+0x1a>
   d41d8:	6843      	ldr	r3, [r0, #4]
   d41da:	429d      	cmp	r5, r3
   d41dc:	d205      	bcs.n	d41ea <_ZN10BlynkParam8iteratorppEv+0x1a>
                ptr += strlen(ptr) + 1;
   d41de:	4628      	mov	r0, r5
   d41e0:	f002 ffca 	bl	d7178 <strlen>
   d41e4:	3001      	adds	r0, #1
   d41e6:	4405      	add	r5, r0
   d41e8:	6025      	str	r5, [r4, #0]
        }
   d41ea:	4620      	mov	r0, r4
   d41ec:	bd38      	pop	{r3, r4, r5, pc}
	...

000d41f0 <_ZN10BlynkParam3addEi>:

    #include <stdio.h>

    inline
    void BlynkParam::add(int value)
    {
   d41f0:	b538      	push	{r3, r4, r5, lr}
   d41f2:	4604      	mov	r4, r0
   d41f4:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
   d41f6:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   d41fa:	6825      	ldr	r5, [r4, #0]
   d41fc:	4a04      	ldr	r2, [pc, #16]	; (d4210 <_ZN10BlynkParam3addEi+0x20>)
   d41fe:	1a09      	subs	r1, r1, r0
   d4200:	4428      	add	r0, r5
   d4202:	f001 f817 	bl	d5234 <snprintf>
   d4206:	6863      	ldr	r3, [r4, #4]
   d4208:	3001      	adds	r0, #1
   d420a:	4403      	add	r3, r0
   d420c:	6063      	str	r3, [r4, #4]
    }
   d420e:	bd38      	pop	{r3, r4, r5, pc}
   d4210:	000d72cf 	.word	0x000d72cf

000d4214 <_ZN10BlynkParam3addEl>:
        len += snprintf(buff+len, buff_size-len, "%u", value)+1;
    }

    inline
    void BlynkParam::add(long value)
    {
   d4214:	b538      	push	{r3, r4, r5, lr}
   d4216:	4604      	mov	r4, r0
   d4218:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
   d421a:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   d421e:	6825      	ldr	r5, [r4, #0]
   d4220:	4a04      	ldr	r2, [pc, #16]	; (d4234 <_ZN10BlynkParam3addEl+0x20>)
   d4222:	1a09      	subs	r1, r1, r0
   d4224:	4428      	add	r0, r5
   d4226:	f001 f805 	bl	d5234 <snprintf>
   d422a:	6863      	ldr	r3, [r4, #4]
   d422c:	3001      	adds	r0, #1
   d422e:	4403      	add	r3, r0
   d4230:	6063      	str	r3, [r4, #4]
    }
   d4232:	bd38      	pop	{r3, r4, r5, pc}
   d4234:	000d72d2 	.word	0x000d72d2

000d4238 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>:
#endif
    }

private:

    void internalReconnect() {
   d4238:	b508      	push	{r3, lr}
        state = CONNECTING;
   d423a:	2300      	movs	r3, #0
   d423c:	7743      	strb	r3, [r0, #29]
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d423e:	6800      	ldr	r0, [r0, #0]
   d4240:	f001 feae 	bl	d5fa0 <_ZN9TCPClient4stopEv>
        conn.disconnect();
        BlynkOnDisconnected();
    }
   d4244:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        BlynkOnDisconnected();
   d4248:	f000 bdab 	b.w	d4da2 <BlynkNoOpCbk>

000d424c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>:
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   d424c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    iterator begin() const { return iterator(buff, buff+len); }
   d4250:	eb01 0902 	add.w	r9, r1, r2
   d4254:	b08f      	sub	sp, #60	; 0x3c
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
   d4256:	4549      	cmp	r1, r9
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d4258:	e9cd 1905 	strd	r1, r9, [sp, #20]
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   d425c:	4680      	mov	r8, r0
   d425e:	460d      	mov	r5, r1
   d4260:	4616      	mov	r6, r2
    if (it >= param.end())
   d4262:	f080 8092 	bcs.w	d438a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
    if (++it >= param.end())
   d4266:	a805      	add	r0, sp, #20
   d4268:	880f      	ldrh	r7, [r1, #0]
   d426a:	f7ff ffb1 	bl	d41d0 <_ZN10BlynkParam8iteratorppEv>
   d426e:	6803      	ldr	r3, [r0, #0]
   d4270:	4599      	cmp	r9, r3
   d4272:	f240 808a 	bls.w	d438a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        return;

    const uint8_t pin = BLYNK_DECODE_PIN(it);
   d4276:	a805      	add	r0, sp, #20
   d4278:	f7ff ffa0 	bl	d41bc <_ZNK10BlynkParam8iterator5asIntEv>

    switch(cmd16) {
   d427c:	f247 2376 	movw	r3, #29302	; 0x7276
   d4280:	429f      	cmp	r7, r3
    const uint8_t pin = BLYNK_DECODE_PIN(it);
   d4282:	b2c4      	uxtb	r4, r0
    switch(cmd16) {
   d4284:	f000 80a9 	beq.w	d43da <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x18e>
   d4288:	d827      	bhi.n	d42da <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x8e>
   d428a:	f247 2361 	movw	r3, #29281	; 0x7261
   d428e:	429f      	cmp	r7, r3
   d4290:	d07e      	beq.n	d4390 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x144>
   d4292:	f247 2364 	movw	r3, #29284	; 0x7264
   d4296:	429f      	cmp	r7, r3
   d4298:	d042      	beq.n	d4320 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xd4>
   d429a:	f646 5370 	movw	r3, #28016	; 0x6d70
   d429e:	429f      	cmp	r7, r3
   d42a0:	d128      	bne.n	d42f4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xa8>

    case BLYNK_HW_PM: {
        while (it < param.end()) {
            const uint8_t pin = BLYNK_DECODE_PIN(it);
            ++it;
            if (!strcmp(it.asStr(), "in")) {
   d42a2:	4e63      	ldr	r6, [pc, #396]	; (d4430 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1e4>)
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   d42a4:	4f63      	ldr	r7, [pc, #396]	; (d4434 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1e8>)
   d42a6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; d4448 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1fc>
        while (it < param.end()) {
   d42aa:	9b05      	ldr	r3, [sp, #20]
   d42ac:	4599      	cmp	r9, r3
   d42ae:	d96c      	bls.n	d438a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   d42b0:	a805      	add	r0, sp, #20
   d42b2:	f7ff ff83 	bl	d41bc <_ZNK10BlynkParam8iterator5asIntEv>
   d42b6:	b2c4      	uxtb	r4, r0
            ++it;
   d42b8:	a805      	add	r0, sp, #20
   d42ba:	f7ff ff89 	bl	d41d0 <_ZN10BlynkParam8iteratorppEv>
            if (!strcmp(it.asStr(), "in")) {
   d42be:	9d05      	ldr	r5, [sp, #20]
   d42c0:	4631      	mov	r1, r6
   d42c2:	4628      	mov	r0, r5
   d42c4:	f002 ff4e 	bl	d7164 <strcmp>
   d42c8:	4601      	mov	r1, r0
   d42ca:	b9e0      	cbnz	r0, d4306 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xba>
                pinMode(pin, OUTPUT);
   d42cc:	4620      	mov	r0, r4
   d42ce:	f002 f86f 	bl	d63b0 <pinMode>
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
#endif
            }
            ++it;
   d42d2:	a805      	add	r0, sp, #20
   d42d4:	f7ff ff7c 	bl	d41d0 <_ZN10BlynkParam8iteratorppEv>
        while (it < param.end()) {
   d42d8:	e7e7      	b.n	d42aa <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x5e>
    switch(cmd16) {
   d42da:	f247 7364 	movw	r3, #30564	; 0x7764
   d42de:	429f      	cmp	r7, r3
   d42e0:	d03f      	beq.n	d4362 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x116>
   d42e2:	f247 7376 	movw	r3, #30582	; 0x7776
   d42e6:	429f      	cmp	r7, r3
   d42e8:	f000 8087 	beq.w	d43fa <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ae>
   d42ec:	f247 7361 	movw	r3, #30561	; 0x7761
   d42f0:	429f      	cmp	r7, r3
   d42f2:	d05f      	beq.n	d43b4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x168>
        BlynkParam param2(start, len - (start - (char*)buff));
        callWriteHandler(pin, param2);
    } break;
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   d42f4:	2300      	movs	r3, #0
   d42f6:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d42fa:	2202      	movs	r2, #2
   d42fc:	9200      	str	r2, [sp, #0]
   d42fe:	f8b8 201a 	ldrh.w	r2, [r8, #26]
   d4302:	4619      	mov	r1, r3
   d4304:	e029      	b.n	d435a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x10e>
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   d4306:	4639      	mov	r1, r7
   d4308:	4628      	mov	r0, r5
   d430a:	f002 ff2b 	bl	d7164 <strcmp>
   d430e:	b128      	cbz	r0, d431c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xd0>
   d4310:	4641      	mov	r1, r8
   d4312:	4628      	mov	r0, r5
   d4314:	f002 ff26 	bl	d7164 <strcmp>
   d4318:	2800      	cmp	r0, #0
   d431a:	d1da      	bne.n	d42d2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x86>
                pinMode(pin, OUTPUT);
   d431c:	2101      	movs	r1, #1
   d431e:	e7d5      	b.n	d42cc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x80>
        : buff((char*)addr), len(length), buff_size(buffsize)
   d4320:	ab0a      	add	r3, sp, #40	; 0x28
   d4322:	4945      	ldr	r1, [pc, #276]	; (d4438 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ec>)
   d4324:	9307      	str	r3, [sp, #28]
   d4326:	a807      	add	r0, sp, #28
   d4328:	2310      	movs	r3, #16
   d432a:	2500      	movs	r5, #0
   d432c:	e9cd 5308 	strd	r5, r3, [sp, #32]
    if (str == NULL) {
   d4330:	f7ff ff06 	bl	d4140 <_ZN10BlynkParam3addEPKc.part.0>
        rsp.add(pin);
   d4334:	a807      	add	r0, sp, #28
   d4336:	4621      	mov	r1, r4
   d4338:	f7ff ff5a 	bl	d41f0 <_ZN10BlynkParam3addEi>
        rsp.add(digitalRead(pin));
   d433c:	4620      	mov	r0, r4
   d433e:	f002 f861 	bl	d6404 <digitalRead>
        rsp.add(analogRead(pin));
   d4342:	4601      	mov	r1, r0
   d4344:	a807      	add	r0, sp, #28
   d4346:	f7ff ff65 	bl	d4214 <_ZN10BlynkParam3addEl>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
   d434a:	9b08      	ldr	r3, [sp, #32]
   d434c:	e9cd 5501 	strd	r5, r5, [sp, #4]
   d4350:	3b01      	subs	r3, #1
   d4352:	9300      	str	r3, [sp, #0]
   d4354:	9b07      	ldr	r3, [sp, #28]
   d4356:	462a      	mov	r2, r5
   d4358:	2114      	movs	r1, #20
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   d435a:	4640      	mov	r0, r8
   d435c:	f000 fb10 	bl	d4980 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
   d4360:	e013      	b.n	d438a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        if (++it >= param.end())
   d4362:	a805      	add	r0, sp, #20
   d4364:	f7ff ff34 	bl	d41d0 <_ZN10BlynkParam8iteratorppEv>
   d4368:	6803      	ldr	r3, [r0, #0]
   d436a:	4599      	cmp	r9, r3
   d436c:	d90d      	bls.n	d438a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        pinMode(pin, OUTPUT);
   d436e:	b2a4      	uxth	r4, r4
   d4370:	2101      	movs	r1, #1
   d4372:	4620      	mov	r0, r4
   d4374:	f002 f81c 	bl	d63b0 <pinMode>
        digitalWrite(pin, it.asInt() ? HIGH : LOW);
   d4378:	a805      	add	r0, sp, #20
   d437a:	f7ff ff1f 	bl	d41bc <_ZNK10BlynkParam8iterator5asIntEv>
   d437e:	1e01      	subs	r1, r0, #0
   d4380:	bf18      	it	ne
   d4382:	2101      	movne	r1, #1
   d4384:	4620      	mov	r0, r4
   d4386:	f002 f824 	bl	d63d2 <digitalWrite>
    }
}
   d438a:	b00f      	add	sp, #60	; 0x3c
   d438c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        : buff((char*)addr), len(length), buff_size(buffsize)
   d4390:	ab0a      	add	r3, sp, #40	; 0x28
   d4392:	9307      	str	r3, [sp, #28]
   d4394:	a807      	add	r0, sp, #28
   d4396:	2310      	movs	r3, #16
   d4398:	4928      	ldr	r1, [pc, #160]	; (d443c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f0>)
   d439a:	2500      	movs	r5, #0
   d439c:	e9cd 5308 	strd	r5, r3, [sp, #32]
    if (str == NULL) {
   d43a0:	f7ff fece 	bl	d4140 <_ZN10BlynkParam3addEPKc.part.0>
        rsp.add(pin);
   d43a4:	a807      	add	r0, sp, #28
   d43a6:	4621      	mov	r1, r4
   d43a8:	f7ff ff22 	bl	d41f0 <_ZN10BlynkParam3addEi>
        rsp.add(analogRead(pin));
   d43ac:	4620      	mov	r0, r4
   d43ae:	f002 f83c 	bl	d642a <analogRead>
   d43b2:	e7c6      	b.n	d4342 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xf6>
        if (++it >= param.end())
   d43b4:	a805      	add	r0, sp, #20
   d43b6:	f7ff ff0b 	bl	d41d0 <_ZN10BlynkParam8iteratorppEv>
   d43ba:	6803      	ldr	r3, [r0, #0]
   d43bc:	4599      	cmp	r9, r3
   d43be:	d9e4      	bls.n	d438a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        pinMode(pin, OUTPUT);
   d43c0:	b2a4      	uxth	r4, r4
   d43c2:	2101      	movs	r1, #1
   d43c4:	4620      	mov	r0, r4
   d43c6:	f001 fff3 	bl	d63b0 <pinMode>
        analogWrite(pin, it.asInt());
   d43ca:	a805      	add	r0, sp, #20
   d43cc:	f7ff fef6 	bl	d41bc <_ZNK10BlynkParam8iterator5asIntEv>
   d43d0:	4601      	mov	r1, r0
   d43d2:	4620      	mov	r0, r4
   d43d4:	f002 f840 	bl	d6458 <_Z11analogWritetm>
    } break;
   d43d8:	e7d7      	b.n	d438a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        }
    }

    void callReadHandler(int pin) {
        BlynkReq req = { (uint8_t)pin };
        WidgetReadHandler handler = GetReadHandler(pin);
   d43da:	4620      	mov	r0, r4
        BlynkReq req = { (uint8_t)pin };
   d43dc:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
        WidgetReadHandler handler = GetReadHandler(pin);
   d43e0:	f000 fce0 	bl	d4da4 <GetReadHandler>
        if (handler && (handler != BlynkWidgetRead)) {
   d43e4:	4603      	mov	r3, r0
            handler(req);
   d43e6:	a80a      	add	r0, sp, #40	; 0x28
        if (handler && (handler != BlynkWidgetRead)) {
   d43e8:	b123      	cbz	r3, d43f4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a8>
   d43ea:	4a15      	ldr	r2, [pc, #84]	; (d4440 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f4>)
   d43ec:	4293      	cmp	r3, r2
   d43ee:	d001      	beq.n	d43f4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a8>
            handler(req);
   d43f0:	4798      	blx	r3
   d43f2:	e7ca      	b.n	d438a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        } else {
            BlynkWidgetReadDefault(req);
   d43f4:	f000 fcd3 	bl	d4d9e <BlynkWidgetRead>
        }
    }
   d43f8:	e7c7      	b.n	d438a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        ++it;
   d43fa:	a805      	add	r0, sp, #20
   d43fc:	f7ff fee8 	bl	d41d0 <_ZN10BlynkParam8iteratorppEv>
        char* start = (char*)it.asStr();
   d4400:	9b05      	ldr	r3, [sp, #20]
        BlynkReq req = { (uint8_t)pin };
   d4402:	f88d 401c 	strb.w	r4, [sp, #28]
        BlynkParam param2(start, len - (start - (char*)buff));
   d4406:	1b5d      	subs	r5, r3, r5
   d4408:	1b75      	subs	r5, r6, r5
        WidgetWriteHandler handler = GetWriteHandler(pin);
   d440a:	4620      	mov	r0, r4
        : buff((char*)addr), len(length), buff_size(length)
   d440c:	e9cd 350a 	strd	r3, r5, [sp, #40]	; 0x28
   d4410:	950c      	str	r5, [sp, #48]	; 0x30
   d4412:	f000 fcd1 	bl	d4db8 <GetWriteHandler>
        if (handler && (handler != BlynkWidgetWrite)) {
   d4416:	4603      	mov	r3, r0
            handler(req, param);
   d4418:	a90a      	add	r1, sp, #40	; 0x28
   d441a:	a807      	add	r0, sp, #28
        if (handler && (handler != BlynkWidgetWrite)) {
   d441c:	b123      	cbz	r3, d4428 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1dc>
   d441e:	4a09      	ldr	r2, [pc, #36]	; (d4444 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f8>)
   d4420:	4293      	cmp	r3, r2
   d4422:	d001      	beq.n	d4428 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1dc>
            handler(req, param);
   d4424:	4798      	blx	r3
   d4426:	e7b0      	b.n	d438a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
            BlynkWidgetWriteDefault(req, param);
   d4428:	f000 fcba 	bl	d4da0 <BlynkWidgetWrite>
    } break;
   d442c:	e7ad      	b.n	d438a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
   d442e:	bf00      	nop
   d4430:	000d72d6 	.word	0x000d72d6
   d4434:	000d72d9 	.word	0x000d72d9
   d4438:	000d72e1 	.word	0x000d72e1
   d443c:	000d72e4 	.word	0x000d72e4
   d4440:	000d4d9f 	.word	0x000d4d9f
   d4444:	000d4da1 	.word	0x000d4da1
   d4448:	000d72dd 	.word	0x000d72dd

000d444c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>:
    return true;
}

template <class Transp>
BLYNK_FORCE_INLINE
bool BlynkProtocol<Transp>::processInput(void)
   d444c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4450:	b08c      	sub	sp, #48	; 0x30
   d4452:	af04      	add	r7, sp, #16
   d4454:	4604      	mov	r4, r0

    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
   d4456:	2205      	movs	r2, #5
   d4458:	6800      	ldr	r0, [r0, #0]
   d445a:	1d39      	adds	r1, r7, #4
   d445c:	f001 f8ec 	bl	d5638 <_ZN6Stream9readBytesEPcj>

template <class Transp>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
    if (rlen == 0) {
   d4460:	b3b8      	cbz	r0, d44d2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x86>
        return 0;
    }

    if (sizeof(hdr) != rlen) {
   d4462:	2805      	cmp	r0, #5
   d4464:	d004      	beq.n	d4470 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24>
        return false;
   d4466:	2000      	movs	r0, #0
}
   d4468:	3720      	adds	r7, #32
   d446a:	46bd      	mov	sp, r7
   d446c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   d4470:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   d4474:	0a13      	lsrs	r3, r2, #8
   d4476:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hdr.length = ntohs(hdr.length);
   d447a:	f8b7 2007 	ldrh.w	r2, [r7, #7]
    hdr.msg_id = ntohs(hdr.msg_id);
   d447e:	f8a7 3005 	strh.w	r3, [r7, #5]
   d4482:	b299      	uxth	r1, r3
    hdr.length = ntohs(hdr.length);
   d4484:	0a13      	lsrs	r3, r2, #8
   d4486:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d448a:	fa1f f883 	uxth.w	r8, r3
   d448e:	f8a7 3007 	strh.w	r3, [r7, #7]
    if (ret < 0 || hdr.msg_id == 0) {
   d4492:	2900      	cmp	r1, #0
   d4494:	d0e7      	beq.n	d4466 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a>
    if (hdr.type == BLYNK_CMD_RESPONSE) {
   d4496:	793b      	ldrb	r3, [r7, #4]
   d4498:	bb23      	cbnz	r3, d44e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x98>
        lastActivityIn = BlynkMillis();
   d449a:	f000 fc7e 	bl	d4d9a <_Z11BlynkMillisv>
   d449e:	4602      	mov	r2, r0
   d44a0:	60e0      	str	r0, [r4, #12]
        if (state == CONNECTING && (1 == hdr.msg_id)) {
   d44a2:	7f60      	ldrb	r0, [r4, #29]
   d44a4:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   d44a8:	b9c0      	cbnz	r0, d44dc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x90>
   d44aa:	f8b7 1005 	ldrh.w	r1, [r7, #5]
   d44ae:	2901      	cmp	r1, #1
   d44b0:	d114      	bne.n	d44dc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x90>
            switch (hdr.length) {
   d44b2:	2b09      	cmp	r3, #9
   d44b4:	d00f      	beq.n	d44d6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x8a>
   d44b6:	2bc8      	cmp	r3, #200	; 0xc8
   d44b8:	d001      	beq.n	d44be <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x72>
   d44ba:	2b04      	cmp	r3, #4
   d44bc:	d1d4      	bne.n	d4468 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = CONNECTED;
   d44be:	2501      	movs	r5, #1
                lastHeartbeat = lastActivityIn;
   d44c0:	6162      	str	r2, [r4, #20]
                this->sendInfo();
   d44c2:	4620      	mov	r0, r4
                state = CONNECTED;
   d44c4:	7765      	strb	r5, [r4, #29]
                this->sendInfo();
   d44c6:	f000 fb09 	bl	d4adc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
                BLYNK_RUN_YIELD();
   d44ca:	f7ff fe6b 	bl	d41a4 <_ZN10CloudClass7processEv>
                BlynkOnConnected();
   d44ce:	f000 fc68 	bl	d4da2 <BlynkNoOpCbk>
        return true; // Considered OK (no data on input)
   d44d2:	2001      	movs	r0, #1
   d44d4:	e7c8      	b.n	d4468 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = TOKEN_INVALID;
   d44d6:	2303      	movs	r3, #3
   d44d8:	7763      	strb	r3, [r4, #29]
                break;
   d44da:	e7c5      	b.n	d4468 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        if (BLYNK_NOT_AUTHENTICATED == hdr.length) {
   d44dc:	1f58      	subs	r0, r3, #5
   d44de:	bf18      	it	ne
   d44e0:	2001      	movne	r0, #1
   d44e2:	e7c1      	b.n	d4468 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
    if (hdr.length > BLYNK_MAX_READBYTES) {
   d44e4:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
   d44e8:	d903      	bls.n	d44f2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xa6>
        internalReconnect();
   d44ea:	4620      	mov	r0, r4
   d44ec:	f7ff fea4 	bl	d4238 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   d44f0:	e7ef      	b.n	d44d2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x86>
    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
   d44f2:	f108 0308 	add.w	r3, r8, #8
   d44f6:	f023 0307 	bic.w	r3, r3, #7
   d44fa:	466e      	mov	r6, sp
   d44fc:	ebad 0d03 	sub.w	sp, sp, r3
   d4500:	ad04      	add	r5, sp, #16
   d4502:	6820      	ldr	r0, [r4, #0]
   d4504:	4642      	mov	r2, r8
   d4506:	4629      	mov	r1, r5
   d4508:	f001 f896 	bl	d5638 <_ZN6Stream9readBytesEPcj>
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
   d450c:	4580      	cmp	r8, r0
   d450e:	f04f 0000 	mov.w	r0, #0
   d4512:	d17f      	bne.n	d4614 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c8>
    inputBuffer[hdr.length] = '\0';
   d4514:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   d4518:	54e8      	strb	r0, [r5, r3]
    lastActivityIn = BlynkMillis();
   d451a:	f000 fc3e 	bl	d4d9a <_Z11BlynkMillisv>
    switch (hdr.type)
   d451e:	793b      	ldrb	r3, [r7, #4]
    lastActivityIn = BlynkMillis();
   d4520:	60e0      	str	r0, [r4, #12]
    switch (hdr.type)
   d4522:	2b14      	cmp	r3, #20
   d4524:	f000 80a6 	beq.w	d4674 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x228>
   d4528:	d848      	bhi.n	d45bc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x170>
   d452a:	2b0f      	cmp	r3, #15
   d452c:	f000 80a2 	beq.w	d4674 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x228>
   d4530:	d807      	bhi.n	d4542 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xf6>
   d4532:	2b02      	cmp	r3, #2
   d4534:	d048      	beq.n	d45c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x17c>
   d4536:	2b06      	cmp	r3, #6
   d4538:	d051      	beq.n	d45de <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x192>
        internalReconnect();
   d453a:	4620      	mov	r0, r4
   d453c:	f7ff fe7c 	bl	d4238 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   d4540:	e058      	b.n	d45f4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
    switch (hdr.type)
   d4542:	2b11      	cmp	r3, #17
   d4544:	d1f9      	bne.n	d453a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xee>
        BlynkReq req = { 0 };
   d4546:	2300      	movs	r3, #0
   d4548:	703b      	strb	r3, [r7, #0]
        BlynkParam param(inputBuffer, hdr.length);
   d454a:	f8b7 3007 	ldrh.w	r3, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   d454e:	442b      	add	r3, r5
        if (it >= param.end())
   d4550:	429d      	cmp	r5, r3
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d4552:	e9c7 5303 	strd	r5, r3, [r7, #12]
   d4556:	d24d      	bcs.n	d45f4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
        ++it;
   d4558:	f107 000c 	add.w	r0, r7, #12
   d455c:	f8d5 8000 	ldr.w	r8, [r5]
   d4560:	f7ff fe36 	bl	d41d0 <_ZN10BlynkParam8iteratorppEv>
        char* start = (char*)(it).asStr();
   d4564:	68fb      	ldr	r3, [r7, #12]
        unsigned length = hdr.length - (start - (char*)inputBuffer);
   d4566:	f8b7 1007 	ldrh.w	r1, [r7, #7]
   d456a:	1b5d      	subs	r5, r3, r5
   d456c:	1b4d      	subs	r5, r1, r5
        : buff((char*)addr), len(length), buff_size(length)
   d456e:	e9c7 3505 	strd	r3, r5, [r7, #20]
        msgIdOutOverride = hdr.msg_id;
   d4572:	687b      	ldr	r3, [r7, #4]
   d4574:	61fd      	str	r5, [r7, #28]
   d4576:	f3c3 230f 	ubfx	r3, r3, #8, #16
   d457a:	8363      	strh	r3, [r4, #26]
   d457c:	4b64      	ldr	r3, [pc, #400]	; (d4710 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c4>)
   d457e:	4598      	cmp	r8, r3
   d4580:	f000 80bf 	beq.w	d4702 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2b6>
   d4584:	f200 808c 	bhi.w	d46a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x254>
   d4588:	f5a3 237f 	sub.w	r3, r3, #1044480	; 0xff000
   d458c:	f46f 7200 	mvn.w	r2, #512	; 0x200
   d4590:	4413      	add	r3, r2
   d4592:	4598      	cmp	r8, r3
   d4594:	f000 809d 	beq.w	d46d2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x286>
   d4598:	d879      	bhi.n	d468e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x242>
   d459a:	f5a3 3300 	sub.w	r3, r3, #131072	; 0x20000
   d459e:	3b06      	subs	r3, #6
   d45a0:	4598      	cmp	r8, r3
   d45a2:	f000 809c 	beq.w	d46de <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x292>
   d45a6:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   d45aa:	3303      	adds	r3, #3
   d45ac:	4598      	cmp	r8, r3
   d45ae:	d16b      	bne.n	d4688 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
   d45b0:	f107 0114 	add.w	r1, r7, #20
   d45b4:	4638      	mov	r0, r7
   d45b6:	f000 fbf3 	bl	d4da0 <BlynkWidgetWrite>
   d45ba:	e065      	b.n	d4688 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
    switch (hdr.type)
   d45bc:	2b29      	cmp	r3, #41	; 0x29
   d45be:	d01b      	beq.n	d45f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1ac>
   d45c0:	2b37      	cmp	r3, #55	; 0x37
   d45c2:	d017      	beq.n	d45f4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
   d45c4:	2b1d      	cmp	r3, #29
   d45c6:	d1b8      	bne.n	d453a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xee>
        if (state == CONNECTING) {
   d45c8:	7f63      	ldrb	r3, [r4, #29]
   d45ca:	b943      	cbnz	r3, d45de <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x192>
            state = CONNECTED;
   d45cc:	2301      	movs	r3, #1
   d45ce:	7763      	strb	r3, [r4, #29]
            this->sendInfo();
   d45d0:	4620      	mov	r0, r4
   d45d2:	f000 fa83 	bl	d4adc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
            BLYNK_RUN_YIELD();
   d45d6:	f7ff fde5 	bl	d41a4 <_ZN10CloudClass7processEv>
            BlynkOnConnected();
   d45da:	f000 fbe2 	bl	d4da2 <BlynkNoOpCbk>
        sendCmd(BLYNK_CMD_RESPONSE, id, NULL, rsp);
   d45de:	2300      	movs	r3, #0
   d45e0:	21c8      	movs	r1, #200	; 0xc8
   d45e2:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   d45e6:	9100      	str	r1, [sp, #0]
   d45e8:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d45ec:	4619      	mov	r1, r3
   d45ee:	4620      	mov	r0, r4
   d45f0:	f000 f9c6 	bl	d4980 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    switch (hdr.type)
   d45f4:	2001      	movs	r0, #1
   d45f6:	e00d      	b.n	d4614 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c8>
        if (!redir_serv) {
   d45f8:	68a3      	ldr	r3, [r4, #8]
   d45fa:	b91b      	cbnz	r3, d4604 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1b8>
             redir_serv = (char*)malloc(64);
   d45fc:	2040      	movs	r0, #64	; 0x40
   d45fe:	f000 fe09 	bl	d5214 <malloc>
   d4602:	60a0      	str	r0, [r4, #8]
        BlynkParam param(inputBuffer, hdr.length);
   d4604:	f8b7 8007 	ldrh.w	r8, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   d4608:	44a8      	add	r8, r5
        if (it >= param.end())
   d460a:	4545      	cmp	r5, r8
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d460c:	e9c7 5805 	strd	r5, r8, [r7, #20]
   d4610:	d302      	bcc.n	d4618 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1cc>
            return false;
   d4612:	2000      	movs	r0, #0
   d4614:	46b5      	mov	sp, r6
   d4616:	e727      	b.n	d4468 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        strncpy(redir_serv, it.asStr(), 64);
   d4618:	4629      	mov	r1, r5
   d461a:	2240      	movs	r2, #64	; 0x40
   d461c:	68a0      	ldr	r0, [r4, #8]
   d461e:	f002 fdb3 	bl	d7188 <strncpy>
        redir_serv[63] = '\0';
   d4622:	68a3      	ldr	r3, [r4, #8]
   d4624:	2500      	movs	r5, #0
   d4626:	f883 503f 	strb.w	r5, [r3, #63]	; 0x3f
        if (++it < param.end())
   d462a:	f107 0014 	add.w	r0, r7, #20
   d462e:	f7ff fdcf 	bl	d41d0 <_ZN10BlynkParam8iteratorppEv>
   d4632:	6803      	ldr	r3, [r0, #0]
   d4634:	4543      	cmp	r3, r8
   d4636:	d21b      	bcs.n	d4670 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x224>
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d4638:	6978      	ldr	r0, [r7, #20]
   d463a:	b120      	cbz	r0, d4646 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1fa>
   d463c:	69bb      	ldr	r3, [r7, #24]
   d463e:	4298      	cmp	r0, r3
   d4640:	d214      	bcs.n	d466c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x220>
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   d4642:	f002 fd43 	bl	d70cc <atol>
            redir_port = it.asLong();
   d4646:	b285      	uxth	r5, r0
    void disconnect() { client.stop(); }
   d4648:	6820      	ldr	r0, [r4, #0]
   d464a:	f001 fca9 	bl	d5fa0 <_ZN9TCPClient4stopEv>
        conn.begin(redir_serv, redir_port);
   d464e:	6823      	ldr	r3, [r4, #0]
   d4650:	68a2      	ldr	r2, [r4, #8]
        domain = d;
   d4652:	635a      	str	r2, [r3, #52]	; 0x34
        port = p;
   d4654:	871d      	strh	r5, [r3, #56]	; 0x38
        state = CONNECTING;
   d4656:	2300      	movs	r3, #0
   d4658:	7763      	strb	r3, [r4, #29]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   d465a:	f000 fb9e 	bl	d4d9a <_Z11BlynkMillisv>
   d465e:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   d4662:	3808      	subs	r0, #8
   d4664:	e9c4 0003 	strd	r0, r0, [r4, #12]
   d4668:	6160      	str	r0, [r4, #20]
   d466a:	e7c3      	b.n	d45f4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
   d466c:	4628      	mov	r0, r5
   d466e:	e7ea      	b.n	d4646 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1fa>
        uint16_t redir_port = BLYNK_DEFAULT_PORT;
   d4670:	2550      	movs	r5, #80	; 0x50
   d4672:	e7e9      	b.n	d4648 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1fc>
        msgIdOutOverride = hdr.msg_id;
   d4674:	687b      	ldr	r3, [r7, #4]
        this->processCmd(inputBuffer, hdr.length);
   d4676:	f8b7 2007 	ldrh.w	r2, [r7, #7]
        msgIdOutOverride = hdr.msg_id;
   d467a:	f3c3 230f 	ubfx	r3, r3, #8, #16
   d467e:	8363      	strh	r3, [r4, #26]
        this->processCmd(inputBuffer, hdr.length);
   d4680:	4629      	mov	r1, r5
   d4682:	4620      	mov	r0, r4
   d4684:	f7ff fde2 	bl	d424c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>
        msgIdOutOverride = 0;
   d4688:	2300      	movs	r3, #0
   d468a:	8363      	strh	r3, [r4, #26]
   d468c:	e7b2      	b.n	d45f4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
   d468e:	4b21      	ldr	r3, [pc, #132]	; (d4714 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c8>)
   d4690:	4598      	cmp	r8, r3
   d4692:	d1f9      	bne.n	d4688 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_DBG:  BlynkWidgetWriteInternalPinDBG(req, param2);    break;
   d4694:	f107 0114 	add.w	r1, r7, #20
   d4698:	4638      	mov	r0, r7
   d469a:	f000 fb81 	bl	d4da0 <BlynkWidgetWrite>
   d469e:	e7f3      	b.n	d4688 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
   d46a0:	4b1d      	ldr	r3, [pc, #116]	; (d4718 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2cc>)
   d46a2:	4598      	cmp	r8, r3
   d46a4:	d021      	beq.n	d46ea <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x29e>
   d46a6:	f103 639f 	add.w	r3, r3, #83361792	; 0x4f80000
   d46aa:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   d46ae:	f503 7380 	add.w	r3, r3, #256	; 0x100
   d46b2:	4598      	cmp	r8, r3
   d46b4:	d01f      	beq.n	d46f6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2aa>
   d46b6:	f103 436e 	add.w	r3, r3, #3992977408	; 0xee000000
   d46ba:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   d46be:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   d46c2:	4598      	cmp	r8, r3
   d46c4:	d1e0      	bne.n	d4688 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_META: BlynkWidgetWriteInternalPinMETA(req, param2);   break;
   d46c6:	f107 0114 	add.w	r1, r7, #20
   d46ca:	4638      	mov	r0, r7
   d46cc:	f000 fb68 	bl	d4da0 <BlynkWidgetWrite>
   d46d0:	e7da      	b.n	d4688 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_UTC:  BlynkWidgetWriteInternalPinUTC(req, param2);    break;
   d46d2:	f107 0114 	add.w	r1, r7, #20
   d46d6:	4638      	mov	r0, r7
   d46d8:	f000 fb62 	bl	d4da0 <BlynkWidgetWrite>
   d46dc:	e7d4      	b.n	d4688 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
   d46de:	f107 0114 	add.w	r1, r7, #20
   d46e2:	4638      	mov	r0, r7
   d46e4:	f000 fb5c 	bl	d4da0 <BlynkWidgetWrite>
   d46e8:	e7ce      	b.n	d4688 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
   d46ea:	f107 0114 	add.w	r1, r7, #20
   d46ee:	4638      	mov	r0, r7
   d46f0:	f000 fb56 	bl	d4da0 <BlynkWidgetWrite>
   d46f4:	e7c8      	b.n	d4688 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
   d46f6:	f107 0114 	add.w	r1, r7, #20
   d46fa:	4638      	mov	r0, r7
   d46fc:	f000 fb50 	bl	d4da0 <BlynkWidgetWrite>
   d4700:	e7c2      	b.n	d4688 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_VFS:  BlynkWidgetWriteInternalPinVFS(req, param2);    break;
   d4702:	f107 0114 	add.w	r1, r7, #20
   d4706:	4638      	mov	r0, r7
   d4708:	f000 fb4a 	bl	d4da0 <BlynkWidgetWrite>
   d470c:	e7bc      	b.n	d4688 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
   d470e:	bf00      	nop
   d4710:	00736676 	.word	0x00736676
   d4714:	00676264 	.word	0x00676264
   d4718:	6e6f6361 	.word	0x6e6f6361

000d471c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>:
bool BlynkProtocol<Transp>::run(bool avail)
   d471c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4720:	4604      	mov	r4, r0
   d4722:	b08c      	sub	sp, #48	; 0x30
   d4724:	460d      	mov	r5, r1
    BLYNK_RUN_YIELD();
   d4726:	f7ff fd3d 	bl	d41a4 <_ZN10CloudClass7processEv>
    if (state == DISCONNECTED) {
   d472a:	7f63      	ldrb	r3, [r4, #29]
   d472c:	2b02      	cmp	r3, #2
   d472e:	f000 80a8 	beq.w	d4882 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x166>
  return ~crc;
}

class BlynkHelperAutoInc {
public:
    BlynkHelperAutoInc(uint8_t& counter) : c(counter) { ++c; }
   d4732:	7f23      	ldrb	r3, [r4, #28]
    if (msgIdOutOverride || nesting > 2) {
   d4734:	8b62      	ldrh	r2, [r4, #26]
   d4736:	3301      	adds	r3, #1
   d4738:	b2db      	uxtb	r3, r3
   d473a:	7723      	strb	r3, [r4, #28]
   d473c:	b10a      	cbz	r2, d4742 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x26>
    return true;
   d473e:	2501      	movs	r5, #1
   d4740:	e016      	b.n	d4770 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
    if (msgIdOutOverride || nesting > 2) {
   d4742:	2b02      	cmp	r3, #2
   d4744:	d8fb      	bhi.n	d473e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   d4746:	6820      	ldr	r0, [r4, #0]
   d4748:	f001 fa49 	bl	d5bde <_ZN9TCPClient9connectedEv>
    if (conn.connected()) {
   d474c:	b1b8      	cbz	r0, d477e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x62>
        while (avail || conn.available() > 0) {
   d474e:	b925      	cbnz	r5, d475a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x3e>
    int available() { return client.available(); }
   d4750:	6820      	ldr	r0, [r4, #0]
   d4752:	f001 fbcb 	bl	d5eec <_ZN9TCPClient9availableEv>
   d4756:	2800      	cmp	r0, #0
   d4758:	dd11      	ble.n	d477e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x62>
            if (!processInput()) {
   d475a:	4620      	mov	r0, r4
   d475c:	f7ff fe76 	bl	d444c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>
   d4760:	4605      	mov	r5, r0
   d4762:	2800      	cmp	r0, #0
   d4764:	d1f4      	bne.n	d4750 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x34>
    void disconnect() { client.stop(); }
   d4766:	6820      	ldr	r0, [r4, #0]
   d4768:	f001 fc1a 	bl	d5fa0 <_ZN9TCPClient4stopEv>
                BlynkOnDisconnected();
   d476c:	f000 fb19 	bl	d4da2 <BlynkNoOpCbk>
    ~BlynkHelperAutoInc() { --c; }
   d4770:	7f23      	ldrb	r3, [r4, #28]
   d4772:	3b01      	subs	r3, #1
   d4774:	7723      	strb	r3, [r4, #28]
}
   d4776:	4628      	mov	r0, r5
   d4778:	b00c      	add	sp, #48	; 0x30
   d477a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    const millis_time_t t = BlynkMillis();
   d477e:	f000 fb0c 	bl	d4d9a <_Z11BlynkMillisv>
   d4782:	4606      	mov	r6, r0
    bool connected() { return client.connected(); }
   d4784:	6820      	ldr	r0, [r4, #0]
   d4786:	f001 fa2a 	bl	d5bde <_ZN9TCPClient9connectedEv>
    if (state == CONNECTED) {
   d478a:	7f67      	ldrb	r7, [r4, #29]
   d478c:	2f01      	cmp	r7, #1
   d478e:	4605      	mov	r5, r0
   d4790:	d129      	bne.n	d47e6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xca>
        if (!tconn) {
   d4792:	b920      	cbnz	r0, d479e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x82>
            lastHeartbeat = t;
   d4794:	6166      	str	r6, [r4, #20]
            internalReconnect();
   d4796:	4620      	mov	r0, r4
   d4798:	f7ff fd4e 	bl	d4238 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   d479c:	e7e8      	b.n	d4770 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
        if (t - lastActivityIn > (1000UL * BLYNK_HEARTBEAT + BLYNK_TIMEOUT_MS*3)) {
   d479e:	68e3      	ldr	r3, [r4, #12]
   d47a0:	f24f 6218 	movw	r2, #63000	; 0xf618
   d47a4:	1af3      	subs	r3, r6, r3
   d47a6:	4293      	cmp	r3, r2
   d47a8:	d904      	bls.n	d47b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x98>
            internalReconnect();
   d47aa:	4620      	mov	r0, r4
   d47ac:	f7ff fd44 	bl	d4238 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   d47b0:	2500      	movs	r5, #0
   d47b2:	e7dd      	b.n	d4770 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   d47b4:	f64a 72c8 	movw	r2, #45000	; 0xafc8
   d47b8:	4293      	cmp	r3, r2
   d47ba:	d803      	bhi.n	d47c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   d47bc:	6923      	ldr	r3, [r4, #16]
   d47be:	1af3      	subs	r3, r6, r3
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   d47c0:	4293      	cmp	r3, r2
   d47c2:	d9bc      	bls.n	d473e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   d47c4:	6963      	ldr	r3, [r4, #20]
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   d47c6:	f241 7270 	movw	r2, #6000	; 0x1770
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   d47ca:	1af3      	subs	r3, r6, r3
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   d47cc:	4293      	cmp	r3, r2
   d47ce:	d9b6      	bls.n	d473e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
            sendCmd(BLYNK_CMD_PING);
   d47d0:	2300      	movs	r3, #0
   d47d2:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d47d6:	9300      	str	r3, [sp, #0]
   d47d8:	461a      	mov	r2, r3
   d47da:	2106      	movs	r1, #6
   d47dc:	4620      	mov	r0, r4
   d47de:	f000 f8cf 	bl	d4980 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastHeartbeat = t;
   d47e2:	6166      	str	r6, [r4, #20]
   d47e4:	e7ab      	b.n	d473e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
    } else if (state == CONNECTING) {
   d47e6:	2f00      	cmp	r7, #0
   d47e8:	d1a9      	bne.n	d473e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
   d47ea:	6962      	ldr	r2, [r4, #20]
   d47ec:	1ab2      	subs	r2, r6, r2
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
   d47ee:	b140      	cbz	r0, d4802 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xe6>
   d47f0:	f241 7370 	movw	r3, #6000	; 0x1770
   d47f4:	429a      	cmp	r2, r3
   d47f6:	d9a2      	bls.n	d473e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
    void disconnect() { client.stop(); }
   d47f8:	6820      	ldr	r0, [r4, #0]
   d47fa:	f001 fbd1 	bl	d5fa0 <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   d47fe:	7767      	strb	r7, [r4, #29]
   d4800:	e7d6      	b.n	d47b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x94>
        } else if (!tconn && (t - lastLogin > 5000UL)) {
   d4802:	f241 3388 	movw	r3, #5000	; 0x1388
   d4806:	429a      	cmp	r2, r3
   d4808:	d999      	bls.n	d473e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
   d480a:	6820      	ldr	r0, [r4, #0]
   d480c:	f001 fbc8 	bl	d5fa0 <_ZN9TCPClient4stopEv>
            if (!conn.connect()) {
   d4810:	f8d4 c000 	ldr.w	ip, [r4]
        if (domain) {
   d4814:	f8dc e034 	ldr.w	lr, [ip, #52]	; 0x34
   d4818:	f8bc 8038 	ldrh.w	r8, [ip, #56]	; 0x38
   d481c:	f1be 0f00 	cmp.w	lr, #0
   d4820:	d00b      	beq.n	d483a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x11e>
            return (1 == client.connect(domain, port));
   d4822:	462b      	mov	r3, r5
   d4824:	4642      	mov	r2, r8
   d4826:	4671      	mov	r1, lr
   d4828:	4660      	mov	r0, ip
   d482a:	f001 fc17 	bl	d605c <_ZN9TCPClient7connectEPKctm>
            return (1 == client.connect(addr, port));
   d482e:	1e43      	subs	r3, r0, #1
   d4830:	425d      	negs	r5, r3
   d4832:	415d      	adcs	r5, r3
   d4834:	b98d      	cbnz	r5, d485a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x13e>
                lastLogin = t;
   d4836:	6166      	str	r6, [r4, #20]
                return false;
   d4838:	e79a      	b.n	d4770 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d483a:	4b13      	ldr	r3, [pc, #76]	; (d4888 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x16c>)
   d483c:	9306      	str	r3, [sp, #24]
   d483e:	f10c 0720 	add.w	r7, ip, #32
   d4842:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   d4844:	ad07      	add	r5, sp, #28
   d4846:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4848:	683b      	ldr	r3, [r7, #0]
   d484a:	702b      	strb	r3, [r5, #0]
   d484c:	4642      	mov	r2, r8
   d484e:	4673      	mov	r3, lr
   d4850:	a906      	add	r1, sp, #24
   d4852:	4660      	mov	r0, ip
   d4854:	f001 facf 	bl	d5df6 <_ZN9TCPClient7connectE9IPAddresstm>
   d4858:	e7e9      	b.n	d482e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x112>
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   d485a:	6863      	ldr	r3, [r4, #4]
   d485c:	9305      	str	r3, [sp, #20]
            msgIdOut = 1;
   d485e:	2601      	movs	r6, #1
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   d4860:	4618      	mov	r0, r3
            msgIdOut = 1;
   d4862:	8326      	strh	r6, [r4, #24]
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   d4864:	f002 fc88 	bl	d7178 <strlen>
   d4868:	2200      	movs	r2, #0
   d486a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d486e:	9b05      	ldr	r3, [sp, #20]
   d4870:	9000      	str	r0, [sp, #0]
   d4872:	4632      	mov	r2, r6
   d4874:	211d      	movs	r1, #29
   d4876:	4620      	mov	r0, r4
   d4878:	f000 f882 	bl	d4980 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastLogin = lastActivityOut;
   d487c:	6923      	ldr	r3, [r4, #16]
   d487e:	6163      	str	r3, [r4, #20]
            return true;
   d4880:	e776      	b.n	d4770 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
        return false;
   d4882:	2500      	movs	r5, #0
   d4884:	e777      	b.n	d4776 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x5a>
   d4886:	bf00      	nop
   d4888:	000d77fc 	.word	0x000d77fc

000d488c <_ZN13BlynkParticle5beginEPKc9IPAddresst>:
        BlynkDelay(3000); // Give the board time to settle
        config(auth, domain, port);
        while(this->connect() != true) {}
    }

    void begin( const char* auth,
   d488c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4890:	4615      	mov	r5, r2
   d4892:	b08c      	sub	sp, #48	; 0x30
   d4894:	4604      	mov	r4, r0
   d4896:	3504      	adds	r5, #4
                IPAddress addr,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
   d4898:	f640 30b8 	movw	r0, #3000	; 0xbb8
    void begin( const char* auth,
   d489c:	460f      	mov	r7, r1
   d489e:	4698      	mov	r8, r3
        BlynkDelay(3000); // Give the board time to settle
   d48a0:	f000 fa79 	bl	d4d96 <_Z10BlynkDelaym>
   d48a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d48a6:	ae01      	add	r6, sp, #4
   d48a8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d48aa:	682b      	ldr	r3, [r5, #0]
   d48ac:	7033      	strb	r3, [r6, #0]
        this->authkey = auth;
   d48ae:	6067      	str	r7, [r4, #4]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   d48b0:	f000 fa73 	bl	d4d9a <_Z11BlynkMillisv>
   d48b4:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   d48b8:	3808      	subs	r0, #8
   d48ba:	af01      	add	r7, sp, #4
   d48bc:	e9c4 0003 	strd	r0, r0, [r4, #12]
   d48c0:	6160      	str	r0, [r4, #20]
   d48c2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   d48c4:	ae07      	add	r6, sp, #28
   d48c6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d48c8:	683b      	ldr	r3, [r7, #0]
   d48ca:	7033      	strb	r3, [r6, #0]
   d48cc:	af07      	add	r7, sp, #28
   d48ce:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
        this->conn.begin(addr, port);
   d48d0:	6825      	ldr	r5, [r4, #0]
        domain = NULL;
   d48d2:	f04f 0c00 	mov.w	ip, #0
   d48d6:	f8c5 c034 	str.w	ip, [r5, #52]	; 0x34
        port = p;
   d48da:	f8a5 8038 	strh.w	r8, [r5, #56]	; 0x38
   d48de:	3520      	adds	r5, #32
   d48e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d48e2:	6833      	ldr	r3, [r6, #0]
   d48e4:	702b      	strb	r3, [r5, #0]
        state = CONNECTING;
   d48e6:	4666      	mov	r6, ip
        while ((state != CONNECTED) &&
   d48e8:	f244 674f 	movw	r7, #17999	; 0x464f
    void disconnect() { client.stop(); }
   d48ec:	6820      	ldr	r0, [r4, #0]
   d48ee:	f001 fb57 	bl	d5fa0 <_ZN9TCPClient4stopEv>
        state = CONNECTING;
   d48f2:	7766      	strb	r6, [r4, #29]
        millis_time_t started = BlynkMillis();
   d48f4:	f000 fa51 	bl	d4d9a <_Z11BlynkMillisv>
   d48f8:	4605      	mov	r5, r0
        while ((state != CONNECTED) &&
   d48fa:	7f63      	ldrb	r3, [r4, #29]
   d48fc:	2b01      	cmp	r3, #1
   d48fe:	d00c      	beq.n	d491a <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x8e>
               (BlynkMillis() - started < timeout))
   d4900:	f000 fa4b 	bl	d4d9a <_Z11BlynkMillisv>
   d4904:	1b40      	subs	r0, r0, r5
        while ((state != CONNECTED) &&
   d4906:	42b8      	cmp	r0, r7
   d4908:	d804      	bhi.n	d4914 <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x88>
            run();
   d490a:	2100      	movs	r1, #0
   d490c:	4620      	mov	r0, r4
   d490e:	f7ff ff05 	bl	d471c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
        while ((state != CONNECTED) &&
   d4912:	e7f2      	b.n	d48fa <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x6e>
        config(auth, addr, port);
        while(this->connect() != true) {}
   d4914:	7f63      	ldrb	r3, [r4, #29]
   d4916:	2b01      	cmp	r3, #1
   d4918:	d1e8      	bne.n	d48ec <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x60>
    }
   d491a:	b00c      	add	sp, #48	; 0x30
   d491c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4920 <setup>:
void setup() {
   d4920:	b500      	push	{lr}
   d4922:	b089      	sub	sp, #36	; 0x24
  Blynk.begin("ko3xEgY1CtzZLGjHWlJ4DPUOsoZLNmmr", IPAddress(167, 172, 234, 162), 9090);
   d4924:	23a2      	movs	r3, #162	; 0xa2
   d4926:	9300      	str	r3, [sp, #0]
   d4928:	22ac      	movs	r2, #172	; 0xac
   d492a:	23ea      	movs	r3, #234	; 0xea
   d492c:	21a7      	movs	r1, #167	; 0xa7
   d492e:	a802      	add	r0, sp, #8
   d4930:	f000 ffd4 	bl	d58dc <_ZN9IPAddressC1Ehhhh>
   d4934:	f242 3382 	movw	r3, #9090	; 0x2382
   d4938:	aa02      	add	r2, sp, #8
   d493a:	490d      	ldr	r1, [pc, #52]	; (d4970 <setup+0x50>)
   d493c:	480d      	ldr	r0, [pc, #52]	; (d4974 <setup+0x54>)
   d493e:	f7ff ffa5 	bl	d488c <_ZN13BlynkParticle5beginEPKc9IPAddresst>
  Serial.begin(9600);
   d4942:	f001 f843 	bl	d59cc <_Z16_fetch_usbserialv>
   d4946:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d494a:	f001 f833 	bl	d59b4 <_ZN9USBSerial5beginEl>
  pinMode(A4, INPUT);
   d494e:	2100      	movs	r1, #0
   d4950:	200f      	movs	r0, #15
   d4952:	f001 fd2d 	bl	d63b0 <pinMode>
  pinMode(D3, INPUT);
   d4956:	2100      	movs	r1, #0
   d4958:	2003      	movs	r0, #3
   d495a:	f001 fd29 	bl	d63b0 <pinMode>
  timer.setInterval(1000, tempDisplay);
   d495e:	4a06      	ldr	r2, [pc, #24]	; (d4978 <setup+0x58>)
   d4960:	4806      	ldr	r0, [pc, #24]	; (d497c <setup+0x5c>)
   d4962:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d4966:	f000 f99e 	bl	d4ca6 <_ZN10BlynkTimer11setIntervalEmPFvvE>
}
   d496a:	b009      	add	sp, #36	; 0x24
   d496c:	f85d fb04 	ldr.w	pc, [sp], #4
   d4970:	000d72e7 	.word	0x000d72e7
   d4974:	2003e3a4 	.word	0x2003e3a4
   d4978:	000d40c1 	.word	0x000d40c1
   d497c:	2003e400 	.word	0x2003e400

000d4980 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>:
#ifndef BLYNK_SEND_CHUNK
#define BLYNK_SEND_CHUNK 1024 // Just a big number
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
   d4980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4984:	b083      	sub	sp, #12
   d4986:	af00      	add	r7, sp, #0
   d4988:	4604      	mov	r4, r0
    bool connected() { return client.connected(); }
   d498a:	6800      	ldr	r0, [r0, #0]
   d498c:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   d498e:	4688      	mov	r8, r1
   d4990:	4616      	mov	r6, r2
   d4992:	4699      	mov	r9, r3
#endif
        internalReconnect();
        return;
    }

    lastActivityOut = BlynkMillis();
   d4994:	46eb      	mov	fp, sp
   d4996:	f001 f922 	bl	d5bde <_ZN9TCPClient9connectedEv>
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && cmd != BLYNK_CMD_HW_LOGIN && state != CONNECTED) ) {
   d499a:	2800      	cmp	r0, #0
   d499c:	d07f      	beq.n	d4a9e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
   d499e:	f1b8 0f1d 	cmp.w	r8, #29
   d49a2:	d804      	bhi.n	d49ae <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x2e>
   d49a4:	4b4c      	ldr	r3, [pc, #304]	; (d4ad8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x158>)
   d49a6:	fa23 f308 	lsr.w	r3, r3, r8
   d49aa:	07db      	lsls	r3, r3, #31
   d49ac:	d402      	bmi.n	d49b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x34>
   d49ae:	7f63      	ldrb	r3, [r4, #29]
   d49b0:	2b01      	cmp	r3, #1
   d49b2:	d174      	bne.n	d4a9e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
    if (0 == id) {
   d49b4:	b946      	cbnz	r6, d49c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x48>
}

template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
   d49b6:	8b66      	ldrh	r6, [r4, #26]
   d49b8:	b936      	cbnz	r6, d49c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x48>
        return msgIdOutOverride;
    if (++msgIdOut == 0)
   d49ba:	8b23      	ldrh	r3, [r4, #24]
   d49bc:	3301      	adds	r3, #1
   d49be:	b29b      	uxth	r3, r3
   d49c0:	2b00      	cmp	r3, #0
   d49c2:	d071      	beq.n	d4aa8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x128>
        msgIdOut = 1;
   d49c4:	8323      	strh	r3, [r4, #24]
    return msgIdOut;
   d49c6:	8b26      	ldrh	r6, [r4, #24]
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
   d49c8:	f1a8 030c 	sub.w	r3, r8, #12
   d49cc:	2b08      	cmp	r3, #8
   d49ce:	d816      	bhi.n	d49fe <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
        const millis_time_t allowed_time = BlynkMax(lastActivityOut, lastActivityIn) + 1000/BLYNK_MSG_LIMIT;
   d49d0:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   d49d4:	4293      	cmp	r3, r2
   d49d6:	bf38      	it	cc
   d49d8:	4613      	movcc	r3, r2
   d49da:	f103 0a42 	add.w	sl, r3, #66	; 0x42
        int32_t wait_time = allowed_time - BlynkMillis();
   d49de:	f000 f9dc 	bl	d4d9a <_Z11BlynkMillisv>
   d49e2:	ebaa 0000 	sub.w	r0, sl, r0
        if (wait_time >= 0) {
   d49e6:	2800      	cmp	r0, #0
   d49e8:	db60      	blt.n	d4aac <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x12c>
                run();
   d49ea:	2100      	movs	r1, #0
   d49ec:	4620      	mov	r0, r4
   d49ee:	f7ff fe95 	bl	d471c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
                wait_time = allowed_time - BlynkMillis();
   d49f2:	f000 f9d2 	bl	d4d9a <_Z11BlynkMillisv>
   d49f6:	ebaa 0000 	sub.w	r0, sl, r0
            while (wait_time >= 0) {
   d49fa:	2800      	cmp	r0, #0
   d49fc:	daf5      	bge.n	d49ea <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x6a>
    const size_t full_length = (sizeof(BlynkHeader)) +
   d49fe:	f1b9 0f00 	cmp.w	r9, #0
   d4a02:	d05a      	beq.n	d4aba <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13a>
   d4a04:	1d6b      	adds	r3, r5, #5
                               (data  ? length  : 0) +
   d4a06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   d4a08:	2a00      	cmp	r2, #0
   d4a0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d4a0c:	bf08      	it	eq
   d4a0e:	2200      	moveq	r2, #0
    const size_t full_length = (sizeof(BlynkHeader)) +
   d4a10:	eb03 0a02 	add.w	sl, r3, r2
    uint8_t buff[full_length];
   d4a14:	f10a 0307 	add.w	r3, sl, #7
   d4a18:	f023 0307 	bic.w	r3, r3, #7
   d4a1c:	ebad 0d03 	sub.w	sp, sp, r3
    hdr->length = htons(length+length2);
   d4a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    uint8_t buff[full_length];
   d4a22:	f8c7 d004 	str.w	sp, [r7, #4]
    hdr->length = htons(length+length2);
   d4a26:	18ea      	adds	r2, r5, r3
   d4a28:	f3c2 2307 	ubfx	r3, r2, #8, #8
    hdr->msg_id = htons(id);
   d4a2c:	ba76      	rev16	r6, r6
    hdr->length = htons(length+length2);
   d4a2e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hdr->type = cmd;
   d4a32:	f88d 8000 	strb.w	r8, [sp]
    hdr->msg_id = htons(id);
   d4a36:	f8ad 6001 	strh.w	r6, [sp, #1]
    hdr->length = htons(length+length2);
   d4a3a:	f8ad 3003 	strh.w	r3, [sp, #3]
    if (data && length) {
   d4a3e:	f1b9 0f00 	cmp.w	r9, #0
   d4a42:	d03c      	beq.n	d4abe <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
   d4a44:	2d00      	cmp	r5, #0
   d4a46:	d03a      	beq.n	d4abe <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
        memcpy(buff + pos, data, length);
   d4a48:	462a      	mov	r2, r5
   d4a4a:	4649      	mov	r1, r9
   d4a4c:	f10d 0005 	add.w	r0, sp, #5
   d4a50:	f002 fb4e 	bl	d70f0 <memcpy>
        pos += length;
   d4a54:	1d68      	adds	r0, r5, #5
    if (data2 && length2) {
   d4a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   d4a58:	b13b      	cbz	r3, d4a6a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
   d4a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   d4a5c:	b12b      	cbz	r3, d4a6a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
        memcpy(buff + pos, data2, length2);
   d4a5e:	461a      	mov	r2, r3
   d4a60:	687b      	ldr	r3, [r7, #4]
   d4a62:	6b79      	ldr	r1, [r7, #52]	; 0x34
   d4a64:	4418      	add	r0, r3
   d4a66:	f002 fb43 	bl	d70f0 <memcpy>
    size_t pos = sizeof(BlynkHeader);
   d4a6a:	2500      	movs	r5, #0
    while (wlen < full_length) {
   d4a6c:	4555      	cmp	r5, sl
   d4a6e:	d22a      	bcs.n	d4ac6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x146>
        const size_t chunk = BlynkMin(size_t(BLYNK_SEND_CHUNK), full_length - wlen);
   d4a70:	ebaa 0205 	sub.w	r2, sl, r5
        return client.write((const uint8_t*)buf, len);
   d4a74:	687b      	ldr	r3, [r7, #4]
   d4a76:	6820      	ldr	r0, [r4, #0]
   d4a78:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   d4a7c:	bf28      	it	cs
   d4a7e:	f44f 6280 	movcs.w	r2, #1024	; 0x400
   d4a82:	1959      	adds	r1, r3, r5
   d4a84:	f001 f895 	bl	d5bb2 <_ZN9TCPClient5writeEPKhj>
   d4a88:	4606      	mov	r6, r0
        BlynkDelay(BLYNK_SEND_THROTTLE);
   d4a8a:	2000      	movs	r0, #0
   d4a8c:	f000 f983 	bl	d4d96 <_Z10BlynkDelaym>
        if (w == 0) {
   d4a90:	b9be      	cbnz	r6, d4ac2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x142>
    void disconnect() { client.stop(); }
   d4a92:	6820      	ldr	r0, [r4, #0]
   d4a94:	f001 fa84 	bl	d5fa0 <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   d4a98:	7766      	strb	r6, [r4, #29]
            BlynkOnDisconnected();
   d4a9a:	f000 f982 	bl	d4da2 <BlynkNoOpCbk>
}
   d4a9e:	370c      	adds	r7, #12
   d4aa0:	46dd      	mov	sp, fp
   d4aa2:	46bd      	mov	sp, r7
   d4aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        msgIdOut = 1;
   d4aa8:	2301      	movs	r3, #1
   d4aaa:	e78b      	b.n	d49c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
        } else if (nesting == 0) {
   d4aac:	7f21      	ldrb	r1, [r4, #28]
   d4aae:	2900      	cmp	r1, #0
   d4ab0:	d1a5      	bne.n	d49fe <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
            run();
   d4ab2:	4620      	mov	r0, r4
   d4ab4:	f7ff fe32 	bl	d471c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
   d4ab8:	e7a1      	b.n	d49fe <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
    const size_t full_length = (sizeof(BlynkHeader)) +
   d4aba:	2305      	movs	r3, #5
   d4abc:	e7a3      	b.n	d4a06 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x86>
    size_t pos = sizeof(BlynkHeader);
   d4abe:	2005      	movs	r0, #5
   d4ac0:	e7c9      	b.n	d4a56 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xd6>
        wlen += w;
   d4ac2:	4435      	add	r5, r6
    while (wlen < full_length) {
   d4ac4:	e7d2      	b.n	d4a6c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xec>
    if (wlen != full_length) {
   d4ac6:	d003      	beq.n	d4ad0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x150>
        internalReconnect();
   d4ac8:	4620      	mov	r0, r4
   d4aca:	f7ff fbb5 	bl	d4238 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
        return;
   d4ace:	e7e6      	b.n	d4a9e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
    lastActivityOut = BlynkMillis();
   d4ad0:	f000 f963 	bl	d4d9a <_Z11BlynkMillisv>
   d4ad4:	6120      	str	r0, [r4, #16]
   d4ad6:	e7e2      	b.n	d4a9e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
   d4ad8:	20000045 	.word	0x20000045

000d4adc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>:
void BlynkApi<Proto>::sendInfo()
   d4adc:	b500      	push	{lr}
   d4ade:	b095      	sub	sp, #84	; 0x54
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, profile+8, profile_len, profile_dyn.getBuffer(), profile_dyn.getLength());
   d4ae0:	ab04      	add	r3, sp, #16
   d4ae2:	2200      	movs	r2, #0
   d4ae4:	9301      	str	r3, [sp, #4]
   d4ae6:	2349      	movs	r3, #73	; 0x49
   d4ae8:	9300      	str	r3, [sp, #0]
   d4aea:	9202      	str	r2, [sp, #8]
   d4aec:	4b03      	ldr	r3, [pc, #12]	; (d4afc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x20>)
   d4aee:	2111      	movs	r1, #17
   d4af0:	f7ff ff46 	bl	d4980 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
}
   d4af4:	b015      	add	sp, #84	; 0x54
   d4af6:	f85d fb04 	ldr.w	pc, [sp], #4
   d4afa:	bf00      	nop
   d4afc:	000d7332 	.word	0x000d7332

000d4b00 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE6notifyIA24_cEEvRKT_>:
    }

    // Please use Blynk.logEvent("event", "Description")
    template<typename T>
    BLYNK_DEPRECATED
    void notify(const T& msg) {
   d4b00:	b530      	push	{r4, r5, lr}
   d4b02:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(buffsize)
   d4b06:	ab08      	add	r3, sp, #32
   d4b08:	2400      	movs	r4, #0
   d4b0a:	4605      	mov	r5, r0
   d4b0c:	9305      	str	r3, [sp, #20]
   d4b0e:	a805      	add	r0, sp, #20
   d4b10:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d4b14:	e9cd 4306 	strd	r4, r3, [sp, #24]
    if (str == NULL) {
   d4b18:	f7ff fb12 	bl	d4140 <_ZN10BlynkParam3addEPKc.part.0>
        logEvent("notify", msg);
#else
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add(msg);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_NOTIFY, 0, cmd.getBuffer(), cmd.getLength()-1);
   d4b1c:	9b06      	ldr	r3, [sp, #24]
   d4b1e:	3b01      	subs	r3, #1
   d4b20:	9300      	str	r3, [sp, #0]
   d4b22:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d4b26:	9b05      	ldr	r3, [sp, #20]
   d4b28:	4622      	mov	r2, r4
   d4b2a:	210e      	movs	r1, #14
   d4b2c:	4628      	mov	r0, r5
   d4b2e:	f7ff ff27 	bl	d4980 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
#endif
    }
   d4b32:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   d4b36:	bd30      	pop	{r4, r5, pc}

000d4b38 <loop>:
void loop() {
   d4b38:	b510      	push	{r4, lr}
  Blynk.run();
   d4b3a:	2100      	movs	r1, #0
   d4b3c:	4810      	ldr	r0, [pc, #64]	; (d4b80 <loop+0x48>)
   d4b3e:	f7ff fded 	bl	d471c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
  timer.run();
   d4b42:	4810      	ldr	r0, [pc, #64]	; (d4b84 <loop+0x4c>)
   d4b44:	f000 f8dc 	bl	d4d00 <_ZN10BlynkTimer3runEv>
  if (digitalRead(D3) == HIGH && buttonEnabled){
   d4b48:	2003      	movs	r0, #3
   d4b4a:	f001 fc5b 	bl	d6404 <digitalRead>
   d4b4e:	2801      	cmp	r0, #1
   d4b50:	d115      	bne.n	d4b7e <loop+0x46>
   d4b52:	4c0d      	ldr	r4, [pc, #52]	; (d4b88 <loop+0x50>)
   d4b54:	7823      	ldrb	r3, [r4, #0]
   d4b56:	b193      	cbz	r3, d4b7e <loop+0x46>
    Blynk.notify("Got a push notification");
   d4b58:	490c      	ldr	r1, [pc, #48]	; (d4b8c <loop+0x54>)
   d4b5a:	4809      	ldr	r0, [pc, #36]	; (d4b80 <loop+0x48>)
   d4b5c:	f7ff ffd0 	bl	d4b00 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE6notifyIA24_cEEvRKT_>
    Serial.println("Push sent");
   d4b60:	f000 ff34 	bl	d59cc <_Z16_fetch_usbserialv>
   d4b64:	490a      	ldr	r1, [pc, #40]	; (d4b90 <loop+0x58>)
   d4b66:	f000 fc5e 	bl	d5426 <_ZN5Print7printlnEPKc>
    buttonEnabled = false;
   d4b6a:	2300      	movs	r3, #0
   d4b6c:	7023      	strb	r3, [r4, #0]
    timer.setTimeout(5000, enableTimerCall);
   d4b6e:	4a09      	ldr	r2, [pc, #36]	; (d4b94 <loop+0x5c>)
   d4b70:	4804      	ldr	r0, [pc, #16]	; (d4b84 <loop+0x4c>)
}
   d4b72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    timer.setTimeout(5000, enableTimerCall);
   d4b76:	f241 3188 	movw	r1, #5000	; 0x1388
   d4b7a:	f000 b89d 	b.w	d4cb8 <_ZN10BlynkTimer10setTimeoutEmPFvvE>
}
   d4b7e:	bd10      	pop	{r4, pc}
   d4b80:	2003e3a4 	.word	0x2003e3a4
   d4b84:	2003e400 	.word	0x2003e400
   d4b88:	2003e334 	.word	0x2003e334
   d4b8c:	000d7308 	.word	0x000d7308
   d4b90:	000d7320 	.word	0x000d7320
   d4b94:	000d40b5 	.word	0x000d40b5

000d4b98 <_GLOBAL__sub_I_Blynk>:
   d4b98:	b538      	push	{r3, r4, r5, lr}
        : domain(NULL), port(0)
   d4b9a:	4d11      	ldr	r5, [pc, #68]	; (d4be0 <_GLOBAL__sub_I_Blynk+0x48>)
SYSTEM_THREAD(ENABLED);
   d4b9c:	2100      	movs	r1, #0
   d4b9e:	2001      	movs	r0, #1
   d4ba0:	f000 faac 	bl	d50fc <system_thread_set_state>
   d4ba4:	4628      	mov	r0, r5
   d4ba6:	f001 fa45 	bl	d6034 <_ZN9TCPClientC1Ev>
   d4baa:	f105 001c 	add.w	r0, r5, #28
   d4bae:	f000 fe51 	bl	d5854 <_ZN9IPAddressC1Ev>
   d4bb2:	2400      	movs	r4, #0
#ifndef BlynkSimpleParticle_h
#define BlynkSimpleParticle_h

#include "BlynkParticle.h"

static BlynkTransportParticle _blynkTransport;
   d4bb4:	4628      	mov	r0, r5
   d4bb6:	4a0b      	ldr	r2, [pc, #44]	; (d4be4 <_GLOBAL__sub_I_Blynk+0x4c>)
   d4bb8:	490b      	ldr	r1, [pc, #44]	; (d4be8 <_GLOBAL__sub_I_Blynk+0x50>)
   d4bba:	636c      	str	r4, [r5, #52]	; 0x34
   d4bbc:	872c      	strh	r4, [r5, #56]	; 0x38
   d4bbe:	f001 fcb1 	bl	d6524 <__aeabi_atexit>
        , state(CONNECTING)
   d4bc2:	4b0a      	ldr	r3, [pc, #40]	; (d4bec <_GLOBAL__sub_I_Blynk+0x54>)
BlynkTimer timer;
   d4bc4:	480a      	ldr	r0, [pc, #40]	; (d4bf0 <_GLOBAL__sub_I_Blynk+0x58>)
   d4bc6:	619c      	str	r4, [r3, #24]
   d4bc8:	e9c3 5400 	strd	r5, r4, [r3]
   d4bcc:	e9c3 4402 	strd	r4, r4, [r3, #8]
   d4bd0:	e9c3 4404 	strd	r4, r4, [r3, #16]
   d4bd4:	839c      	strh	r4, [r3, #28]
   d4bd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
BlynkTimer timer;
   d4bda:	f000 b80b 	b.w	d4bf4 <_ZN10BlynkTimerC1Ev>
   d4bde:	bf00      	nop
   d4be0:	2003e3c4 	.word	0x2003e3c4
   d4be4:	2003e3a0 	.word	0x2003e3a0
   d4be8:	000d4171 	.word	0x000d4171
   d4bec:	2003e3a4 	.word	0x2003e3a4
   d4bf0:	2003e400 	.word	0x2003e400

000d4bf4 <_ZN10BlynkTimerC1Ev>:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return BlynkMillis(); }


SimpleTimer::SimpleTimer()
    : numTimers (-1)
   d4bf4:	f04f 33ff 	mov.w	r3, #4294967295
   d4bf8:	f8c0 3240 	str.w	r3, [r0, #576]	; 0x240
{
}
   d4bfc:	4770      	bx	lr

000d4bfe <_ZN10BlynkTimer4initEv>:

void SimpleTimer::init() {
   d4bfe:	b570      	push	{r4, r5, r6, lr}
   d4c00:	4604      	mov	r4, r0
static inline unsigned long elapsed() { return BlynkMillis(); }
   d4c02:	f000 f8ca 	bl	d4d9a <_Z11BlynkMillisv>
   d4c06:	2500      	movs	r5, #0
   d4c08:	4606      	mov	r6, r0
    unsigned long current_millis = elapsed();

    for (int i = 0; i < MAX_TIMERS; i++) {
        memset(&timer[i], 0, sizeof (timer_t));
   d4c0a:	1960      	adds	r0, r4, r5
   d4c0c:	2224      	movs	r2, #36	; 0x24
   d4c0e:	2100      	movs	r1, #0
   d4c10:	f002 fa7c 	bl	d710c <memset>
        timer[i].prev_millis = current_millis;
   d4c14:	5166      	str	r6, [r4, r5]
    for (int i = 0; i < MAX_TIMERS; i++) {
   d4c16:	3524      	adds	r5, #36	; 0x24
   d4c18:	f5b5 7f10 	cmp.w	r5, #576	; 0x240
   d4c1c:	d1f5      	bne.n	d4c0a <_ZN10BlynkTimer4initEv+0xc>
    }

    numTimers = 0;
   d4c1e:	2300      	movs	r3, #0
   d4c20:	f8c4 3240 	str.w	r3, [r4, #576]	; 0x240
}
   d4c24:	bd70      	pop	{r4, r5, r6, pc}

000d4c26 <_ZN10BlynkTimer17findFirstFreeSlotEv>:

// find the first available slot
// return -1 if none found
int SimpleTimer::findFirstFreeSlot() {
    // all slots are used
    if (numTimers >= MAX_TIMERS) {
   d4c26:	f8d0 2240 	ldr.w	r2, [r0, #576]	; 0x240
   d4c2a:	2a0f      	cmp	r2, #15
int SimpleTimer::findFirstFreeSlot() {
   d4c2c:	4603      	mov	r3, r0
    if (numTimers >= MAX_TIMERS) {
   d4c2e:	dc09      	bgt.n	d4c44 <_ZN10BlynkTimer17findFirstFreeSlotEv+0x1e>
        return -1;
    }

    // return the first slot with no callback (i.e. free)
    for (int i = 0; i < MAX_TIMERS; i++) {
   d4c30:	2000      	movs	r0, #0
        if (timer[i].callback == NULL) {
   d4c32:	3304      	adds	r3, #4
   d4c34:	2224      	movs	r2, #36	; 0x24
   d4c36:	fb02 f100 	mul.w	r1, r2, r0
   d4c3a:	5859      	ldr	r1, [r3, r1]
   d4c3c:	b121      	cbz	r1, d4c48 <_ZN10BlynkTimer17findFirstFreeSlotEv+0x22>
    for (int i = 0; i < MAX_TIMERS; i++) {
   d4c3e:	3001      	adds	r0, #1
   d4c40:	2810      	cmp	r0, #16
   d4c42:	d1f8      	bne.n	d4c36 <_ZN10BlynkTimer17findFirstFreeSlotEv+0x10>
        return -1;
   d4c44:	f04f 30ff 	mov.w	r0, #4294967295
        }
    }

    // no free slots found
    return -1;
}
   d4c48:	4770      	bx	lr

000d4c4a <_ZN10BlynkTimer10setupTimerEmPvS0_bj>:


int SimpleTimer::setupTimer(unsigned long d, void* f, void* p, bool h, unsigned n) {
   d4c4a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4c4e:	4698      	mov	r8, r3
    int freeTimer;

    if (numTimers < 0) {
   d4c50:	f8d0 3240 	ldr.w	r3, [r0, #576]	; 0x240
   d4c54:	2b00      	cmp	r3, #0
int SimpleTimer::setupTimer(unsigned long d, void* f, void* p, bool h, unsigned n) {
   d4c56:	4604      	mov	r4, r0
   d4c58:	4689      	mov	r9, r1
   d4c5a:	4617      	mov	r7, r2
    if (numTimers < 0) {
   d4c5c:	da01      	bge.n	d4c62 <_ZN10BlynkTimer10setupTimerEmPvS0_bj+0x18>
        init();
   d4c5e:	f7ff ffce 	bl	d4bfe <_ZN10BlynkTimer4initEv>
    }

    freeTimer = findFirstFreeSlot();
   d4c62:	4620      	mov	r0, r4
   d4c64:	f7ff ffdf 	bl	d4c26 <_ZN10BlynkTimer17findFirstFreeSlotEv>
    if (freeTimer < 0) {
   d4c68:	1e05      	subs	r5, r0, #0
   d4c6a:	db19      	blt.n	d4ca0 <_ZN10BlynkTimer10setupTimerEmPvS0_bj+0x56>
        return -1;
    }

    if (f == NULL) {
   d4c6c:	b1c7      	cbz	r7, d4ca0 <_ZN10BlynkTimer10setupTimerEmPvS0_bj+0x56>
        return -1;
    }

    timer[freeTimer].delay = d;
   d4c6e:	2624      	movs	r6, #36	; 0x24
   d4c70:	436e      	muls	r6, r5
   d4c72:	19a0      	adds	r0, r4, r6
    timer[freeTimer].callback = f;
    timer[freeTimer].param = p;
    timer[freeTimer].hasParam = h;
   d4c74:	f89d 3020 	ldrb.w	r3, [sp, #32]
   d4c78:	7303      	strb	r3, [r0, #12]
    timer[freeTimer].maxNumRuns = n;
   d4c7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d4c7c:	6143      	str	r3, [r0, #20]
    timer[freeTimer].enabled = true;
   d4c7e:	2301      	movs	r3, #1
   d4c80:	7703      	strb	r3, [r0, #28]
    timer[freeTimer].param = p;
   d4c82:	e9c0 7801 	strd	r7, r8, [r0, #4]
    timer[freeTimer].delay = d;
   d4c86:	f8c0 9010 	str.w	r9, [r0, #16]
static inline unsigned long elapsed() { return BlynkMillis(); }
   d4c8a:	f000 f886 	bl	d4d9a <_Z11BlynkMillisv>
    timer[freeTimer].prev_millis = elapsed();
   d4c8e:	51a0      	str	r0, [r4, r6]

    numTimers++;
   d4c90:	f8d4 3240 	ldr.w	r3, [r4, #576]	; 0x240
   d4c94:	3301      	adds	r3, #1
   d4c96:	f8c4 3240 	str.w	r3, [r4, #576]	; 0x240

    return freeTimer;
}
   d4c9a:	4628      	mov	r0, r5
   d4c9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return -1;
   d4ca0:	f04f 35ff 	mov.w	r5, #4294967295
   d4ca4:	e7f9      	b.n	d4c9a <_ZN10BlynkTimer10setupTimerEmPvS0_bj+0x50>

000d4ca6 <_ZN10BlynkTimer11setIntervalEmPFvvE>:

int SimpleTimer::setTimer(unsigned long d, timer_callback_p f, void* p, unsigned n) {
  return setupTimer(d, (void *)f, p, true, n);
}

int SimpleTimer::setInterval(unsigned long d, timer_callback f) {
   d4ca6:	b507      	push	{r0, r1, r2, lr}
    return setupTimer(d, (void *)f, NULL, false, RUN_FOREVER);
   d4ca8:	2300      	movs	r3, #0
   d4caa:	e9cd 3300 	strd	r3, r3, [sp]
   d4cae:	f7ff ffcc 	bl	d4c4a <_ZN10BlynkTimer10setupTimerEmPvS0_bj>
}
   d4cb2:	b003      	add	sp, #12
   d4cb4:	f85d fb04 	ldr.w	pc, [sp], #4

000d4cb8 <_ZN10BlynkTimer10setTimeoutEmPFvvE>:

int SimpleTimer::setInterval(unsigned long d, timer_callback_p f, void* p) {
  return setupTimer(d, (void *)f, p, true, RUN_FOREVER);
}

int SimpleTimer::setTimeout(unsigned long d, timer_callback f) {
   d4cb8:	b507      	push	{r0, r1, r2, lr}
    return setupTimer(d, (void *)f, NULL, false, RUN_ONCE);
   d4cba:	2300      	movs	r3, #0
   d4cbc:	f04f 0c01 	mov.w	ip, #1
   d4cc0:	e9cd 3c00 	strd	r3, ip, [sp]
   d4cc4:	f7ff ffc1 	bl	d4c4a <_ZN10BlynkTimer10setupTimerEmPvS0_bj>
}
   d4cc8:	b003      	add	sp, #12
   d4cca:	f85d fb04 	ldr.w	pc, [sp], #4

000d4cce <_ZN10BlynkTimer11deleteTimerEj>:
    // false return for non-used numTimer, no callback
    return false;
}

void SimpleTimer::deleteTimer(unsigned timerId) {
    if (timerId >= MAX_TIMERS) {
   d4cce:	290f      	cmp	r1, #15
void SimpleTimer::deleteTimer(unsigned timerId) {
   d4cd0:	b538      	push	{r3, r4, r5, lr}
   d4cd2:	4604      	mov	r4, r0
    if (timerId >= MAX_TIMERS) {
   d4cd4:	d813      	bhi.n	d4cfe <_ZN10BlynkTimer11deleteTimerEj+0x30>
        return;
    }

    // nothing to delete if no timers are in use
    if (numTimers == 0) {
   d4cd6:	f8d0 3240 	ldr.w	r3, [r0, #576]	; 0x240
   d4cda:	b183      	cbz	r3, d4cfe <_ZN10BlynkTimer11deleteTimerEj+0x30>
        return;
    }

    // don't decrease the number of timers if the
    // specified slot is already empty
    if (timer[timerId].callback != NULL) {
   d4cdc:	2224      	movs	r2, #36	; 0x24
   d4cde:	fb02 f501 	mul.w	r5, r2, r1
   d4ce2:	4428      	add	r0, r5
   d4ce4:	6843      	ldr	r3, [r0, #4]
   d4ce6:	b153      	cbz	r3, d4cfe <_ZN10BlynkTimer11deleteTimerEj+0x30>
        memset(&timer[timerId], 0, sizeof (timer_t));
   d4ce8:	2100      	movs	r1, #0
   d4cea:	f002 fa0f 	bl	d710c <memset>
static inline unsigned long elapsed() { return BlynkMillis(); }
   d4cee:	f000 f854 	bl	d4d9a <_Z11BlynkMillisv>
        timer[timerId].prev_millis = elapsed();
   d4cf2:	5160      	str	r0, [r4, r5]

        // update number of timers
        numTimers--;
   d4cf4:	f8d4 3240 	ldr.w	r3, [r4, #576]	; 0x240
   d4cf8:	3b01      	subs	r3, #1
   d4cfa:	f8c4 3240 	str.w	r3, [r4, #576]	; 0x240
    }
}
   d4cfe:	bd38      	pop	{r3, r4, r5, pc}

000d4d00 <_ZN10BlynkTimer3runEv>:
void SimpleTimer::run() {
   d4d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4d04:	4605      	mov	r5, r0
   d4d06:	462c      	mov	r4, r5
static inline unsigned long elapsed() { return BlynkMillis(); }
   d4d08:	f000 f847 	bl	d4d9a <_Z11BlynkMillisv>
    for (i = 0; i < MAX_TIMERS; i++) {
   d4d0c:	f505 7610 	add.w	r6, r5, #576	; 0x240
static inline unsigned long elapsed() { return BlynkMillis(); }
   d4d10:	462b      	mov	r3, r5
        timer[i].toBeCalled = DEFCALL_DONTRUN;
   d4d12:	2700      	movs	r7, #0
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
   d4d14:	2101      	movs	r1, #1
                            timer[i].toBeCalled = DEFCALL_RUNANDDEL;
   d4d16:	f04f 0c02 	mov.w	ip, #2
        if (timer[i].callback != NULL) {
   d4d1a:	685a      	ldr	r2, [r3, #4]
        timer[i].toBeCalled = DEFCALL_DONTRUN;
   d4d1c:	621f      	str	r7, [r3, #32]
        if (timer[i].callback != NULL) {
   d4d1e:	b1a2      	cbz	r2, d4d4a <_ZN10BlynkTimer3runEv+0x4a>
            if ((current_millis - timer[i].prev_millis) >= timer[i].delay) {
   d4d20:	f8d3 8000 	ldr.w	r8, [r3]
   d4d24:	f8d3 e010 	ldr.w	lr, [r3, #16]
   d4d28:	eba0 0208 	sub.w	r2, r0, r8
   d4d2c:	4572      	cmp	r2, lr
   d4d2e:	d30c      	bcc.n	d4d4a <_ZN10BlynkTimer3runEv+0x4a>
                unsigned long skipTimes = (current_millis - timer[i].prev_millis) / timer[i].delay;
   d4d30:	fbb2 f2fe 	udiv	r2, r2, lr
                timer[i].prev_millis += timer[i].delay * skipTimes;
   d4d34:	fb0e 8202 	mla	r2, lr, r2, r8
   d4d38:	601a      	str	r2, [r3, #0]
                if (timer[i].enabled) {
   d4d3a:	7f1a      	ldrb	r2, [r3, #28]
   d4d3c:	b12a      	cbz	r2, d4d4a <_ZN10BlynkTimer3runEv+0x4a>
                    if (timer[i].maxNumRuns == RUN_FOREVER) {
   d4d3e:	f8d3 e014 	ldr.w	lr, [r3, #20]
   d4d42:	f1be 0f00 	cmp.w	lr, #0
   d4d46:	d119      	bne.n	d4d7c <_ZN10BlynkTimer3runEv+0x7c>
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
   d4d48:	6219      	str	r1, [r3, #32]
    for (i = 0; i < MAX_TIMERS; i++) {
   d4d4a:	3324      	adds	r3, #36	; 0x24
   d4d4c:	42b3      	cmp	r3, r6
   d4d4e:	d1e4      	bne.n	d4d1a <_ZN10BlynkTimer3runEv+0x1a>
    for (i = 0; i < MAX_TIMERS; i++) {
   d4d50:	2600      	movs	r6, #0
        if (timer[i].toBeCalled == DEFCALL_DONTRUN)
   d4d52:	6a23      	ldr	r3, [r4, #32]
   d4d54:	b15b      	cbz	r3, d4d6e <_ZN10BlynkTimer3runEv+0x6e>
        if (timer[i].hasParam)
   d4d56:	7b22      	ldrb	r2, [r4, #12]
   d4d58:	6863      	ldr	r3, [r4, #4]
   d4d5a:	b1d2      	cbz	r2, d4d92 <_ZN10BlynkTimer3runEv+0x92>
            (*(timer_callback_p)timer[i].callback)(timer[i].param);
   d4d5c:	68a0      	ldr	r0, [r4, #8]
   d4d5e:	4798      	blx	r3
        if (timer[i].toBeCalled == DEFCALL_RUNANDDEL)
   d4d60:	6a23      	ldr	r3, [r4, #32]
   d4d62:	2b02      	cmp	r3, #2
   d4d64:	d103      	bne.n	d4d6e <_ZN10BlynkTimer3runEv+0x6e>
            deleteTimer(i);
   d4d66:	4631      	mov	r1, r6
   d4d68:	4628      	mov	r0, r5
   d4d6a:	f7ff ffb0 	bl	d4cce <_ZN10BlynkTimer11deleteTimerEj>
    for (i = 0; i < MAX_TIMERS; i++) {
   d4d6e:	3601      	adds	r6, #1
   d4d70:	2e10      	cmp	r6, #16
   d4d72:	f104 0424 	add.w	r4, r4, #36	; 0x24
   d4d76:	d1ec      	bne.n	d4d52 <_ZN10BlynkTimer3runEv+0x52>
}
   d4d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    else if (timer[i].numRuns < timer[i].maxNumRuns) {
   d4d7c:	699a      	ldr	r2, [r3, #24]
   d4d7e:	4596      	cmp	lr, r2
   d4d80:	d9e3      	bls.n	d4d4a <_ZN10BlynkTimer3runEv+0x4a>
                        timer[i].numRuns++;
   d4d82:	3201      	adds	r2, #1
                        if (timer[i].numRuns >= timer[i].maxNumRuns) {
   d4d84:	4596      	cmp	lr, r2
                        timer[i].numRuns++;
   d4d86:	619a      	str	r2, [r3, #24]
                            timer[i].toBeCalled = DEFCALL_RUNANDDEL;
   d4d88:	bf8c      	ite	hi
   d4d8a:	460a      	movhi	r2, r1
   d4d8c:	4662      	movls	r2, ip
   d4d8e:	621a      	str	r2, [r3, #32]
   d4d90:	e7db      	b.n	d4d4a <_ZN10BlynkTimer3runEv+0x4a>
            (*(timer_callback)timer[i].callback)();
   d4d92:	4798      	blx	r3
   d4d94:	e7e4      	b.n	d4d60 <_ZN10BlynkTimer3runEv+0x60>

000d4d96 <_Z10BlynkDelaym>:
#endif

#ifdef _BLYNK_USE_DEFAULT_DELAY
    void BlynkDelay(millis_time_t ms)
    {
        return delay(ms);
   d4d96:	f000 bc79 	b.w	d568c <delay>

000d4d9a <_Z11BlynkMillisv>:

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4d9a:	f000 b877 	b.w	d4e8c <HAL_Timer_Get_Milli_Seconds>

000d4d9e <BlynkWidgetRead>:
{}

void BlynkWidgetRead(BlynkReq BLYNK_UNUSED &request)
{
    BLYNK_LOG2(BLYNK_F("No handler for reading from pin "), request.pin);
}
   d4d9e:	4770      	bx	lr

000d4da0 <BlynkWidgetWrite>:

void BlynkWidgetWrite(BlynkReq BLYNK_UNUSED &request, const BlynkParam BLYNK_UNUSED &param)
{
    BLYNK_LOG2(BLYNK_F("No handler for writing to pin "), request.pin);
}
   d4da0:	4770      	bx	lr

000d4da2 <BlynkNoOpCbk>:
{}
   d4da2:	4770      	bx	lr

000d4da4 <GetReadHandler>:
#endif
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
   d4da4:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
   d4da6:	bf5a      	itte	pl
   d4da8:	4b02      	ldrpl	r3, [pc, #8]	; (d4db4 <GetReadHandler+0x10>)
   d4daa:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   d4dae:	2000      	movmi	r0, #0
#endif
}
   d4db0:	4770      	bx	lr
   d4db2:	bf00      	nop
   d4db4:	000d7380 	.word	0x000d7380

000d4db8 <GetWriteHandler>:

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
   d4db8:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
   d4dba:	bf5a      	itte	pl
   d4dbc:	4b02      	ldrpl	r3, [pc, #8]	; (d4dc8 <GetWriteHandler+0x10>)
   d4dbe:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   d4dc2:	2000      	movmi	r0, #0
#endif
}
   d4dc4:	4770      	bx	lr
   d4dc6:	bf00      	nop
   d4dc8:	000d7580 	.word	0x000d7580

000d4dcc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4dcc:	b508      	push	{r3, lr}
   d4dce:	4b02      	ldr	r3, [pc, #8]	; (d4dd8 <netdb_freeaddrinfo+0xc>)
   d4dd0:	681b      	ldr	r3, [r3, #0]
   d4dd2:	689b      	ldr	r3, [r3, #8]
   d4dd4:	9301      	str	r3, [sp, #4]
   d4dd6:	bd08      	pop	{r3, pc}
   d4dd8:	00030268 	.word	0x00030268

000d4ddc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4ddc:	b508      	push	{r3, lr}
   d4dde:	4b02      	ldr	r3, [pc, #8]	; (d4de8 <netdb_getaddrinfo+0xc>)
   d4de0:	681b      	ldr	r3, [r3, #0]
   d4de2:	68db      	ldr	r3, [r3, #12]
   d4de4:	9301      	str	r3, [sp, #4]
   d4de6:	bd08      	pop	{r3, pc}
   d4de8:	00030268 	.word	0x00030268

000d4dec <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d4dec:	b508      	push	{r3, lr}
   d4dee:	4b02      	ldr	r3, [pc, #8]	; (d4df8 <HAL_Validate_Pin_Function+0xc>)
   d4df0:	681b      	ldr	r3, [r3, #0]
   d4df2:	685b      	ldr	r3, [r3, #4]
   d4df4:	9301      	str	r3, [sp, #4]
   d4df6:	bd08      	pop	{r3, pc}
   d4df8:	0003022c 	.word	0x0003022c

000d4dfc <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4dfc:	b508      	push	{r3, lr}
   d4dfe:	4b02      	ldr	r3, [pc, #8]	; (d4e08 <HAL_Pin_Mode+0xc>)
   d4e00:	681b      	ldr	r3, [r3, #0]
   d4e02:	689b      	ldr	r3, [r3, #8]
   d4e04:	9301      	str	r3, [sp, #4]
   d4e06:	bd08      	pop	{r3, pc}
   d4e08:	0003022c 	.word	0x0003022c

000d4e0c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4e0c:	b508      	push	{r3, lr}
   d4e0e:	4b02      	ldr	r3, [pc, #8]	; (d4e18 <HAL_Get_Pin_Mode+0xc>)
   d4e10:	681b      	ldr	r3, [r3, #0]
   d4e12:	68db      	ldr	r3, [r3, #12]
   d4e14:	9301      	str	r3, [sp, #4]
   d4e16:	bd08      	pop	{r3, pc}
   d4e18:	0003022c 	.word	0x0003022c

000d4e1c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4e1c:	b508      	push	{r3, lr}
   d4e1e:	4b02      	ldr	r3, [pc, #8]	; (d4e28 <HAL_GPIO_Write+0xc>)
   d4e20:	681b      	ldr	r3, [r3, #0]
   d4e22:	691b      	ldr	r3, [r3, #16]
   d4e24:	9301      	str	r3, [sp, #4]
   d4e26:	bd08      	pop	{r3, pc}
   d4e28:	0003022c 	.word	0x0003022c

000d4e2c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d4e2c:	b508      	push	{r3, lr}
   d4e2e:	4b02      	ldr	r3, [pc, #8]	; (d4e38 <HAL_GPIO_Read+0xc>)
   d4e30:	681b      	ldr	r3, [r3, #0]
   d4e32:	695b      	ldr	r3, [r3, #20]
   d4e34:	9301      	str	r3, [sp, #4]
   d4e36:	bd08      	pop	{r3, pc}
   d4e38:	0003022c 	.word	0x0003022c

000d4e3c <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   d4e3c:	b508      	push	{r3, lr}
   d4e3e:	4b02      	ldr	r3, [pc, #8]	; (d4e48 <HAL_DAC_Write+0xc>)
   d4e40:	681b      	ldr	r3, [r3, #0]
   d4e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4e44:	9301      	str	r3, [sp, #4]
   d4e46:	bd08      	pop	{r3, pc}
   d4e48:	0003022c 	.word	0x0003022c

000d4e4c <hal_adc_read>:
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d4e4c:	b508      	push	{r3, lr}
   d4e4e:	4b02      	ldr	r3, [pc, #8]	; (d4e58 <hal_adc_read+0xc>)
   d4e50:	681b      	ldr	r3, [r3, #0]
   d4e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4e54:	9301      	str	r3, [sp, #4]
   d4e56:	bd08      	pop	{r3, pc}
   d4e58:	0003022c 	.word	0x0003022c

000d4e5c <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
   d4e5c:	b508      	push	{r3, lr}
   d4e5e:	4b02      	ldr	r3, [pc, #8]	; (d4e68 <hal_pwm_write_ext+0xc>)
   d4e60:	681b      	ldr	r3, [r3, #0]
   d4e62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d4e64:	9301      	str	r3, [sp, #4]
   d4e66:	bd08      	pop	{r3, pc}
   d4e68:	0003022c 	.word	0x0003022c

000d4e6c <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d4e6c:	b508      	push	{r3, lr}
   d4e6e:	4b02      	ldr	r3, [pc, #8]	; (d4e78 <if_index_to_name+0xc>)
   d4e70:	681b      	ldr	r3, [r3, #0]
   d4e72:	695b      	ldr	r3, [r3, #20]
   d4e74:	9301      	str	r3, [sp, #4]
   d4e76:	bd08      	pop	{r3, pc}
   d4e78:	0003026c 	.word	0x0003026c

000d4e7c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4e7c:	b508      	push	{r3, lr}
   d4e7e:	4b02      	ldr	r3, [pc, #8]	; (d4e88 <HAL_RNG_GetRandomNumber+0xc>)
   d4e80:	681b      	ldr	r3, [r3, #0]
   d4e82:	685b      	ldr	r3, [r3, #4]
   d4e84:	9301      	str	r3, [sp, #4]
   d4e86:	bd08      	pop	{r3, pc}
   d4e88:	00030218 	.word	0x00030218

000d4e8c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4e8c:	b508      	push	{r3, lr}
   d4e8e:	4b02      	ldr	r3, [pc, #8]	; (d4e98 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4e90:	681b      	ldr	r3, [r3, #0]
   d4e92:	695b      	ldr	r3, [r3, #20]
   d4e94:	9301      	str	r3, [sp, #4]
   d4e96:	bd08      	pop	{r3, pc}
   d4e98:	00030218 	.word	0x00030218

000d4e9c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4e9c:	b508      	push	{r3, lr}
   d4e9e:	4b02      	ldr	r3, [pc, #8]	; (d4ea8 <os_mutex_recursive_create+0xc>)
   d4ea0:	681b      	ldr	r3, [r3, #0]
   d4ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4ea4:	9301      	str	r3, [sp, #4]
   d4ea6:	bd08      	pop	{r3, pc}
   d4ea8:	00030248 	.word	0x00030248

000d4eac <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4eac:	b508      	push	{r3, lr}
   d4eae:	4b02      	ldr	r3, [pc, #8]	; (d4eb8 <os_mutex_recursive_destroy+0xc>)
   d4eb0:	681b      	ldr	r3, [r3, #0]
   d4eb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4eb4:	9301      	str	r3, [sp, #4]
   d4eb6:	bd08      	pop	{r3, pc}
   d4eb8:	00030248 	.word	0x00030248

000d4ebc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4ebc:	b508      	push	{r3, lr}
   d4ebe:	4b02      	ldr	r3, [pc, #8]	; (d4ec8 <inet_inet_ntop+0xc>)
   d4ec0:	681b      	ldr	r3, [r3, #0]
   d4ec2:	695b      	ldr	r3, [r3, #20]
   d4ec4:	9301      	str	r3, [sp, #4]
   d4ec6:	bd08      	pop	{r3, pc}
   d4ec8:	00030264 	.word	0x00030264

000d4ecc <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d4ecc:	b508      	push	{r3, lr}
   d4ece:	4b02      	ldr	r3, [pc, #8]	; (d4ed8 <inet_htonl+0xc>)
   d4ed0:	681b      	ldr	r3, [r3, #0]
   d4ed2:	6a1b      	ldr	r3, [r3, #32]
   d4ed4:	9301      	str	r3, [sp, #4]
   d4ed6:	bd08      	pop	{r3, pc}
   d4ed8:	00030264 	.word	0x00030264

000d4edc <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d4edc:	b508      	push	{r3, lr}
   d4ede:	4b02      	ldr	r3, [pc, #8]	; (d4ee8 <inet_htons+0xc>)
   d4ee0:	681b      	ldr	r3, [r3, #0]
   d4ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4ee4:	9301      	str	r3, [sp, #4]
   d4ee6:	bd08      	pop	{r3, pc}
   d4ee8:	00030264 	.word	0x00030264

000d4eec <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4eec:	b508      	push	{r3, lr}
   d4eee:	4b02      	ldr	r3, [pc, #8]	; (d4ef8 <hal_usart_init+0xc>)
   d4ef0:	681b      	ldr	r3, [r3, #0]
   d4ef2:	681b      	ldr	r3, [r3, #0]
   d4ef4:	9301      	str	r3, [sp, #4]
   d4ef6:	bd08      	pop	{r3, pc}
   d4ef8:	0003023c 	.word	0x0003023c

000d4efc <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4efc:	b508      	push	{r3, lr}
   d4efe:	4b02      	ldr	r3, [pc, #8]	; (d4f08 <hal_usart_write+0xc>)
   d4f00:	681b      	ldr	r3, [r3, #0]
   d4f02:	68db      	ldr	r3, [r3, #12]
   d4f04:	9301      	str	r3, [sp, #4]
   d4f06:	bd08      	pop	{r3, pc}
   d4f08:	0003023c 	.word	0x0003023c

000d4f0c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4f0c:	b508      	push	{r3, lr}
   d4f0e:	4b02      	ldr	r3, [pc, #8]	; (d4f18 <hal_usart_available+0xc>)
   d4f10:	681b      	ldr	r3, [r3, #0]
   d4f12:	691b      	ldr	r3, [r3, #16]
   d4f14:	9301      	str	r3, [sp, #4]
   d4f16:	bd08      	pop	{r3, pc}
   d4f18:	0003023c 	.word	0x0003023c

000d4f1c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4f1c:	b508      	push	{r3, lr}
   d4f1e:	4b02      	ldr	r3, [pc, #8]	; (d4f28 <hal_usart_read+0xc>)
   d4f20:	681b      	ldr	r3, [r3, #0]
   d4f22:	695b      	ldr	r3, [r3, #20]
   d4f24:	9301      	str	r3, [sp, #4]
   d4f26:	bd08      	pop	{r3, pc}
   d4f28:	0003023c 	.word	0x0003023c

000d4f2c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4f2c:	b508      	push	{r3, lr}
   d4f2e:	4b02      	ldr	r3, [pc, #8]	; (d4f38 <hal_usart_peek+0xc>)
   d4f30:	681b      	ldr	r3, [r3, #0]
   d4f32:	699b      	ldr	r3, [r3, #24]
   d4f34:	9301      	str	r3, [sp, #4]
   d4f36:	bd08      	pop	{r3, pc}
   d4f38:	0003023c 	.word	0x0003023c

000d4f3c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4f3c:	b508      	push	{r3, lr}
   d4f3e:	4b02      	ldr	r3, [pc, #8]	; (d4f48 <hal_usart_flush+0xc>)
   d4f40:	681b      	ldr	r3, [r3, #0]
   d4f42:	69db      	ldr	r3, [r3, #28]
   d4f44:	9301      	str	r3, [sp, #4]
   d4f46:	bd08      	pop	{r3, pc}
   d4f48:	0003023c 	.word	0x0003023c

000d4f4c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d4f4c:	b508      	push	{r3, lr}
   d4f4e:	4b02      	ldr	r3, [pc, #8]	; (d4f58 <hal_usart_is_enabled+0xc>)
   d4f50:	681b      	ldr	r3, [r3, #0]
   d4f52:	6a1b      	ldr	r3, [r3, #32]
   d4f54:	9301      	str	r3, [sp, #4]
   d4f56:	bd08      	pop	{r3, pc}
   d4f58:	0003023c 	.word	0x0003023c

000d4f5c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4f5c:	b508      	push	{r3, lr}
   d4f5e:	4b02      	ldr	r3, [pc, #8]	; (d4f68 <hal_usart_available_data_for_write+0xc>)
   d4f60:	681b      	ldr	r3, [r3, #0]
   d4f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4f64:	9301      	str	r3, [sp, #4]
   d4f66:	bd08      	pop	{r3, pc}
   d4f68:	0003023c 	.word	0x0003023c

000d4f6c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d4f6c:	b508      	push	{r3, lr}
   d4f6e:	4b02      	ldr	r3, [pc, #8]	; (d4f78 <hal_i2c_write+0xc>)
   d4f70:	681b      	ldr	r3, [r3, #0]
   d4f72:	6a1b      	ldr	r3, [r3, #32]
   d4f74:	9301      	str	r3, [sp, #4]
   d4f76:	bd08      	pop	{r3, pc}
   d4f78:	00030228 	.word	0x00030228

000d4f7c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d4f7c:	b508      	push	{r3, lr}
   d4f7e:	4b02      	ldr	r3, [pc, #8]	; (d4f88 <hal_i2c_available+0xc>)
   d4f80:	681b      	ldr	r3, [r3, #0]
   d4f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4f84:	9301      	str	r3, [sp, #4]
   d4f86:	bd08      	pop	{r3, pc}
   d4f88:	00030228 	.word	0x00030228

000d4f8c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d4f8c:	b508      	push	{r3, lr}
   d4f8e:	4b02      	ldr	r3, [pc, #8]	; (d4f98 <hal_i2c_read+0xc>)
   d4f90:	681b      	ldr	r3, [r3, #0]
   d4f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4f94:	9301      	str	r3, [sp, #4]
   d4f96:	bd08      	pop	{r3, pc}
   d4f98:	00030228 	.word	0x00030228

000d4f9c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d4f9c:	b508      	push	{r3, lr}
   d4f9e:	4b02      	ldr	r3, [pc, #8]	; (d4fa8 <hal_i2c_peek+0xc>)
   d4fa0:	681b      	ldr	r3, [r3, #0]
   d4fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4fa4:	9301      	str	r3, [sp, #4]
   d4fa6:	bd08      	pop	{r3, pc}
   d4fa8:	00030228 	.word	0x00030228

000d4fac <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d4fac:	b508      	push	{r3, lr}
   d4fae:	4b02      	ldr	r3, [pc, #8]	; (d4fb8 <hal_i2c_flush+0xc>)
   d4fb0:	681b      	ldr	r3, [r3, #0]
   d4fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4fb4:	9301      	str	r3, [sp, #4]
   d4fb6:	bd08      	pop	{r3, pc}
   d4fb8:	00030228 	.word	0x00030228

000d4fbc <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d4fbc:	b508      	push	{r3, lr}
   d4fbe:	4b02      	ldr	r3, [pc, #8]	; (d4fc8 <hal_i2c_is_enabled+0xc>)
   d4fc0:	681b      	ldr	r3, [r3, #0]
   d4fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4fc4:	9301      	str	r3, [sp, #4]
   d4fc6:	bd08      	pop	{r3, pc}
   d4fc8:	00030228 	.word	0x00030228

000d4fcc <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d4fcc:	b508      	push	{r3, lr}
   d4fce:	4b02      	ldr	r3, [pc, #8]	; (d4fd8 <hal_i2c_init+0xc>)
   d4fd0:	681b      	ldr	r3, [r3, #0]
   d4fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4fd4:	9301      	str	r3, [sp, #4]
   d4fd6:	bd08      	pop	{r3, pc}
   d4fd8:	00030228 	.word	0x00030228

000d4fdc <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d4fdc:	b508      	push	{r3, lr}
   d4fde:	4b02      	ldr	r3, [pc, #8]	; (d4fe8 <sock_setsockopt+0xc>)
   d4fe0:	681b      	ldr	r3, [r3, #0]
   d4fe2:	699b      	ldr	r3, [r3, #24]
   d4fe4:	9301      	str	r3, [sp, #4]
   d4fe6:	bd08      	pop	{r3, pc}
   d4fe8:	00030238 	.word	0x00030238

000d4fec <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d4fec:	b508      	push	{r3, lr}
   d4fee:	4b02      	ldr	r3, [pc, #8]	; (d4ff8 <sock_close+0xc>)
   d4ff0:	681b      	ldr	r3, [r3, #0]
   d4ff2:	69db      	ldr	r3, [r3, #28]
   d4ff4:	9301      	str	r3, [sp, #4]
   d4ff6:	bd08      	pop	{r3, pc}
   d4ff8:	00030238 	.word	0x00030238

000d4ffc <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d4ffc:	b508      	push	{r3, lr}
   d4ffe:	4b02      	ldr	r3, [pc, #8]	; (d5008 <sock_connect+0xc>)
   d5000:	681b      	ldr	r3, [r3, #0]
   d5002:	6a1b      	ldr	r3, [r3, #32]
   d5004:	9301      	str	r3, [sp, #4]
   d5006:	bd08      	pop	{r3, pc}
   d5008:	00030238 	.word	0x00030238

000d500c <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d500c:	b508      	push	{r3, lr}
   d500e:	4b02      	ldr	r3, [pc, #8]	; (d5018 <sock_recv+0xc>)
   d5010:	681b      	ldr	r3, [r3, #0]
   d5012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5014:	9301      	str	r3, [sp, #4]
   d5016:	bd08      	pop	{r3, pc}
   d5018:	00030238 	.word	0x00030238

000d501c <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d501c:	b508      	push	{r3, lr}
   d501e:	4b02      	ldr	r3, [pc, #8]	; (d5028 <sock_send+0xc>)
   d5020:	681b      	ldr	r3, [r3, #0]
   d5022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5024:	9301      	str	r3, [sp, #4]
   d5026:	bd08      	pop	{r3, pc}
   d5028:	00030238 	.word	0x00030238

000d502c <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d502c:	b508      	push	{r3, lr}
   d502e:	4b02      	ldr	r3, [pc, #8]	; (d5038 <sock_socket+0xc>)
   d5030:	681b      	ldr	r3, [r3, #0]
   d5032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d5034:	9301      	str	r3, [sp, #4]
   d5036:	bd08      	pop	{r3, pc}
   d5038:	00030238 	.word	0x00030238

000d503c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d503c:	b508      	push	{r3, lr}
   d503e:	4b02      	ldr	r3, [pc, #8]	; (d5048 <hal_spi_init+0xc>)
   d5040:	681b      	ldr	r3, [r3, #0]
   d5042:	69db      	ldr	r3, [r3, #28]
   d5044:	9301      	str	r3, [sp, #4]
   d5046:	bd08      	pop	{r3, pc}
   d5048:	00030230 	.word	0x00030230

000d504c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d504c:	b508      	push	{r3, lr}
   d504e:	4b02      	ldr	r3, [pc, #8]	; (d5058 <hal_spi_is_enabled+0xc>)
   d5050:	681b      	ldr	r3, [r3, #0]
   d5052:	6a1b      	ldr	r3, [r3, #32]
   d5054:	9301      	str	r3, [sp, #4]
   d5056:	bd08      	pop	{r3, pc}
   d5058:	00030230 	.word	0x00030230

000d505c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d505c:	b508      	push	{r3, lr}
   d505e:	4b02      	ldr	r3, [pc, #8]	; (d5068 <HAL_USB_USART_Init+0xc>)
   d5060:	681b      	ldr	r3, [r3, #0]
   d5062:	681b      	ldr	r3, [r3, #0]
   d5064:	9301      	str	r3, [sp, #4]
   d5066:	bd08      	pop	{r3, pc}
   d5068:	0003024c 	.word	0x0003024c

000d506c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d506c:	b508      	push	{r3, lr}
   d506e:	4b02      	ldr	r3, [pc, #8]	; (d5078 <HAL_USB_USART_Begin+0xc>)
   d5070:	681b      	ldr	r3, [r3, #0]
   d5072:	685b      	ldr	r3, [r3, #4]
   d5074:	9301      	str	r3, [sp, #4]
   d5076:	bd08      	pop	{r3, pc}
   d5078:	0003024c 	.word	0x0003024c

000d507c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d507c:	b508      	push	{r3, lr}
   d507e:	4b02      	ldr	r3, [pc, #8]	; (d5088 <HAL_USB_USART_Available_Data+0xc>)
   d5080:	681b      	ldr	r3, [r3, #0]
   d5082:	691b      	ldr	r3, [r3, #16]
   d5084:	9301      	str	r3, [sp, #4]
   d5086:	bd08      	pop	{r3, pc}
   d5088:	0003024c 	.word	0x0003024c

000d508c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d508c:	b508      	push	{r3, lr}
   d508e:	4b02      	ldr	r3, [pc, #8]	; (d5098 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5090:	681b      	ldr	r3, [r3, #0]
   d5092:	695b      	ldr	r3, [r3, #20]
   d5094:	9301      	str	r3, [sp, #4]
   d5096:	bd08      	pop	{r3, pc}
   d5098:	0003024c 	.word	0x0003024c

000d509c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d509c:	b508      	push	{r3, lr}
   d509e:	4b02      	ldr	r3, [pc, #8]	; (d50a8 <HAL_USB_USART_Receive_Data+0xc>)
   d50a0:	681b      	ldr	r3, [r3, #0]
   d50a2:	699b      	ldr	r3, [r3, #24]
   d50a4:	9301      	str	r3, [sp, #4]
   d50a6:	bd08      	pop	{r3, pc}
   d50a8:	0003024c 	.word	0x0003024c

000d50ac <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d50ac:	b508      	push	{r3, lr}
   d50ae:	4b02      	ldr	r3, [pc, #8]	; (d50b8 <HAL_USB_USART_Send_Data+0xc>)
   d50b0:	681b      	ldr	r3, [r3, #0]
   d50b2:	69db      	ldr	r3, [r3, #28]
   d50b4:	9301      	str	r3, [sp, #4]
   d50b6:	bd08      	pop	{r3, pc}
   d50b8:	0003024c 	.word	0x0003024c

000d50bc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d50bc:	b508      	push	{r3, lr}
   d50be:	4b02      	ldr	r3, [pc, #8]	; (d50c8 <HAL_USB_USART_Flush_Data+0xc>)
   d50c0:	681b      	ldr	r3, [r3, #0]
   d50c2:	6a1b      	ldr	r3, [r3, #32]
   d50c4:	9301      	str	r3, [sp, #4]
   d50c6:	bd08      	pop	{r3, pc}
   d50c8:	0003024c 	.word	0x0003024c

000d50cc <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d50cc:	b508      	push	{r3, lr}
   d50ce:	4b02      	ldr	r3, [pc, #8]	; (d50d8 <log_message+0xc>)
   d50d0:	681b      	ldr	r3, [r3, #0]
   d50d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d50d4:	9301      	str	r3, [sp, #4]
   d50d6:	bd08      	pop	{r3, pc}
   d50d8:	00030260 	.word	0x00030260

000d50dc <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d50dc:	b508      	push	{r3, lr}
   d50de:	4b02      	ldr	r3, [pc, #8]	; (d50e8 <set_system_mode+0xc>)
   d50e0:	681b      	ldr	r3, [r3, #0]
   d50e2:	685b      	ldr	r3, [r3, #4]
   d50e4:	9301      	str	r3, [sp, #4]
   d50e6:	bd08      	pop	{r3, pc}
   d50e8:	00030220 	.word	0x00030220

000d50ec <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d50ec:	b508      	push	{r3, lr}
   d50ee:	4b02      	ldr	r3, [pc, #8]	; (d50f8 <system_delay_ms+0xc>)
   d50f0:	681b      	ldr	r3, [r3, #0]
   d50f2:	695b      	ldr	r3, [r3, #20]
   d50f4:	9301      	str	r3, [sp, #4]
   d50f6:	bd08      	pop	{r3, pc}
   d50f8:	00030220 	.word	0x00030220

000d50fc <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d50fc:	b508      	push	{r3, lr}
   d50fe:	4b02      	ldr	r3, [pc, #8]	; (d5108 <system_thread_set_state+0xc>)
   d5100:	681b      	ldr	r3, [r3, #0]
   d5102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5104:	9301      	str	r3, [sp, #4]
   d5106:	bd08      	pop	{r3, pc}
   d5108:	00030220 	.word	0x00030220

000d510c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d510c:	b508      	push	{r3, lr}
   d510e:	4b03      	ldr	r3, [pc, #12]	; (d511c <system_ctrl_set_app_request_handler+0x10>)
   d5110:	681b      	ldr	r3, [r3, #0]
   d5112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5116:	9301      	str	r3, [sp, #4]
   d5118:	bd08      	pop	{r3, pc}
   d511a:	0000      	.short	0x0000
   d511c:	00030220 	.word	0x00030220

000d5120 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5120:	b508      	push	{r3, lr}
   d5122:	4b03      	ldr	r3, [pc, #12]	; (d5130 <system_ctrl_set_result+0x10>)
   d5124:	681b      	ldr	r3, [r3, #0]
   d5126:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d512a:	9301      	str	r3, [sp, #4]
   d512c:	bd08      	pop	{r3, pc}
   d512e:	0000      	.short	0x0000
   d5130:	00030220 	.word	0x00030220

000d5134 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5134:	b508      	push	{r3, lr}
   d5136:	4b02      	ldr	r3, [pc, #8]	; (d5140 <network_connect+0xc>)
   d5138:	681b      	ldr	r3, [r3, #0]
   d513a:	685b      	ldr	r3, [r3, #4]
   d513c:	9301      	str	r3, [sp, #4]
   d513e:	bd08      	pop	{r3, pc}
   d5140:	00030240 	.word	0x00030240

000d5144 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5144:	b508      	push	{r3, lr}
   d5146:	4b02      	ldr	r3, [pc, #8]	; (d5150 <network_connecting+0xc>)
   d5148:	681b      	ldr	r3, [r3, #0]
   d514a:	689b      	ldr	r3, [r3, #8]
   d514c:	9301      	str	r3, [sp, #4]
   d514e:	bd08      	pop	{r3, pc}
   d5150:	00030240 	.word	0x00030240

000d5154 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5154:	b508      	push	{r3, lr}
   d5156:	4b02      	ldr	r3, [pc, #8]	; (d5160 <network_disconnect+0xc>)
   d5158:	681b      	ldr	r3, [r3, #0]
   d515a:	68db      	ldr	r3, [r3, #12]
   d515c:	9301      	str	r3, [sp, #4]
   d515e:	bd08      	pop	{r3, pc}
   d5160:	00030240 	.word	0x00030240

000d5164 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5164:	b508      	push	{r3, lr}
   d5166:	4b02      	ldr	r3, [pc, #8]	; (d5170 <network_ready+0xc>)
   d5168:	681b      	ldr	r3, [r3, #0]
   d516a:	691b      	ldr	r3, [r3, #16]
   d516c:	9301      	str	r3, [sp, #4]
   d516e:	bd08      	pop	{r3, pc}
   d5170:	00030240 	.word	0x00030240

000d5174 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5174:	b508      	push	{r3, lr}
   d5176:	4b02      	ldr	r3, [pc, #8]	; (d5180 <network_on+0xc>)
   d5178:	681b      	ldr	r3, [r3, #0]
   d517a:	695b      	ldr	r3, [r3, #20]
   d517c:	9301      	str	r3, [sp, #4]
   d517e:	bd08      	pop	{r3, pc}
   d5180:	00030240 	.word	0x00030240

000d5184 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5184:	b508      	push	{r3, lr}
   d5186:	4b02      	ldr	r3, [pc, #8]	; (d5190 <network_off+0xc>)
   d5188:	681b      	ldr	r3, [r3, #0]
   d518a:	699b      	ldr	r3, [r3, #24]
   d518c:	9301      	str	r3, [sp, #4]
   d518e:	bd08      	pop	{r3, pc}
   d5190:	00030240 	.word	0x00030240

000d5194 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5194:	b508      	push	{r3, lr}
   d5196:	4b02      	ldr	r3, [pc, #8]	; (d51a0 <network_listen+0xc>)
   d5198:	681b      	ldr	r3, [r3, #0]
   d519a:	69db      	ldr	r3, [r3, #28]
   d519c:	9301      	str	r3, [sp, #4]
   d519e:	bd08      	pop	{r3, pc}
   d51a0:	00030240 	.word	0x00030240

000d51a4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d51a4:	b508      	push	{r3, lr}
   d51a6:	4b02      	ldr	r3, [pc, #8]	; (d51b0 <network_listening+0xc>)
   d51a8:	681b      	ldr	r3, [r3, #0]
   d51aa:	6a1b      	ldr	r3, [r3, #32]
   d51ac:	9301      	str	r3, [sp, #4]
   d51ae:	bd08      	pop	{r3, pc}
   d51b0:	00030240 	.word	0x00030240

000d51b4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d51b4:	b508      	push	{r3, lr}
   d51b6:	4b02      	ldr	r3, [pc, #8]	; (d51c0 <network_set_listen_timeout+0xc>)
   d51b8:	681b      	ldr	r3, [r3, #0]
   d51ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d51bc:	9301      	str	r3, [sp, #4]
   d51be:	bd08      	pop	{r3, pc}
   d51c0:	00030240 	.word	0x00030240

000d51c4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d51c4:	b508      	push	{r3, lr}
   d51c6:	4b02      	ldr	r3, [pc, #8]	; (d51d0 <network_get_listen_timeout+0xc>)
   d51c8:	681b      	ldr	r3, [r3, #0]
   d51ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d51cc:	9301      	str	r3, [sp, #4]
   d51ce:	bd08      	pop	{r3, pc}
   d51d0:	00030240 	.word	0x00030240

000d51d4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d51d4:	b508      	push	{r3, lr}
   d51d6:	4b02      	ldr	r3, [pc, #8]	; (d51e0 <network_is_on+0xc>)
   d51d8:	681b      	ldr	r3, [r3, #0]
   d51da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d51dc:	9301      	str	r3, [sp, #4]
   d51de:	bd08      	pop	{r3, pc}
   d51e0:	00030240 	.word	0x00030240

000d51e4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d51e4:	b508      	push	{r3, lr}
   d51e6:	4b02      	ldr	r3, [pc, #8]	; (d51f0 <network_is_off+0xc>)
   d51e8:	681b      	ldr	r3, [r3, #0]
   d51ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d51ec:	9301      	str	r3, [sp, #4]
   d51ee:	bd08      	pop	{r3, pc}
   d51f0:	00030240 	.word	0x00030240

000d51f4 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d51f4:	b508      	push	{r3, lr}
   d51f6:	4b02      	ldr	r3, [pc, #8]	; (d5200 <spark_process+0xc>)
   d51f8:	681b      	ldr	r3, [r3, #0]
   d51fa:	689b      	ldr	r3, [r3, #8]
   d51fc:	9301      	str	r3, [sp, #4]
   d51fe:	bd08      	pop	{r3, pc}
   d5200:	00030244 	.word	0x00030244

000d5204 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5204:	b508      	push	{r3, lr}
   d5206:	4b02      	ldr	r3, [pc, #8]	; (d5210 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5208:	681b      	ldr	r3, [r3, #0]
   d520a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d520c:	9301      	str	r3, [sp, #4]
   d520e:	bd08      	pop	{r3, pc}
   d5210:	00030244 	.word	0x00030244

000d5214 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5214:	b508      	push	{r3, lr}
   d5216:	4b02      	ldr	r3, [pc, #8]	; (d5220 <malloc+0xc>)
   d5218:	681b      	ldr	r3, [r3, #0]
   d521a:	681b      	ldr	r3, [r3, #0]
   d521c:	9301      	str	r3, [sp, #4]
   d521e:	bd08      	pop	{r3, pc}
   d5220:	0003021c 	.word	0x0003021c

000d5224 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5224:	b508      	push	{r3, lr}
   d5226:	4b02      	ldr	r3, [pc, #8]	; (d5230 <free+0xc>)
   d5228:	681b      	ldr	r3, [r3, #0]
   d522a:	685b      	ldr	r3, [r3, #4]
   d522c:	9301      	str	r3, [sp, #4]
   d522e:	bd08      	pop	{r3, pc}
   d5230:	0003021c 	.word	0x0003021c

000d5234 <snprintf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d5234:	b508      	push	{r3, lr}
   d5236:	4b02      	ldr	r3, [pc, #8]	; (d5240 <snprintf+0xc>)
   d5238:	681b      	ldr	r3, [r3, #0]
   d523a:	69db      	ldr	r3, [r3, #28]
   d523c:	9301      	str	r3, [sp, #4]
   d523e:	bd08      	pop	{r3, pc}
   d5240:	0003021c 	.word	0x0003021c

000d5244 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d5244:	b508      	push	{r3, lr}
   d5246:	4b02      	ldr	r3, [pc, #8]	; (d5250 <__errno+0xc>)
   d5248:	681b      	ldr	r3, [r3, #0]
   d524a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d524c:	9301      	str	r3, [sp, #4]
   d524e:	bd08      	pop	{r3, pc}
   d5250:	0003021c 	.word	0x0003021c

000d5254 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d5254:	b508      	push	{r3, lr}
   d5256:	4b02      	ldr	r3, [pc, #8]	; (d5260 <newlib_impure_ptr_callback+0xc>)
   d5258:	681b      	ldr	r3, [r3, #0]
   d525a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d525c:	9301      	str	r3, [sp, #4]
   d525e:	bd08      	pop	{r3, pc}
   d5260:	0003021c 	.word	0x0003021c

000d5264 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5264:	2200      	movs	r2, #0
   d5266:	6840      	ldr	r0, [r0, #4]
   d5268:	4611      	mov	r1, r2
   d526a:	f7ff bf9b 	b.w	d51a4 <network_listening>

000d526e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d526e:	2200      	movs	r2, #0
   d5270:	6840      	ldr	r0, [r0, #4]
   d5272:	4611      	mov	r1, r2
   d5274:	f7ff bfa6 	b.w	d51c4 <network_get_listen_timeout>

000d5278 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5278:	6840      	ldr	r0, [r0, #4]
   d527a:	2200      	movs	r2, #0
   d527c:	f7ff bf9a 	b.w	d51b4 <network_set_listen_timeout>

000d5280 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5280:	6840      	ldr	r0, [r0, #4]
   d5282:	2200      	movs	r2, #0
   d5284:	f081 0101 	eor.w	r1, r1, #1
   d5288:	f7ff bf84 	b.w	d5194 <network_listen>

000d528c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d528c:	2300      	movs	r3, #0
   d528e:	6840      	ldr	r0, [r0, #4]
   d5290:	461a      	mov	r2, r3
   d5292:	4619      	mov	r1, r3
   d5294:	f7ff bf76 	b.w	d5184 <network_off>

000d5298 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5298:	2300      	movs	r3, #0
   d529a:	6840      	ldr	r0, [r0, #4]
   d529c:	461a      	mov	r2, r3
   d529e:	4619      	mov	r1, r3
   d52a0:	f7ff bf68 	b.w	d5174 <network_on>

000d52a4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d52a4:	2200      	movs	r2, #0
   d52a6:	6840      	ldr	r0, [r0, #4]
   d52a8:	4611      	mov	r1, r2
   d52aa:	f7ff bf5b 	b.w	d5164 <network_ready>

000d52ae <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d52ae:	2200      	movs	r2, #0
   d52b0:	6840      	ldr	r0, [r0, #4]
   d52b2:	4611      	mov	r1, r2
   d52b4:	f7ff bf46 	b.w	d5144 <network_connecting>

000d52b8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d52b8:	6840      	ldr	r0, [r0, #4]
   d52ba:	2200      	movs	r2, #0
   d52bc:	2102      	movs	r1, #2
   d52be:	f7ff bf49 	b.w	d5154 <network_disconnect>

000d52c2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d52c2:	2300      	movs	r3, #0
   d52c4:	6840      	ldr	r0, [r0, #4]
   d52c6:	461a      	mov	r2, r3
   d52c8:	f7ff bf34 	b.w	d5134 <network_connect>

000d52cc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d52cc:	4b02      	ldr	r3, [pc, #8]	; (d52d8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d52ce:	2203      	movs	r2, #3
   d52d0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d52d2:	4a02      	ldr	r2, [pc, #8]	; (d52dc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d52d4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d52d6:	4770      	bx	lr
   d52d8:	2003e650 	.word	0x2003e650
   d52dc:	000d7788 	.word	0x000d7788

000d52e0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d52e0:	b510      	push	{r4, lr}
   d52e2:	4604      	mov	r4, r0
   d52e4:	4608      	mov	r0, r1
{
    _spi = spi;
   d52e6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d52e8:	f7ff fea8 	bl	d503c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d52ec:	2300      	movs	r3, #0
   d52ee:	6063      	str	r3, [r4, #4]
}
   d52f0:	4620      	mov	r0, r4
   d52f2:	bd10      	pop	{r4, pc}

000d52f4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d52f4:	b510      	push	{r4, lr}
   d52f6:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d52f8:	6800      	ldr	r0, [r0, #0]
   d52fa:	b118      	cbz	r0, d5304 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d52fc:	f7ff ff92 	bl	d5224 <free>
            wakeupSource_ = nullptr;
   d5300:	2300      	movs	r3, #0
   d5302:	6023      	str	r3, [r4, #0]
        }
    }
   d5304:	bd10      	pop	{r4, pc}

000d5306 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5306:	b510      	push	{r4, lr}
   d5308:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d530a:	f7ff fff3 	bl	d52f4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d530e:	4620      	mov	r0, r4
   d5310:	bd10      	pop	{r4, pc}
	...

000d5314 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5314:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5316:	4b09      	ldr	r3, [pc, #36]	; (d533c <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d5318:	4c09      	ldr	r4, [pc, #36]	; (d5340 <_GLOBAL__sub_I_System+0x2c>)
   d531a:	2202      	movs	r2, #2
   d531c:	2000      	movs	r0, #0
   d531e:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d5320:	4b08      	ldr	r3, [pc, #32]	; (d5344 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d5322:	6020      	str	r0, [r4, #0]
   d5324:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d5326:	71a0      	strb	r0, [r4, #6]
   d5328:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d532a:	f7ff fed7 	bl	d50dc <set_system_mode>
SystemClass System;
   d532e:	4620      	mov	r0, r4
   d5330:	4a05      	ldr	r2, [pc, #20]	; (d5348 <_GLOBAL__sub_I_System+0x34>)
   d5332:	4906      	ldr	r1, [pc, #24]	; (d534c <_GLOBAL__sub_I_System+0x38>)
   d5334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d5338:	f001 b8f4 	b.w	d6524 <__aeabi_atexit>
   d533c:	2003e664 	.word	0x2003e664
   d5340:	2003e658 	.word	0x2003e658
   d5344:	ffff0000 	.word	0xffff0000
   d5348:	2003e3a0 	.word	0x2003e3a0
   d534c:	000d5307 	.word	0x000d5307

000d5350 <_ZN9IPAddressaSIPKhEERS_T_>:
    void set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3);


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
   d5350:	b570      	push	{r4, r5, r6, lr}
   d5352:	b086      	sub	sp, #24
   d5354:	4606      	mov	r6, r0
class IPAddress : public Printable {
   d5356:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   d5358:	4668      	mov	r0, sp
   d535a:	f000 facb 	bl	d58f4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d535e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5360:	1d34      	adds	r4, r6, #4
   d5362:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5364:	682b      	ldr	r3, [r5, #0]
   d5366:	7023      	strb	r3, [r4, #0]
    }
   d5368:	4630      	mov	r0, r6
   d536a:	b006      	add	sp, #24
   d536c:	bd70      	pop	{r4, r5, r6, pc}

000d536e <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d536e:	b510      	push	{r4, lr}
   d5370:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5372:	6800      	ldr	r0, [r0, #0]
   d5374:	b108      	cbz	r0, d537a <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5376:	f7ff fd99 	bl	d4eac <os_mutex_recursive_destroy>
    }
   d537a:	4620      	mov	r0, r4
   d537c:	bd10      	pop	{r4, pc}

000d537e <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d537e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5380:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d5382:	4604      	mov	r4, r0
      if (_M_manager)
   d5384:	b113      	cbz	r3, d538c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5386:	2203      	movs	r2, #3
   d5388:	4601      	mov	r1, r0
   d538a:	4798      	blx	r3
    }
   d538c:	4620      	mov	r0, r4
   d538e:	bd10      	pop	{r4, pc}

000d5390 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d5390:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d5392:	4c06      	ldr	r4, [pc, #24]	; (d53ac <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5394:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d5396:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d5398:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d539a:	f7ff fd7f 	bl	d4e9c <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d539e:	4620      	mov	r0, r4
   d53a0:	4a03      	ldr	r2, [pc, #12]	; (d53b0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d53a2:	4904      	ldr	r1, [pc, #16]	; (d53b4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d53a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d53a8:	f001 b8bc 	b.w	d6524 <__aeabi_atexit>
   d53ac:	2003e668 	.word	0x2003e668
   d53b0:	2003e3a0 	.word	0x2003e3a0
   d53b4:	000d536f 	.word	0x000d536f

000d53b8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d53b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d53ba:	4606      	mov	r6, r0
   d53bc:	460d      	mov	r5, r1
  size_t n = 0;
   d53be:	188f      	adds	r7, r1, r2
   d53c0:	2400      	movs	r4, #0
  while (size--) {
   d53c2:	42bd      	cmp	r5, r7
   d53c4:	d00c      	beq.n	d53e0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d53c6:	6833      	ldr	r3, [r6, #0]
   d53c8:	f815 1b01 	ldrb.w	r1, [r5], #1
   d53cc:	689b      	ldr	r3, [r3, #8]
   d53ce:	4630      	mov	r0, r6
   d53d0:	4798      	blx	r3
     if (chunk>=0)
   d53d2:	1e03      	subs	r3, r0, #0
   d53d4:	db01      	blt.n	d53da <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d53d6:	441c      	add	r4, r3
  while (size--) {
   d53d8:	e7f3      	b.n	d53c2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d53da:	2c00      	cmp	r4, #0
   d53dc:	bf08      	it	eq
   d53de:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d53e0:	4620      	mov	r0, r4
   d53e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d53e4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d53e4:	b513      	push	{r0, r1, r4, lr}
   d53e6:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d53e8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d53ea:	b159      	cbz	r1, d5404 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d53ec:	9101      	str	r1, [sp, #4]
   d53ee:	f001 fec3 	bl	d7178 <strlen>
   d53f2:	6823      	ldr	r3, [r4, #0]
   d53f4:	9901      	ldr	r1, [sp, #4]
   d53f6:	68db      	ldr	r3, [r3, #12]
   d53f8:	4602      	mov	r2, r0
   d53fa:	4620      	mov	r0, r4
    }
   d53fc:	b002      	add	sp, #8
   d53fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d5402:	4718      	bx	r3
    }
   d5404:	b002      	add	sp, #8
   d5406:	bd10      	pop	{r4, pc}

000d5408 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5408:	6803      	ldr	r3, [r0, #0]
   d540a:	689b      	ldr	r3, [r3, #8]
   d540c:	4718      	bx	r3

000d540e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d540e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5410:	210d      	movs	r1, #13
{
   d5412:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5414:	f7ff fff8 	bl	d5408 <_ZN5Print5printEc>
  n += print('\n');
   d5418:	210a      	movs	r1, #10
  size_t n = print('\r');
   d541a:	4604      	mov	r4, r0
  n += print('\n');
   d541c:	4628      	mov	r0, r5
   d541e:	f7ff fff3 	bl	d5408 <_ZN5Print5printEc>
  return n;
}
   d5422:	4420      	add	r0, r4
   d5424:	bd38      	pop	{r3, r4, r5, pc}

000d5426 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d5426:	b538      	push	{r3, r4, r5, lr}
   d5428:	4605      	mov	r5, r0
  return write(str);
   d542a:	f7ff ffdb 	bl	d53e4 <_ZN5Print5writeEPKc>
   d542e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d5430:	4628      	mov	r0, r5
   d5432:	f7ff ffec 	bl	d540e <_ZN5Print7printlnEv>
  return n;
}
   d5436:	4420      	add	r0, r4
   d5438:	bd38      	pop	{r3, r4, r5, pc}

000d543a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d543a:	b530      	push	{r4, r5, lr}
   d543c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d543e:	2300      	movs	r3, #0
   d5440:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5444:	2a01      	cmp	r2, #1
   d5446:	bf98      	it	ls
   d5448:	220a      	movls	r2, #10
   d544a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d544c:	460d      	mov	r5, r1
   d544e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d5452:	fb01 5312 	mls	r3, r1, r2, r5
   d5456:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d545a:	2b09      	cmp	r3, #9
   d545c:	bf94      	ite	ls
   d545e:	3330      	addls	r3, #48	; 0x30
   d5460:	3337      	addhi	r3, #55	; 0x37
   d5462:	b2db      	uxtb	r3, r3
  } while(n);
   d5464:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5466:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d546a:	d9ef      	bls.n	d544c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d546c:	4621      	mov	r1, r4
   d546e:	f7ff ffb9 	bl	d53e4 <_ZN5Print5writeEPKc>
}
   d5472:	b00b      	add	sp, #44	; 0x2c
   d5474:	bd30      	pop	{r4, r5, pc}
	...

000d5478 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d5478:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d547c:	ec55 4b10 	vmov	r4, r5, d0
   d5480:	4606      	mov	r6, r0
   d5482:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d5484:	ee10 2a10 	vmov	r2, s0
   d5488:	ee10 0a10 	vmov	r0, s0
   d548c:	462b      	mov	r3, r5
   d548e:	4629      	mov	r1, r5
   d5490:	f001 fdba 	bl	d7008 <__aeabi_dcmpun>
   d5494:	b140      	cbz	r0, d54a8 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   d5496:	4953      	ldr	r1, [pc, #332]	; (d55e4 <_ZN5Print10printFloatEdh+0x16c>)
   d5498:	4630      	mov	r0, r6
   d549a:	f7ff ffa3 	bl	d53e4 <_ZN5Print5writeEPKc>
   d549e:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   d54a0:	4650      	mov	r0, sl
   d54a2:	b003      	add	sp, #12
   d54a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   d54a8:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   d54ac:	4b4e      	ldr	r3, [pc, #312]	; (d55e8 <_ZN5Print10printFloatEdh+0x170>)
   d54ae:	f04f 32ff 	mov.w	r2, #4294967295
   d54b2:	4620      	mov	r0, r4
   d54b4:	4649      	mov	r1, r9
   d54b6:	f001 fda7 	bl	d7008 <__aeabi_dcmpun>
   d54ba:	b948      	cbnz	r0, d54d0 <_ZN5Print10printFloatEdh+0x58>
   d54bc:	4b4a      	ldr	r3, [pc, #296]	; (d55e8 <_ZN5Print10printFloatEdh+0x170>)
   d54be:	f04f 32ff 	mov.w	r2, #4294967295
   d54c2:	4620      	mov	r0, r4
   d54c4:	4649      	mov	r1, r9
   d54c6:	f001 fd81 	bl	d6fcc <__aeabi_dcmple>
   d54ca:	b908      	cbnz	r0, d54d0 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   d54cc:	4947      	ldr	r1, [pc, #284]	; (d55ec <_ZN5Print10printFloatEdh+0x174>)
   d54ce:	e7e3      	b.n	d5498 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d54d0:	4b47      	ldr	r3, [pc, #284]	; (d55f0 <_ZN5Print10printFloatEdh+0x178>)
   d54d2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d54d6:	4620      	mov	r0, r4
   d54d8:	4629      	mov	r1, r5
   d54da:	f001 fd8b 	bl	d6ff4 <__aeabi_dcmpgt>
   d54de:	b108      	cbz	r0, d54e4 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   d54e0:	4944      	ldr	r1, [pc, #272]	; (d55f4 <_ZN5Print10printFloatEdh+0x17c>)
   d54e2:	e7d9      	b.n	d5498 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d54e4:	4b44      	ldr	r3, [pc, #272]	; (d55f8 <_ZN5Print10printFloatEdh+0x180>)
   d54e6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d54ea:	4620      	mov	r0, r4
   d54ec:	4629      	mov	r1, r5
   d54ee:	f001 fd63 	bl	d6fb8 <__aeabi_dcmplt>
   d54f2:	2800      	cmp	r0, #0
   d54f4:	d1f4      	bne.n	d54e0 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   d54f6:	2200      	movs	r2, #0
   d54f8:	2300      	movs	r3, #0
   d54fa:	4620      	mov	r0, r4
   d54fc:	4629      	mov	r1, r5
   d54fe:	f001 fd5b 	bl	d6fb8 <__aeabi_dcmplt>
   d5502:	b1d0      	cbz	r0, d553a <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   d5504:	212d      	movs	r1, #45	; 0x2d
   d5506:	4630      	mov	r0, r6
   d5508:	f7ff ff7e 	bl	d5408 <_ZN5Print5printEc>
     number = -number;
   d550c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   d5510:	4682      	mov	sl, r0
     number = -number;
   d5512:	461d      	mov	r5, r3
  double rounding = 0.5;
   d5514:	4939      	ldr	r1, [pc, #228]	; (d55fc <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   d5516:	f8df 90ec 	ldr.w	r9, [pc, #236]	; d5604 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   d551a:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   d551e:	2000      	movs	r0, #0
    rounding /= 10.0;
   d5520:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   d5524:	fa5f f38b 	uxtb.w	r3, fp
   d5528:	429f      	cmp	r7, r3
   d552a:	d908      	bls.n	d553e <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   d552c:	4642      	mov	r2, r8
   d552e:	464b      	mov	r3, r9
   d5530:	f001 fbfa 	bl	d6d28 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   d5534:	f10b 0b01 	add.w	fp, fp, #1
   d5538:	e7f4      	b.n	d5524 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   d553a:	4682      	mov	sl, r0
   d553c:	e7ea      	b.n	d5514 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   d553e:	4622      	mov	r2, r4
   d5540:	462b      	mov	r3, r5
   d5542:	f001 f911 	bl	d6768 <__adddf3>
   d5546:	460d      	mov	r5, r1
   d5548:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   d554a:	f001 fd9b 	bl	d7084 <__aeabi_d2uiz>
   d554e:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   d5550:	f001 fa46 	bl	d69e0 <__aeabi_ui2d>
   d5554:	4602      	mov	r2, r0
   d5556:	460b      	mov	r3, r1
   d5558:	4620      	mov	r0, r4
   d555a:	4629      	mov	r1, r5
   d555c:	f001 f902 	bl	d6764 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d5560:	220a      	movs	r2, #10
   d5562:	4604      	mov	r4, r0
   d5564:	460d      	mov	r5, r1
   d5566:	4630      	mov	r0, r6
   d5568:	4641      	mov	r1, r8
   d556a:	f7ff ff66 	bl	d543a <_ZN5Print11printNumberEmh>
  n += print(int_part);
   d556e:	4482      	add	sl, r0
  if (digits > 0) {
   d5570:	b127      	cbz	r7, d557c <_ZN5Print10printFloatEdh+0x104>
  return write(str);
   d5572:	4923      	ldr	r1, [pc, #140]	; (d5600 <_ZN5Print10printFloatEdh+0x188>)
   d5574:	4630      	mov	r0, r6
   d5576:	f7ff ff35 	bl	d53e4 <_ZN5Print5writeEPKc>
    n += print(".");
   d557a:	4482      	add	sl, r0
    remainder *= 10.0;
   d557c:	f8df 9084 	ldr.w	r9, [pc, #132]	; d5604 <_ZN5Print10printFloatEdh+0x18c>
   d5580:	f04f 0800 	mov.w	r8, #0
  while (digits-- > 0)
   d5584:	3f01      	subs	r7, #1
   d5586:	b2ff      	uxtb	r7, r7
   d5588:	2fff      	cmp	r7, #255	; 0xff
   d558a:	d089      	beq.n	d54a0 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   d558c:	4642      	mov	r2, r8
   d558e:	464b      	mov	r3, r9
   d5590:	4620      	mov	r0, r4
   d5592:	4629      	mov	r1, r5
   d5594:	f001 fa9e 	bl	d6ad4 <__aeabi_dmul>
   d5598:	4604      	mov	r4, r0
   d559a:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   d559c:	f001 fd4a 	bl	d7034 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   d55a0:	f1b0 0b00 	subs.w	fp, r0, #0
   d55a4:	da1a      	bge.n	d55dc <_ZN5Print10printFloatEdh+0x164>
            t = print('-');
   d55a6:	212d      	movs	r1, #45	; 0x2d
   d55a8:	4630      	mov	r0, r6
   d55aa:	f7ff ff2d 	bl	d5408 <_ZN5Print5printEc>
            val = -n;
   d55ae:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   d55b2:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   d55b4:	220a      	movs	r2, #10
   d55b6:	4630      	mov	r0, r6
   d55b8:	9301      	str	r3, [sp, #4]
   d55ba:	f7ff ff3e 	bl	d543a <_ZN5Print11printNumberEmh>
   d55be:	9b01      	ldr	r3, [sp, #4]
   d55c0:	4418      	add	r0, r3
    n += print(toPrint);
   d55c2:	4482      	add	sl, r0
    remainder -= toPrint;
   d55c4:	4658      	mov	r0, fp
   d55c6:	f001 fa1b 	bl	d6a00 <__aeabi_i2d>
   d55ca:	4602      	mov	r2, r0
   d55cc:	460b      	mov	r3, r1
   d55ce:	4620      	mov	r0, r4
   d55d0:	4629      	mov	r1, r5
   d55d2:	f001 f8c7 	bl	d6764 <__aeabi_dsub>
   d55d6:	4604      	mov	r4, r0
   d55d8:	460d      	mov	r5, r1
  while (digits-- > 0)
   d55da:	e7d3      	b.n	d5584 <_ZN5Print10printFloatEdh+0x10c>
            val = n;
   d55dc:	4659      	mov	r1, fp
        size_t t = 0;
   d55de:	2300      	movs	r3, #0
   d55e0:	e7e8      	b.n	d55b4 <_ZN5Print10printFloatEdh+0x13c>
   d55e2:	bf00      	nop
   d55e4:	000d77c4 	.word	0x000d77c4
   d55e8:	7fefffff 	.word	0x7fefffff
   d55ec:	000d77c8 	.word	0x000d77c8
   d55f0:	41efffff 	.word	0x41efffff
   d55f4:	000d77cc 	.word	0x000d77cc
   d55f8:	c1efffff 	.word	0xc1efffff
   d55fc:	3fe00000 	.word	0x3fe00000
   d5600:	000d77d0 	.word	0x000d77d0
   d5604:	40240000 	.word	0x40240000

000d5608 <_ZN5Print5printEdi>:
  return printFloat(n, digits);
   d5608:	b2c9      	uxtb	r1, r1
   d560a:	f7ff bf35 	b.w	d5478 <_ZN5Print10printFloatEdh>

000d560e <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   d560e:	b510      	push	{r4, lr}
   d5610:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d5612:	f7ff fc3b 	bl	d4e8c <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   d5616:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   d5618:	6823      	ldr	r3, [r4, #0]
   d561a:	4620      	mov	r0, r4
   d561c:	695b      	ldr	r3, [r3, #20]
   d561e:	4798      	blx	r3
    if (c >= 0) return c;
   d5620:	2800      	cmp	r0, #0
   d5622:	da08      	bge.n	d5636 <_ZN6Stream9timedReadEv+0x28>
   d5624:	f7ff fc32 	bl	d4e8c <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   d5628:	68e3      	ldr	r3, [r4, #12]
   d562a:	1ac0      	subs	r0, r0, r3
   d562c:	68a3      	ldr	r3, [r4, #8]
   d562e:	4298      	cmp	r0, r3
   d5630:	d3f2      	bcc.n	d5618 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   d5632:	f04f 30ff 	mov.w	r0, #4294967295
}
   d5636:	bd10      	pop	{r4, pc}

000d5638 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   d5638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d563a:	4606      	mov	r6, r0
   d563c:	460d      	mov	r5, r1
   d563e:	4617      	mov	r7, r2
  size_t count = 0;
   d5640:	2400      	movs	r4, #0
  while (count < length) {
   d5642:	42bc      	cmp	r4, r7
   d5644:	d007      	beq.n	d5656 <_ZN6Stream9readBytesEPcj+0x1e>
    int c = timedRead();
   d5646:	4630      	mov	r0, r6
   d5648:	f7ff ffe1 	bl	d560e <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   d564c:	1e03      	subs	r3, r0, #0
   d564e:	db02      	blt.n	d5656 <_ZN6Stream9readBytesEPcj+0x1e>
    *buffer++ = (char)c;
   d5650:	552b      	strb	r3, [r5, r4]
    count++;
   d5652:	3401      	adds	r4, #1
  while (count < length) {
   d5654:	e7f5      	b.n	d5642 <_ZN6Stream9readBytesEPcj+0xa>
  }
  return count;
}
   d5656:	4620      	mov	r0, r4
   d5658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d565a <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d565a:	2300      	movs	r3, #0
   d565c:	6840      	ldr	r0, [r0, #4]
   d565e:	461a      	mov	r2, r3
   d5660:	4619      	mov	r1, r3
   d5662:	f7ff bd87 	b.w	d5174 <network_on>
	...

000d5668 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5668:	4b01      	ldr	r3, [pc, #4]	; (d5670 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d566a:	4a02      	ldr	r2, [pc, #8]	; (d5674 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d566c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d566e:	4770      	bx	lr
   d5670:	2003e66c 	.word	0x2003e66c
   d5674:	000d77d2 	.word	0x000d77d2

000d5678 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5678:	4b02      	ldr	r3, [pc, #8]	; (d5684 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d567a:	681a      	ldr	r2, [r3, #0]
   d567c:	4b02      	ldr	r3, [pc, #8]	; (d5688 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d567e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d5680:	4770      	bx	lr
   d5682:	bf00      	nop
   d5684:	2003e338 	.word	0x2003e338
   d5688:	2003e670 	.word	0x2003e670

000d568c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d568c:	2100      	movs	r1, #0
   d568e:	f7ff bd2d 	b.w	d50ec <system_delay_ms>

000d5692 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5692:	b510      	push	{r4, lr}
   d5694:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5696:	f7ff fe72 	bl	d537e <_ZNSt14_Function_baseD1Ev>
   d569a:	4620      	mov	r0, r4
   d569c:	bd10      	pop	{r4, pc}
	...

000d56a0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d56a0:	4803      	ldr	r0, [pc, #12]	; (d56b0 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d56a2:	4a04      	ldr	r2, [pc, #16]	; (d56b4 <_GLOBAL__sub_I_RGB+0x14>)
   d56a4:	4904      	ldr	r1, [pc, #16]	; (d56b8 <_GLOBAL__sub_I_RGB+0x18>)
   d56a6:	2300      	movs	r3, #0
   d56a8:	6083      	str	r3, [r0, #8]
   d56aa:	f000 bf3b 	b.w	d6524 <__aeabi_atexit>
   d56ae:	bf00      	nop
   d56b0:	2003e674 	.word	0x2003e674
   d56b4:	2003e3a0 	.word	0x2003e3a0
   d56b8:	000d5693 	.word	0x000d5693

000d56bc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d56bc:	4b01      	ldr	r3, [pc, #4]	; (d56c4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d56be:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d56c0:	4770      	bx	lr
   d56c2:	bf00      	nop
   d56c4:	2003e33c 	.word	0x2003e33c

000d56c8 <serialEventRun>:
{
   d56c8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d56ca:	4b0b      	ldr	r3, [pc, #44]	; (d56f8 <serialEventRun+0x30>)
   d56cc:	b143      	cbz	r3, d56e0 <serialEventRun+0x18>
   d56ce:	f000 f97d 	bl	d59cc <_Z16_fetch_usbserialv>
   d56d2:	6803      	ldr	r3, [r0, #0]
   d56d4:	691b      	ldr	r3, [r3, #16]
   d56d6:	4798      	blx	r3
   d56d8:	2800      	cmp	r0, #0
   d56da:	dd01      	ble.n	d56e0 <serialEventRun+0x18>
        serialEvent();
   d56dc:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d56e0:	4b06      	ldr	r3, [pc, #24]	; (d56fc <serialEventRun+0x34>)
   d56e2:	b143      	cbz	r3, d56f6 <serialEventRun+0x2e>
   d56e4:	f000 f9f0 	bl	d5ac8 <_Z22__fetch_global_Serial1v>
   d56e8:	6803      	ldr	r3, [r0, #0]
   d56ea:	691b      	ldr	r3, [r3, #16]
   d56ec:	4798      	blx	r3
   d56ee:	2800      	cmp	r0, #0
   d56f0:	dd01      	ble.n	d56f6 <serialEventRun+0x2e>
        serialEvent1();
   d56f2:	f3af 8000 	nop.w
}
   d56f6:	bd08      	pop	{r3, pc}
	...

000d5700 <_post_loop>:
{
   d5700:	b508      	push	{r3, lr}
	serialEventRun();
   d5702:	f7ff ffe1 	bl	d56c8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5706:	f7ff fbc1 	bl	d4e8c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d570a:	4b01      	ldr	r3, [pc, #4]	; (d5710 <_post_loop+0x10>)
   d570c:	6018      	str	r0, [r3, #0]
}
   d570e:	bd08      	pop	{r3, pc}
   d5710:	2003e7d4 	.word	0x2003e7d4

000d5714 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5714:	4802      	ldr	r0, [pc, #8]	; (d5720 <_Z33system_initialize_user_backup_ramv+0xc>)
   d5716:	4a03      	ldr	r2, [pc, #12]	; (d5724 <_Z33system_initialize_user_backup_ramv+0x10>)
   d5718:	4903      	ldr	r1, [pc, #12]	; (d5728 <_Z33system_initialize_user_backup_ramv+0x14>)
   d571a:	1a12      	subs	r2, r2, r0
   d571c:	f001 bce8 	b.w	d70f0 <memcpy>
   d5720:	2003f400 	.word	0x2003f400
   d5724:	2003f404 	.word	0x2003f404
   d5728:	000d7bb0 	.word	0x000d7bb0

000d572c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d572c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d572e:	2300      	movs	r3, #0
   d5730:	9300      	str	r3, [sp, #0]
   d5732:	461a      	mov	r2, r3
   d5734:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5738:	f7ff fcf2 	bl	d5120 <system_ctrl_set_result>
}
   d573c:	b003      	add	sp, #12
   d573e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5744 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d5744:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5746:	8843      	ldrh	r3, [r0, #2]
   d5748:	2b0a      	cmp	r3, #10
   d574a:	d008      	beq.n	d575e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d574c:	2b50      	cmp	r3, #80	; 0x50
   d574e:	d10b      	bne.n	d5768 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d5750:	4b09      	ldr	r3, [pc, #36]	; (d5778 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5752:	681b      	ldr	r3, [r3, #0]
   d5754:	b14b      	cbz	r3, d576a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d5756:	b003      	add	sp, #12
   d5758:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d575c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d575e:	f7ff ffe5 	bl	d572c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d5762:	b003      	add	sp, #12
   d5764:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5768:	2300      	movs	r3, #0
   d576a:	9300      	str	r3, [sp, #0]
   d576c:	461a      	mov	r2, r3
   d576e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5772:	f7ff fcd5 	bl	d5120 <system_ctrl_set_result>
}
   d5776:	e7f4      	b.n	d5762 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d5778:	2003e688 	.word	0x2003e688

000d577c <module_user_init_hook>:
{
   d577c:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d577e:	4c12      	ldr	r4, [pc, #72]	; (d57c8 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5780:	4812      	ldr	r0, [pc, #72]	; (d57cc <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5782:	4d13      	ldr	r5, [pc, #76]	; (d57d0 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5784:	2100      	movs	r1, #0
   d5786:	f7ff fd65 	bl	d5254 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d578a:	6823      	ldr	r3, [r4, #0]
   d578c:	42ab      	cmp	r3, r5
   d578e:	4b11      	ldr	r3, [pc, #68]	; (d57d4 <module_user_init_hook+0x58>)
   d5790:	bf0c      	ite	eq
   d5792:	2201      	moveq	r2, #1
   d5794:	2200      	movne	r2, #0
   d5796:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5798:	d002      	beq.n	d57a0 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d579a:	f7ff ffbb 	bl	d5714 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d579e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d57a0:	f7ff fb6c 	bl	d4e7c <HAL_RNG_GetRandomNumber>
   d57a4:	4604      	mov	r4, r0
    srand(seed);
   d57a6:	f001 fcb9 	bl	d711c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d57aa:	4b0b      	ldr	r3, [pc, #44]	; (d57d8 <module_user_init_hook+0x5c>)
   d57ac:	b113      	cbz	r3, d57b4 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d57ae:	4620      	mov	r0, r4
   d57b0:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d57b4:	2100      	movs	r1, #0
   d57b6:	4808      	ldr	r0, [pc, #32]	; (d57d8 <module_user_init_hook+0x5c>)
   d57b8:	f7ff fd24 	bl	d5204 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d57bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d57c0:	4806      	ldr	r0, [pc, #24]	; (d57dc <module_user_init_hook+0x60>)
   d57c2:	2100      	movs	r1, #0
   d57c4:	f7ff bca2 	b.w	d510c <system_ctrl_set_app_request_handler>
   d57c8:	2003f400 	.word	0x2003f400
   d57cc:	000d56bd 	.word	0x000d56bd
   d57d0:	9a271c1e 	.word	0x9a271c1e
   d57d4:	2003e684 	.word	0x2003e684
   d57d8:	00000000 	.word	0x00000000
   d57dc:	000d5745 	.word	0x000d5745

000d57e0 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   d57e0:	4770      	bx	lr

000d57e2 <_ZN9IPAddressD0Ev>:
   d57e2:	b510      	push	{r4, lr}
   d57e4:	2118      	movs	r1, #24
   d57e6:	4604      	mov	r4, r0
   d57e8:	f000 fea1 	bl	d652e <_ZdlPvj>
   d57ec:	4620      	mov	r0, r4
   d57ee:	bd10      	pop	{r4, pc}

000d57f0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d57f0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d57f2:	7d03      	ldrb	r3, [r0, #20]
   d57f4:	2b06      	cmp	r3, #6
{
   d57f6:	b08d      	sub	sp, #52	; 0x34
   d57f8:	460e      	mov	r6, r1
   d57fa:	f100 0704 	add.w	r7, r0, #4
   d57fe:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d5802:	d012      	beq.n	d582a <_ZNK9IPAddress7printToER5Print+0x3a>
   d5804:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   d5808:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d580c:	220a      	movs	r2, #10
   d580e:	4630      	mov	r0, r6
   d5810:	f7ff fe13 	bl	d543a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5814:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5816:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d5818:	d019      	beq.n	d584e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d581a:	2c00      	cmp	r4, #0
   d581c:	d0f4      	beq.n	d5808 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d581e:	212e      	movs	r1, #46	; 0x2e
   d5820:	4630      	mov	r0, r6
   d5822:	f7ff fdf1 	bl	d5408 <_ZN5Print5printEc>
   d5826:	4404      	add	r4, r0
   d5828:	e7ee      	b.n	d5808 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d582a:	232f      	movs	r3, #47	; 0x2f
   d582c:	466a      	mov	r2, sp
   d582e:	4639      	mov	r1, r7
   d5830:	200a      	movs	r0, #10
		buf[0] = 0;
   d5832:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5836:	f7ff fb41 	bl	d4ebc <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d583a:	4668      	mov	r0, sp
   d583c:	f001 fc9c 	bl	d7178 <strlen>
   d5840:	6833      	ldr	r3, [r6, #0]
   d5842:	4602      	mov	r2, r0
   d5844:	68db      	ldr	r3, [r3, #12]
   d5846:	4669      	mov	r1, sp
   d5848:	4630      	mov	r0, r6
   d584a:	4798      	blx	r3
   d584c:	4604      	mov	r4, r0
    }
    return n;
}
   d584e:	4620      	mov	r0, r4
   d5850:	b00d      	add	sp, #52	; 0x34
   d5852:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5854 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d5854:	b510      	push	{r4, lr}
   d5856:	4b05      	ldr	r3, [pc, #20]	; (d586c <_ZN9IPAddressC1Ev+0x18>)
   d5858:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d585a:	2211      	movs	r2, #17
   d585c:	f840 3b04 	str.w	r3, [r0], #4
   d5860:	2100      	movs	r1, #0
   d5862:	f001 fc53 	bl	d710c <memset>
}
   d5866:	4620      	mov	r0, r4
   d5868:	bd10      	pop	{r4, pc}
   d586a:	bf00      	nop
   d586c:	000d77fc 	.word	0x000d77fc

000d5870 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d5870:	4603      	mov	r3, r0
   d5872:	4a07      	ldr	r2, [pc, #28]	; (d5890 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5874:	b510      	push	{r4, lr}
   d5876:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d587a:	f101 0210 	add.w	r2, r1, #16
   d587e:	f851 4b04 	ldr.w	r4, [r1], #4
   d5882:	f843 4b04 	str.w	r4, [r3], #4
   d5886:	4291      	cmp	r1, r2
   d5888:	d1f9      	bne.n	d587e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d588a:	780a      	ldrb	r2, [r1, #0]
   d588c:	701a      	strb	r2, [r3, #0]
}
   d588e:	bd10      	pop	{r4, pc}
   d5890:	000d77fc 	.word	0x000d77fc

000d5894 <_ZNK9IPAddresscvbEv>:
    if (version() == 4) {
   d5894:	7d03      	ldrb	r3, [r0, #20]
   d5896:	2b04      	cmp	r3, #4
   d5898:	d104      	bne.n	d58a4 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   d589a:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d589c:	3800      	subs	r0, #0
   d589e:	bf18      	it	ne
   d58a0:	2001      	movne	r0, #1
   d58a2:	4770      	bx	lr
    } else if (version() == 6) {
   d58a4:	2b06      	cmp	r3, #6
   d58a6:	d107      	bne.n	d58b8 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d58a8:	6843      	ldr	r3, [r0, #4]
   d58aa:	b93b      	cbnz	r3, d58bc <_ZNK9IPAddresscvbEv+0x28>
   d58ac:	6883      	ldr	r3, [r0, #8]
   d58ae:	b92b      	cbnz	r3, d58bc <_ZNK9IPAddresscvbEv+0x28>
   d58b0:	68c3      	ldr	r3, [r0, #12]
   d58b2:	b91b      	cbnz	r3, d58bc <_ZNK9IPAddresscvbEv+0x28>
   d58b4:	6900      	ldr	r0, [r0, #16]
   d58b6:	e7f1      	b.n	d589c <_ZNK9IPAddresscvbEv+0x8>
        return false;
   d58b8:	2000      	movs	r0, #0
   d58ba:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d58bc:	2001      	movs	r0, #1
}
   d58be:	4770      	bx	lr

000d58c0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d58c0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d58c2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d58c6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d58ca:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d58ce:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d58d2:	2304      	movs	r3, #4
   d58d4:	6041      	str	r1, [r0, #4]
   d58d6:	7503      	strb	r3, [r0, #20]
}
   d58d8:	bd10      	pop	{r4, pc}
	...

000d58dc <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   d58dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d58de:	4d04      	ldr	r5, [pc, #16]	; (d58f0 <_ZN9IPAddressC1Ehhhh+0x14>)
   d58e0:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   d58e2:	f89d 5018 	ldrb.w	r5, [sp, #24]
   d58e6:	9500      	str	r5, [sp, #0]
   d58e8:	f7ff ffea 	bl	d58c0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d58ec:	b003      	add	sp, #12
   d58ee:	bd30      	pop	{r4, r5, pc}
   d58f0:	000d77fc 	.word	0x000d77fc

000d58f4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d58f4:	b513      	push	{r0, r1, r4, lr}
   d58f6:	4b05      	ldr	r3, [pc, #20]	; (d590c <_ZN9IPAddressC1EPKh+0x18>)
   d58f8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d58fa:	78cb      	ldrb	r3, [r1, #3]
   d58fc:	9300      	str	r3, [sp, #0]
   d58fe:	788b      	ldrb	r3, [r1, #2]
   d5900:	784a      	ldrb	r2, [r1, #1]
   d5902:	7809      	ldrb	r1, [r1, #0]
   d5904:	f7ff ffdc 	bl	d58c0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d5908:	b002      	add	sp, #8
   d590a:	bd10      	pop	{r4, pc}
   d590c:	000d77fc 	.word	0x000d77fc

000d5910 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5910:	7441      	strb	r1, [r0, #17]
}
   d5912:	4770      	bx	lr

000d5914 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5914:	4770      	bx	lr

000d5916 <_ZN9USBSerial4readEv>:
{
   d5916:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5918:	2100      	movs	r1, #0
   d591a:	7c00      	ldrb	r0, [r0, #16]
   d591c:	f7ff fbbe 	bl	d509c <HAL_USB_USART_Receive_Data>
}
   d5920:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5924:	bd08      	pop	{r3, pc}

000d5926 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d5926:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5928:	2101      	movs	r1, #1
   d592a:	7c00      	ldrb	r0, [r0, #16]
   d592c:	f7ff fbb6 	bl	d509c <HAL_USB_USART_Receive_Data>
}
   d5930:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5934:	bd08      	pop	{r3, pc}

000d5936 <_ZN9USBSerial17availableForWriteEv>:
{
   d5936:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5938:	7c00      	ldrb	r0, [r0, #16]
   d593a:	f7ff fba7 	bl	d508c <HAL_USB_USART_Available_Data_For_Write>
}
   d593e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5942:	bd08      	pop	{r3, pc}

000d5944 <_ZN9USBSerial9availableEv>:
{
   d5944:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5946:	7c00      	ldrb	r0, [r0, #16]
   d5948:	f7ff fb98 	bl	d507c <HAL_USB_USART_Available_Data>
}
   d594c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5950:	bd08      	pop	{r3, pc}

000d5952 <_ZN9USBSerial5writeEh>:
{
   d5952:	b513      	push	{r0, r1, r4, lr}
   d5954:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5956:	7c00      	ldrb	r0, [r0, #16]
{
   d5958:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d595a:	f7ff fb97 	bl	d508c <HAL_USB_USART_Available_Data_For_Write>
   d595e:	2800      	cmp	r0, #0
   d5960:	9901      	ldr	r1, [sp, #4]
   d5962:	dc01      	bgt.n	d5968 <_ZN9USBSerial5writeEh+0x16>
   d5964:	7c60      	ldrb	r0, [r4, #17]
   d5966:	b120      	cbz	r0, d5972 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5968:	7c20      	ldrb	r0, [r4, #16]
   d596a:	f7ff fb9f 	bl	d50ac <HAL_USB_USART_Send_Data>
   d596e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d5972:	b002      	add	sp, #8
   d5974:	bd10      	pop	{r4, pc}

000d5976 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d5976:	7c00      	ldrb	r0, [r0, #16]
   d5978:	f7ff bba0 	b.w	d50bc <HAL_USB_USART_Flush_Data>

000d597c <_ZN9USBSerialD0Ev>:
   d597c:	b510      	push	{r4, lr}
   d597e:	2114      	movs	r1, #20
   d5980:	4604      	mov	r4, r0
   d5982:	f000 fdd4 	bl	d652e <_ZdlPvj>
   d5986:	4620      	mov	r0, r4
   d5988:	bd10      	pop	{r4, pc}
	...

000d598c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d598c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d598e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5992:	4604      	mov	r4, r0
   d5994:	4608      	mov	r0, r1
   d5996:	2100      	movs	r1, #0
   d5998:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d599c:	4b04      	ldr	r3, [pc, #16]	; (d59b0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d599e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d59a0:	2301      	movs	r3, #1
  _serial = serial;
   d59a2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d59a4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d59a6:	4611      	mov	r1, r2
   d59a8:	f7ff fb58 	bl	d505c <HAL_USB_USART_Init>
}
   d59ac:	4620      	mov	r0, r4
   d59ae:	bd10      	pop	{r4, pc}
   d59b0:	000d7810 	.word	0x000d7810

000d59b4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d59b4:	7c00      	ldrb	r0, [r0, #16]
   d59b6:	2200      	movs	r2, #0
   d59b8:	f7ff bb58 	b.w	d506c <HAL_USB_USART_Begin>

000d59bc <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d59bc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d59be:	2214      	movs	r2, #20
{
   d59c0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d59c2:	2100      	movs	r1, #0
   d59c4:	f001 fba2 	bl	d710c <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d59c8:	4620      	mov	r0, r4
   d59ca:	bd10      	pop	{r4, pc}

000d59cc <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d59cc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d59ce:	4c10      	ldr	r4, [pc, #64]	; (d5a10 <_Z16_fetch_usbserialv+0x44>)
{
   d59d0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d59d2:	a803      	add	r0, sp, #12
   d59d4:	f7ff fff2 	bl	d59bc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d59d8:	7821      	ldrb	r1, [r4, #0]
   d59da:	f3bf 8f5b 	dmb	ish
   d59de:	f011 0101 	ands.w	r1, r1, #1
   d59e2:	d111      	bne.n	d5a08 <_Z16_fetch_usbserialv+0x3c>
   d59e4:	4620      	mov	r0, r4
   d59e6:	9101      	str	r1, [sp, #4]
   d59e8:	f7fe fb5b 	bl	d40a2 <__cxa_guard_acquire>
   d59ec:	9901      	ldr	r1, [sp, #4]
   d59ee:	b158      	cbz	r0, d5a08 <_Z16_fetch_usbserialv+0x3c>
   d59f0:	aa03      	add	r2, sp, #12
   d59f2:	4808      	ldr	r0, [pc, #32]	; (d5a14 <_Z16_fetch_usbserialv+0x48>)
   d59f4:	f7ff ffca 	bl	d598c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d59f8:	4620      	mov	r0, r4
   d59fa:	f7fe fb57 	bl	d40ac <__cxa_guard_release>
   d59fe:	4a06      	ldr	r2, [pc, #24]	; (d5a18 <_Z16_fetch_usbserialv+0x4c>)
   d5a00:	4906      	ldr	r1, [pc, #24]	; (d5a1c <_Z16_fetch_usbserialv+0x50>)
   d5a02:	4804      	ldr	r0, [pc, #16]	; (d5a14 <_Z16_fetch_usbserialv+0x48>)
   d5a04:	f000 fd8e 	bl	d6524 <__aeabi_atexit>
	return _usbserial;
}
   d5a08:	4802      	ldr	r0, [pc, #8]	; (d5a14 <_Z16_fetch_usbserialv+0x48>)
   d5a0a:	b008      	add	sp, #32
   d5a0c:	bd10      	pop	{r4, pc}
   d5a0e:	bf00      	nop
   d5a10:	2003e68c 	.word	0x2003e68c
   d5a14:	2003e690 	.word	0x2003e690
   d5a18:	2003e3a0 	.word	0x2003e3a0
   d5a1c:	000d5915 	.word	0x000d5915

000d5a20 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d5a20:	4770      	bx	lr

000d5a22 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5a22:	7441      	strb	r1, [r0, #17]
}
   d5a24:	4770      	bx	lr

000d5a26 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d5a26:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d5a28:	7c00      	ldrb	r0, [r0, #16]
   d5a2a:	f7ff fa97 	bl	d4f5c <hal_usart_available_data_for_write>
}
   d5a2e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5a32:	bd08      	pop	{r3, pc}

000d5a34 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5a34:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d5a36:	7c00      	ldrb	r0, [r0, #16]
   d5a38:	f7ff fa68 	bl	d4f0c <hal_usart_available>
}
   d5a3c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5a40:	bd08      	pop	{r3, pc}

000d5a42 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5a42:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d5a44:	7c00      	ldrb	r0, [r0, #16]
   d5a46:	f7ff fa71 	bl	d4f2c <hal_usart_peek>
}
   d5a4a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5a4e:	bd08      	pop	{r3, pc}

000d5a50 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5a50:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d5a52:	7c00      	ldrb	r0, [r0, #16]
   d5a54:	f7ff fa62 	bl	d4f1c <hal_usart_read>
}
   d5a58:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5a5c:	bd08      	pop	{r3, pc}

000d5a5e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d5a5e:	7c00      	ldrb	r0, [r0, #16]
   d5a60:	f7ff ba6c 	b.w	d4f3c <hal_usart_flush>

000d5a64 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5a64:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5a66:	7c45      	ldrb	r5, [r0, #17]
{
   d5a68:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5a6a:	b12d      	cbz	r5, d5a78 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d5a6c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5a6e:	b003      	add	sp, #12
   d5a70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d5a74:	f7ff ba42 	b.w	d4efc <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5a78:	7c00      	ldrb	r0, [r0, #16]
   d5a7a:	9101      	str	r1, [sp, #4]
   d5a7c:	f7ff fa6e 	bl	d4f5c <hal_usart_available_data_for_write>
   d5a80:	2800      	cmp	r0, #0
   d5a82:	9901      	ldr	r1, [sp, #4]
   d5a84:	dcf2      	bgt.n	d5a6c <_ZN11USARTSerial5writeEh+0x8>
}
   d5a86:	4628      	mov	r0, r5
   d5a88:	b003      	add	sp, #12
   d5a8a:	bd30      	pop	{r4, r5, pc}

000d5a8c <_ZN11USARTSerialD0Ev>:
   d5a8c:	b510      	push	{r4, lr}
   d5a8e:	2114      	movs	r1, #20
   d5a90:	4604      	mov	r4, r0
   d5a92:	f000 fd4c 	bl	d652e <_ZdlPvj>
   d5a96:	4620      	mov	r0, r4
   d5a98:	bd10      	pop	{r4, pc}
	...

000d5a9c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d5a9c:	b510      	push	{r4, lr}
   d5a9e:	f04f 0c00 	mov.w	ip, #0
   d5aa2:	4604      	mov	r4, r0
   d5aa4:	4608      	mov	r0, r1
   d5aa6:	4611      	mov	r1, r2
   d5aa8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5aac:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d5ab0:	4a04      	ldr	r2, [pc, #16]	; (d5ac4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d5ab2:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d5ab4:	2201      	movs	r2, #1
  _serial = serial;
   d5ab6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5ab8:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d5aba:	461a      	mov	r2, r3
   d5abc:	f7ff fa16 	bl	d4eec <hal_usart_init>
}
   d5ac0:	4620      	mov	r0, r4
   d5ac2:	bd10      	pop	{r4, pc}
   d5ac4:	000d7840 	.word	0x000d7840

000d5ac8 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5ac8:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5aca:	4c0e      	ldr	r4, [pc, #56]	; (d5b04 <_Z22__fetch_global_Serial1v+0x3c>)
   d5acc:	7821      	ldrb	r1, [r4, #0]
   d5ace:	f3bf 8f5b 	dmb	ish
   d5ad2:	f011 0101 	ands.w	r1, r1, #1
   d5ad6:	d112      	bne.n	d5afe <_Z22__fetch_global_Serial1v+0x36>
   d5ad8:	4620      	mov	r0, r4
   d5ada:	9101      	str	r1, [sp, #4]
   d5adc:	f7fe fae1 	bl	d40a2 <__cxa_guard_acquire>
   d5ae0:	9901      	ldr	r1, [sp, #4]
   d5ae2:	b160      	cbz	r0, d5afe <_Z22__fetch_global_Serial1v+0x36>
   d5ae4:	4a08      	ldr	r2, [pc, #32]	; (d5b08 <_Z22__fetch_global_Serial1v+0x40>)
   d5ae6:	4b09      	ldr	r3, [pc, #36]	; (d5b0c <_Z22__fetch_global_Serial1v+0x44>)
   d5ae8:	4809      	ldr	r0, [pc, #36]	; (d5b10 <_Z22__fetch_global_Serial1v+0x48>)
   d5aea:	f7ff ffd7 	bl	d5a9c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d5aee:	4620      	mov	r0, r4
   d5af0:	f7fe fadc 	bl	d40ac <__cxa_guard_release>
   d5af4:	4a07      	ldr	r2, [pc, #28]	; (d5b14 <_Z22__fetch_global_Serial1v+0x4c>)
   d5af6:	4908      	ldr	r1, [pc, #32]	; (d5b18 <_Z22__fetch_global_Serial1v+0x50>)
   d5af8:	4805      	ldr	r0, [pc, #20]	; (d5b10 <_Z22__fetch_global_Serial1v+0x48>)
   d5afa:	f000 fd13 	bl	d6524 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5afe:	4804      	ldr	r0, [pc, #16]	; (d5b10 <_Z22__fetch_global_Serial1v+0x48>)
   d5b00:	b002      	add	sp, #8
   d5b02:	bd10      	pop	{r4, pc}
   d5b04:	2003e6a4 	.word	0x2003e6a4
   d5b08:	2003e6a8 	.word	0x2003e6a8
   d5b0c:	2003e72c 	.word	0x2003e72c
   d5b10:	2003e7b0 	.word	0x2003e7b0
   d5b14:	2003e3a0 	.word	0x2003e3a0
   d5b18:	000d5a21 	.word	0x000d5a21

000d5b1c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d5b1c:	4770      	bx	lr

000d5b1e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5b1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5b20:	4606      	mov	r6, r0
   d5b22:	4615      	mov	r5, r2
   d5b24:	460c      	mov	r4, r1
   d5b26:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5b28:	42bc      	cmp	r4, r7
   d5b2a:	d006      	beq.n	d5b3a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5b2c:	6833      	ldr	r3, [r6, #0]
   d5b2e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5b32:	689b      	ldr	r3, [r3, #8]
   d5b34:	4630      	mov	r0, r6
   d5b36:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d5b38:	e7f6      	b.n	d5b28 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d5b3a:	4628      	mov	r0, r5
   d5b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5b3e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d5b3e:	7c00      	ldrb	r0, [r0, #16]
   d5b40:	2200      	movs	r2, #0
   d5b42:	f7ff ba13 	b.w	d4f6c <hal_i2c_write>

000d5b46 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d5b46:	7c00      	ldrb	r0, [r0, #16]
   d5b48:	2100      	movs	r1, #0
   d5b4a:	f7ff ba17 	b.w	d4f7c <hal_i2c_available>

000d5b4e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d5b4e:	7c00      	ldrb	r0, [r0, #16]
   d5b50:	2100      	movs	r1, #0
   d5b52:	f7ff ba1b 	b.w	d4f8c <hal_i2c_read>

000d5b56 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d5b56:	7c00      	ldrb	r0, [r0, #16]
   d5b58:	2100      	movs	r1, #0
   d5b5a:	f7ff ba1f 	b.w	d4f9c <hal_i2c_peek>

000d5b5e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d5b5e:	7c00      	ldrb	r0, [r0, #16]
   d5b60:	2100      	movs	r1, #0
   d5b62:	f7ff ba23 	b.w	d4fac <hal_i2c_flush>

000d5b66 <_ZN7TwoWireD0Ev>:
   d5b66:	b510      	push	{r4, lr}
   d5b68:	2114      	movs	r1, #20
   d5b6a:	4604      	mov	r4, r0
   d5b6c:	f000 fcdf 	bl	d652e <_ZdlPvj>
   d5b70:	4620      	mov	r0, r4
   d5b72:	bd10      	pop	{r4, pc}

000d5b74 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d5b74:	b510      	push	{r4, lr}
   d5b76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5b7a:	4604      	mov	r4, r0
   d5b7c:	4608      	mov	r0, r1
   d5b7e:	2100      	movs	r1, #0
   d5b80:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5b84:	4b03      	ldr	r3, [pc, #12]	; (d5b94 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d5b86:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d5b88:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d5b8a:	4611      	mov	r1, r2
   d5b8c:	f7ff fa1e 	bl	d4fcc <hal_i2c_init>
}
   d5b90:	4620      	mov	r0, r4
   d5b92:	bd10      	pop	{r4, pc}
   d5b94:	000d7870 	.word	0x000d7870

000d5b98 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d5b98:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d5b9a:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   d5b9c:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d5ba0:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d5ba2:	2201      	movs	r2, #1
   d5ba4:	f04f 33ff 	mov.w	r3, #4294967295
   d5ba8:	f10d 0107 	add.w	r1, sp, #7
   d5bac:	47a0      	blx	r4
}
   d5bae:	b002      	add	sp, #8
   d5bb0:	bd10      	pop	{r4, pc}

000d5bb2 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d5bb2:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d5bb4:	6803      	ldr	r3, [r0, #0]
   d5bb6:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d5bb8:	f04f 33ff 	mov.w	r3, #4294967295
   d5bbc:	46a4      	mov	ip, r4
}
   d5bbe:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d5bc2:	4760      	bx	ip

000d5bc4 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d5bc4:	b513      	push	{r0, r1, r4, lr}
   d5bc6:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   d5bc8:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d5bca:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   d5bce:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d5bd0:	f10d 0107 	add.w	r1, sp, #7
   d5bd4:	2201      	movs	r2, #1
   d5bd6:	47a0      	blx	r4
}
   d5bd8:	b002      	add	sp, #8
   d5bda:	bd10      	pop	{r4, pc}

000d5bdc <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   d5bdc:	4770      	bx	lr

000d5bde <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d5bde:	b538      	push	{r3, r4, r5, lr}
      }

    private:
      element_type*
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d5be0:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d5be2:	681a      	ldr	r2, [r3, #0]
   d5be4:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   d5be6:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   d5be8:	da10      	bge.n	d5c0c <_ZN9TCPClient9connectedEv+0x2e>
   d5bea:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d5bee:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d5bf2:	429a      	cmp	r2, r3
   d5bf4:	d10a      	bne.n	d5c0c <_ZN9TCPClient9connectedEv+0x2e>
    if (!rv) {
        rv = available();
   d5bf6:	6803      	ldr	r3, [r0, #0]
   d5bf8:	691b      	ldr	r3, [r3, #16]
   d5bfa:	4798      	blx	r3
        if (!rv) {
   d5bfc:	4604      	mov	r4, r0
   d5bfe:	b928      	cbnz	r0, d5c0c <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   d5c00:	682b      	ldr	r3, [r5, #0]
   d5c02:	4628      	mov	r0, r5
   d5c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5c06:	4798      	blx	r3
        rv = available();
   d5c08:	4620      	mov	r0, r4
        }
    }
    return rv;
}
   d5c0a:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   d5c0c:	2001      	movs	r0, #1
   d5c0e:	e7fc      	b.n	d5c0a <_ZN9TCPClient9connectedEv+0x2c>

000d5c10 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d5c10:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   d5c12:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   d5c14:	43c0      	mvns	r0, r0
   d5c16:	0fc0      	lsrs	r0, r0, #31
   d5c18:	4770      	bx	lr

000d5c1a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d5c1a:	4770      	bx	lr

000d5c1c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d5c1c:	4b06      	ldr	r3, [pc, #24]	; (d5c38 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d5c1e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d5c20:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d5c22:	f100 040c 	add.w	r4, r0, #12
	    ||
   d5c26:	d005      	beq.n	d5c34 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d5c28:	4608      	mov	r0, r1
   d5c2a:	f000 fc85 	bl	d6538 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d5c2e:	2800      	cmp	r0, #0
	return nullptr;
   d5c30:	bf08      	it	eq
   d5c32:	2400      	moveq	r4, #0
      }
   d5c34:	4620      	mov	r0, r4
   d5c36:	bd10      	pop	{r4, pc}
   d5c38:	000d77bc 	.word	0x000d77bc

000d5c3c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d5c3c:	b510      	push	{r4, lr}
   d5c3e:	21ac      	movs	r1, #172	; 0xac
   d5c40:	4604      	mov	r4, r0
   d5c42:	f000 fc74 	bl	d652e <_ZdlPvj>
   d5c46:	4620      	mov	r0, r4
   d5c48:	bd10      	pop	{r4, pc}

000d5c4a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d5c4a:	f7fe ba28 	b.w	d409e <_ZdlPv>

000d5c4e <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d5c4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   d5c52:	f04f 0800 	mov.w	r8, #0
   d5c56:	b086      	sub	sp, #24
   d5c58:	461d      	mov	r5, r3
   d5c5a:	f8c0 8004 	str.w	r8, [r0, #4]
   d5c5e:	4604      	mov	r4, r0
   d5c60:	460e      	mov	r6, r1
   d5c62:	4617      	mov	r7, r2
    struct timeval tv = {};
   d5c64:	4641      	mov	r1, r8
   d5c66:	2210      	movs	r2, #16
   d5c68:	a802      	add	r0, sp, #8
   d5c6a:	f001 fa4f 	bl	d710c <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   d5c6e:	1c6b      	adds	r3, r5, #1
   d5c70:	d009      	beq.n	d5c86 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   d5c72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d5c76:	fbb5 f3f0 	udiv	r3, r5, r0
   d5c7a:	e9cd 3802 	strd	r3, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d5c7e:	fb00 5313 	mls	r3, r0, r3, r5
   d5c82:	4358      	muls	r0, r3
   d5c84:	9004      	str	r0, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d5c86:	6960      	ldr	r0, [r4, #20]
   d5c88:	2310      	movs	r3, #16
   d5c8a:	9300      	str	r3, [sp, #0]
   d5c8c:	6800      	ldr	r0, [r0, #0]
   d5c8e:	ab02      	add	r3, sp, #8
   d5c90:	f241 0205 	movw	r2, #4101	; 0x1005
   d5c94:	f640 71ff 	movw	r1, #4095	; 0xfff
   d5c98:	f7ff f9a0 	bl	d4fdc <sock_setsockopt>
    if (ret < 0) {
   d5c9c:	2800      	cmp	r0, #0
   d5c9e:	da07      	bge.n	d5cb0 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   d5ca0:	f7ff fad0 	bl	d5244 <__errno>
   d5ca4:	6803      	ldr	r3, [r0, #0]
   d5ca6:	6063      	str	r3, [r4, #4]
        return 0;
   d5ca8:	2000      	movs	r0, #0
}
   d5caa:	b006      	add	sp, #24
   d5cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   d5cb0:	6960      	ldr	r0, [r4, #20]
   d5cb2:	2300      	movs	r3, #0
   d5cb4:	6800      	ldr	r0, [r0, #0]
   d5cb6:	463a      	mov	r2, r7
   d5cb8:	4631      	mov	r1, r6
   d5cba:	f7ff f9af 	bl	d501c <sock_send>
    if (ret < 0) {
   d5cbe:	1e03      	subs	r3, r0, #0
   d5cc0:	dbee      	blt.n	d5ca0 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   d5cc2:	4618      	mov	r0, r3
   d5cc4:	e7f1      	b.n	d5caa <_ZN9TCPClient5writeEPKhjm+0x5c>
	...

000d5cc8 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d5cc8:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   d5cca:	6984      	ldr	r4, [r0, #24]
   d5ccc:	4b0a      	ldr	r3, [pc, #40]	; (d5cf8 <_ZN9TCPClientD1Ev+0x30>)
   d5cce:	6003      	str	r3, [r0, #0]
   d5cd0:	4605      	mov	r5, r0
   d5cd2:	b17c      	cbz	r4, d5cf4 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   d5cd4:	6863      	ldr	r3, [r4, #4]
   d5cd6:	3b01      	subs	r3, #1
   d5cd8:	6063      	str	r3, [r4, #4]
   d5cda:	b95b      	cbnz	r3, d5cf4 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   d5cdc:	6823      	ldr	r3, [r4, #0]
   d5cde:	4620      	mov	r0, r4
   d5ce0:	689b      	ldr	r3, [r3, #8]
   d5ce2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5ce4:	68a3      	ldr	r3, [r4, #8]
   d5ce6:	3b01      	subs	r3, #1
   d5ce8:	60a3      	str	r3, [r4, #8]
   d5cea:	b91b      	cbnz	r3, d5cf4 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d5cec:	6823      	ldr	r3, [r4, #0]
   d5cee:	4620      	mov	r0, r4
   d5cf0:	68db      	ldr	r3, [r3, #12]
   d5cf2:	4798      	blx	r3
   d5cf4:	4628      	mov	r0, r5
   d5cf6:	bd38      	pop	{r3, r4, r5, pc}
   d5cf8:	000d78cc 	.word	0x000d78cc

000d5cfc <_ZN9TCPClientD0Ev>:
   d5cfc:	b510      	push	{r4, lr}
   d5cfe:	4604      	mov	r4, r0
   d5d00:	f7ff ffe2 	bl	d5cc8 <_ZN9TCPClientD1Ev>
   d5d04:	4620      	mov	r0, r4
   d5d06:	211c      	movs	r1, #28
   d5d08:	f000 fc11 	bl	d652e <_ZdlPvj>
   d5d0c:	4620      	mov	r0, r4
   d5d0e:	bd10      	pop	{r4, pc}

000d5d10 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   d5d10:	b570      	push	{r4, r5, r6, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d5d12:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   d5d14:	4b05      	ldr	r3, [pc, #20]	; (d5d2c <_ZN9TCPClient8remoteIPEv+0x1c>)
   d5d16:	4604      	mov	r4, r0
   d5d18:	358c      	adds	r5, #140	; 0x8c
   d5d1a:	f844 3b04 	str.w	r3, [r4], #4
   d5d1e:	4606      	mov	r6, r0
   d5d20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5d22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5d24:	682b      	ldr	r3, [r5, #0]
   d5d26:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d5d28:	4630      	mov	r0, r6
   d5d2a:	bd70      	pop	{r4, r5, r6, pc}
   d5d2c:	000d77fc 	.word	0x000d77fc

000d5d30 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   d5d30:	b510      	push	{r4, lr}
   d5d32:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d5d34:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d5d38:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d5d3c:	429a      	cmp	r2, r3
int TCPClient::peek() {
   d5d3e:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d5d40:	d005      	beq.n	d5d4e <_ZN9TCPClient4peekEv+0x1e>
   d5d42:	6963      	ldr	r3, [r4, #20]
   d5d44:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d5d48:	4413      	add	r3, r2
   d5d4a:	7918      	ldrb	r0, [r3, #4]
}
   d5d4c:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d5d4e:	6803      	ldr	r3, [r0, #0]
   d5d50:	691b      	ldr	r3, [r3, #16]
   d5d52:	4798      	blx	r3
   d5d54:	2800      	cmp	r0, #0
   d5d56:	d1f4      	bne.n	d5d42 <_ZN9TCPClient4peekEv+0x12>
   d5d58:	f04f 30ff 	mov.w	r0, #4294967295
   d5d5c:	e7f6      	b.n	d5d4c <_ZN9TCPClient4peekEv+0x1c>

000d5d5e <_ZN9TCPClient4readEv>:
int TCPClient::read() {
   d5d5e:	b510      	push	{r4, lr}
   d5d60:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d5d62:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d5d66:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d5d6a:	429a      	cmp	r2, r3
int TCPClient::read() {
   d5d6c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d5d6e:	d008      	beq.n	d5d82 <_ZN9TCPClient4readEv+0x24>
   d5d70:	6963      	ldr	r3, [r4, #20]
   d5d72:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d5d76:	1c51      	adds	r1, r2, #1
   d5d78:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   d5d7c:	4413      	add	r3, r2
   d5d7e:	7918      	ldrb	r0, [r3, #4]
}
   d5d80:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d5d82:	6803      	ldr	r3, [r0, #0]
   d5d84:	691b      	ldr	r3, [r3, #16]
   d5d86:	4798      	blx	r3
   d5d88:	2800      	cmp	r0, #0
   d5d8a:	d1f1      	bne.n	d5d70 <_ZN9TCPClient4readEv+0x12>
   d5d8c:	f04f 30ff 	mov.w	r0, #4294967295
   d5d90:	e7f6      	b.n	d5d80 <_ZN9TCPClient4readEv+0x22>

000d5d92 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   d5d92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5d94:	6943      	ldr	r3, [r0, #20]
   d5d96:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   d5d98:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d5d9c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d5da0:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   d5da2:	4605      	mov	r5, r0
   d5da4:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   d5da6:	d016      	beq.n	d5dd6 <_ZN9TCPClient4readEPhj+0x44>
   d5da8:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   d5daa:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d5dae:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d5db2:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d5db4:	42bc      	cmp	r4, r7
   d5db6:	bf28      	it	cs
   d5db8:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d5dba:	3304      	adds	r3, #4
   d5dbc:	4622      	mov	r2, r4
   d5dbe:	4419      	add	r1, r3
   d5dc0:	4630      	mov	r0, r6
   d5dc2:	f001 f995 	bl	d70f0 <memcpy>
   d5dc6:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d5dc8:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d5dcc:	4423      	add	r3, r4
   d5dce:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   d5dd2:	4620      	mov	r0, r4
   d5dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   d5dd6:	6803      	ldr	r3, [r0, #0]
   d5dd8:	691b      	ldr	r3, [r3, #16]
   d5dda:	4798      	blx	r3
   d5ddc:	2800      	cmp	r0, #0
   d5dde:	d1e3      	bne.n	d5da8 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   d5de0:	f04f 34ff 	mov.w	r4, #4294967295
   d5de4:	e7f5      	b.n	d5dd2 <_ZN9TCPClient4readEPhj+0x40>

000d5de6 <_ZN9TCPClient12flush_bufferEv>:
   d5de6:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d5de8:	2300      	movs	r3, #0
   d5dea:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d5dee:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d5df0:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   d5df4:	4770      	bx	lr

000d5df6 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d5df6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5dfa:	461f      	mov	r7, r3
    stop();
   d5dfc:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d5dfe:	460c      	mov	r4, r1
    stop();
   d5e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d5e02:	b08a      	sub	sp, #40	; 0x28
   d5e04:	4605      	mov	r5, r0
   d5e06:	4616      	mov	r6, r2
    stop();
   d5e08:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d5e0a:	7d23      	ldrb	r3, [r4, #20]
   d5e0c:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d5e10:	2b04      	cmp	r3, #4
   d5e12:	bf0c      	ite	eq
   d5e14:	2002      	moveq	r0, #2
   d5e16:	200a      	movne	r0, #10
   d5e18:	2206      	movs	r2, #6
   d5e1a:	2101      	movs	r1, #1
   d5e1c:	f7ff f906 	bl	d502c <sock_socket>
   d5e20:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d5e24:	696b      	ldr	r3, [r5, #20]
   d5e26:	681b      	ldr	r3, [r3, #0]
   d5e28:	2b00      	cmp	r3, #0
   d5e2a:	da08      	bge.n	d5e3e <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   d5e2c:	682b      	ldr	r3, [r5, #0]
   d5e2e:	4628      	mov	r0, r5
   d5e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d5e32:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   d5e34:	4798      	blx	r3
}
   d5e36:	4620      	mov	r0, r4
   d5e38:	b00a      	add	sp, #40	; 0x28
   d5e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   d5e3e:	4628      	mov	r0, r5
   d5e40:	f7ff ffd1 	bl	d5de6 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   d5e44:	b1b7      	cbz	r7, d5e74 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   d5e46:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d5e48:	a903      	add	r1, sp, #12
   d5e4a:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   d5e4c:	9303      	str	r3, [sp, #12]
   d5e4e:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d5e52:	f7ff f80b 	bl	d4e6c <if_index_to_name>
   d5e56:	2800      	cmp	r0, #0
   d5e58:	d1e8      	bne.n	d5e2c <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d5e5a:	6968      	ldr	r0, [r5, #20]
   d5e5c:	2306      	movs	r3, #6
   d5e5e:	9300      	str	r3, [sp, #0]
   d5e60:	6800      	ldr	r0, [r0, #0]
   d5e62:	ab03      	add	r3, sp, #12
   d5e64:	f241 020b 	movw	r2, #4107	; 0x100b
   d5e68:	f640 71ff 	movw	r1, #4095	; 0xfff
   d5e6c:	f7ff f8b6 	bl	d4fdc <sock_setsockopt>
   d5e70:	2800      	cmp	r0, #0
   d5e72:	d1db      	bne.n	d5e2c <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   d5e74:	221c      	movs	r2, #28
   d5e76:	2100      	movs	r1, #0
   d5e78:	a803      	add	r0, sp, #12
   d5e7a:	f001 f947 	bl	d710c <memset>
    if (ip.version() == 4) {
   d5e7e:	7d23      	ldrb	r3, [r4, #20]
   d5e80:	2b04      	cmp	r3, #4
   d5e82:	d11d      	bne.n	d5ec0 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   d5e84:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   d5e88:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   d5e8a:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   d5e8e:	f7ff f825 	bl	d4edc <inet_htons>
   d5e92:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d5e96:	6860      	ldr	r0, [r4, #4]
   d5e98:	f7ff f818 	bl	d4ecc <inet_htonl>
   d5e9c:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d5e9e:	696b      	ldr	r3, [r5, #20]
   d5ea0:	221c      	movs	r2, #28
   d5ea2:	6818      	ldr	r0, [r3, #0]
   d5ea4:	a903      	add	r1, sp, #12
   d5ea6:	f7ff f8a9 	bl	d4ffc <sock_connect>
   d5eaa:	2800      	cmp	r0, #0
   d5eac:	d1be      	bne.n	d5e2c <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   d5eae:	3404      	adds	r4, #4
   d5eb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5eb2:	696d      	ldr	r5, [r5, #20]
   d5eb4:	358c      	adds	r5, #140	; 0x8c
   d5eb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5eb8:	6823      	ldr	r3, [r4, #0]
   d5eba:	702b      	strb	r3, [r5, #0]
    return 1; // success
   d5ebc:	2401      	movs	r4, #1
   d5ebe:	e7ba      	b.n	d5e36 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   d5ec0:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   d5ec4:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   d5ec6:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   d5eca:	f7ff f807 	bl	d4edc <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d5ece:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   d5ed0:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d5ed4:	1d23      	adds	r3, r4, #4
   d5ed6:	f104 0714 	add.w	r7, r4, #20
   d5eda:	6818      	ldr	r0, [r3, #0]
   d5edc:	6859      	ldr	r1, [r3, #4]
   d5ede:	4632      	mov	r2, r6
   d5ee0:	c203      	stmia	r2!, {r0, r1}
   d5ee2:	3308      	adds	r3, #8
   d5ee4:	42bb      	cmp	r3, r7
   d5ee6:	4616      	mov	r6, r2
   d5ee8:	d1f7      	bne.n	d5eda <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   d5eea:	e7d8      	b.n	d5e9e <_ZN9TCPClient7connectE9IPAddresstm+0xa8>

000d5eec <_ZN9TCPClient9availableEv>:
{
   d5eec:	b530      	push	{r4, r5, lr}
   d5eee:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   d5ef0:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   d5ef4:	b08b      	sub	sp, #44	; 0x2c
   d5ef6:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   d5ef8:	b12b      	cbz	r3, d5f06 <_ZN9TCPClient9availableEv+0x1a>
   d5efa:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d5efe:	429a      	cmp	r2, r3
   d5f00:	d101      	bne.n	d5f06 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   d5f02:	f7ff ff70 	bl	d5de6 <_ZN9TCPClient12flush_bufferEv>
   d5f06:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   d5f08:	6808      	ldr	r0, [r1, #0]
   d5f0a:	2800      	cmp	r0, #0
   d5f0c:	db18      	blt.n	d5f40 <_ZN9TCPClient9availableEv+0x54>
   d5f0e:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
        if (d_->total < arraySize(d_->buffer)) {
   d5f12:	2d7f      	cmp	r5, #127	; 0x7f
   d5f14:	d814      	bhi.n	d5f40 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d5f16:	3104      	adds	r1, #4
   d5f18:	2308      	movs	r3, #8
   d5f1a:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d5f1e:	4429      	add	r1, r5
   d5f20:	f7ff f874 	bl	d500c <sock_recv>
            if (ret > 0) {
   d5f24:	2800      	cmp	r0, #0
   d5f26:	dd13      	ble.n	d5f50 <_ZN9TCPClient9availableEv+0x64>
   d5f28:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d5f2a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d5f2e:	b90a      	cbnz	r2, d5f34 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   d5f30:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d5f34:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   d5f36:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d5f3a:	4410      	add	r0, r2
   d5f3c:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   d5f40:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   d5f42:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   d5f46:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   d5f4a:	1ac0      	subs	r0, r0, r3
   d5f4c:	b00b      	add	sp, #44	; 0x2c
   d5f4e:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d5f50:	f7ff f978 	bl	d5244 <__errno>
   d5f54:	6803      	ldr	r3, [r0, #0]
   d5f56:	2b0b      	cmp	r3, #11
   d5f58:	d0f2      	beq.n	d5f40 <_ZN9TCPClient9availableEv+0x54>
   d5f5a:	f7ff f973 	bl	d5244 <__errno>
   d5f5e:	6803      	ldr	r3, [r0, #0]
   d5f60:	2b0b      	cmp	r3, #11
   d5f62:	d0ed      	beq.n	d5f40 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   d5f64:	2320      	movs	r3, #32
   d5f66:	2500      	movs	r5, #0
   d5f68:	e9cd 3502 	strd	r3, r5, [sp, #8]
   d5f6c:	f7ff f96a 	bl	d5244 <__errno>
   d5f70:	6803      	ldr	r3, [r0, #0]
   d5f72:	9301      	str	r3, [sp, #4]
   d5f74:	4b08      	ldr	r3, [pc, #32]	; (d5f98 <_ZN9TCPClient9availableEv+0xac>)
   d5f76:	4909      	ldr	r1, [pc, #36]	; (d5f9c <_ZN9TCPClient9availableEv+0xb0>)
   d5f78:	9300      	str	r3, [sp, #0]
   d5f7a:	aa02      	add	r2, sp, #8
   d5f7c:	462b      	mov	r3, r5
   d5f7e:	2032      	movs	r0, #50	; 0x32
   d5f80:	f7ff f8a4 	bl	d50cc <log_message>
                    sock_close(d_->sock);
   d5f84:	6963      	ldr	r3, [r4, #20]
   d5f86:	6818      	ldr	r0, [r3, #0]
   d5f88:	f7ff f830 	bl	d4fec <sock_close>
   d5f8c:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d5f8e:	f04f 32ff 	mov.w	r2, #4294967295
   d5f92:	601a      	str	r2, [r3, #0]
   d5f94:	e7d4      	b.n	d5f40 <_ZN9TCPClient9availableEv+0x54>
   d5f96:	bf00      	nop
   d5f98:	000d7897 	.word	0x000d7897
   d5f9c:	000d7890 	.word	0x000d7890

000d5fa0 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   d5fa0:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d5fa2:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   d5fa4:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d5fa6:	6818      	ldr	r0, [r3, #0]
   d5fa8:	2800      	cmp	r0, #0
   d5faa:	db01      	blt.n	d5fb0 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d5fac:	f7ff f81e 	bl	d4fec <sock_close>
   d5fb0:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   d5fb2:	f04f 32ff 	mov.w	r2, #4294967295
   d5fb6:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   d5fb8:	6960      	ldr	r0, [r4, #20]
   d5fba:	2211      	movs	r2, #17
   d5fbc:	2100      	movs	r1, #0
   d5fbe:	308c      	adds	r0, #140	; 0x8c
   d5fc0:	f001 f8a4 	bl	d710c <memset>
    flush_buffer();
   d5fc4:	4620      	mov	r0, r4
}
   d5fc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   d5fca:	f7ff bf0c 	b.w	d5de6 <_ZN9TCPClient12flush_bufferEv>

000d5fce <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   d5fce:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d5fd0:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   d5fd2:	4604      	mov	r4, r0
          total(0) {
   d5fd4:	6001      	str	r1, [r0, #0]
   d5fd6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   d5fda:	3088      	adds	r0, #136	; 0x88
   d5fdc:	f7ff fc3a 	bl	d5854 <_ZN9IPAddressC1Ev>
}
   d5fe0:	4620      	mov	r0, r4
   d5fe2:	bd10      	pop	{r4, pc}

000d5fe4 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   d5fe4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5fe6:	2300      	movs	r3, #0
   d5fe8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5fec:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   d5ff0:	4a0e      	ldr	r2, [pc, #56]	; (d602c <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   d5ff2:	6103      	str	r3, [r0, #16]
   d5ff4:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d5ff6:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   d5ff8:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5ffa:	20ac      	movs	r0, #172	; 0xac
   d5ffc:	9101      	str	r1, [sp, #4]
   d5ffe:	f7fe f84a 	bl	d4096 <_Znwj>
	  auto __pi = ::new (__mem)
   d6002:	1e05      	subs	r5, r0, #0
   d6004:	f105 060c 	add.w	r6, r5, #12
   d6008:	d008      	beq.n	d601c <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   d600a:	2301      	movs	r3, #1
   d600c:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d6010:	4b07      	ldr	r3, [pc, #28]	; (d6030 <_ZN9TCPClientC1Ei+0x4c>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d6012:	9901      	ldr	r1, [sp, #4]
   d6014:	602b      	str	r3, [r5, #0]
   d6016:	4630      	mov	r0, r6
   d6018:	f7ff ffd9 	bl	d5fce <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   d601c:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   d601e:	e9c4 6505 	strd	r6, r5, [r4, #20]
   d6022:	f7ff fee0 	bl	d5de6 <_ZN9TCPClient12flush_bufferEv>
}
   d6026:	b002      	add	sp, #8
   d6028:	bd70      	pop	{r4, r5, r6, pc}
   d602a:	bf00      	nop
   d602c:	000d78cc 	.word	0x000d78cc
   d6030:	000d78b0 	.word	0x000d78b0

000d6034 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   d6034:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d6036:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   d603a:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d603c:	f7ff ffd2 	bl	d5fe4 <_ZN9TCPClientC1Ei>
}
   d6040:	4620      	mov	r0, r4
   d6042:	bd10      	pop	{r4, pc}

000d6044 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   d6044:	b510      	push	{r4, lr}
   d6046:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d6048:	6800      	ldr	r0, [r0, #0]
   d604a:	2800      	cmp	r0, #0
   d604c:	db01      	blt.n	d6052 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d604e:	f7fe ffcd 	bl	d4fec <sock_close>
    }
}
   d6052:	4620      	mov	r0, r4
   d6054:	bd10      	pop	{r4, pc}

000d6056 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
   d6056:	300c      	adds	r0, #12
   d6058:	f7ff bff4 	b.w	d6044 <_ZN9TCPClient4DataD1Ev>

000d605c <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d605c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6060:	4698      	mov	r8, r3
    stop();
   d6062:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6064:	b093      	sub	sp, #76	; 0x4c
   d6066:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   d6068:	2400      	movs	r4, #0
    stop();
   d606a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d606c:	4606      	mov	r6, r0
   d606e:	4617      	mov	r7, r2
    stop();
   d6070:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d6072:	4628      	mov	r0, r5
   d6074:	466b      	mov	r3, sp
   d6076:	4622      	mov	r2, r4
   d6078:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   d607a:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d607c:	f7fe feae 	bl	d4ddc <netdb_getaddrinfo>
   d6080:	4605      	mov	r5, r0
   d6082:	2800      	cmp	r0, #0
   d6084:	d163      	bne.n	d614e <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   d6086:	9b00      	ldr	r3, [sp, #0]
   d6088:	2b00      	cmp	r3, #0
   d608a:	d04b      	beq.n	d6124 <_ZN9TCPClient7connectEPKctm+0xc8>
   d608c:	695b      	ldr	r3, [r3, #20]
   d608e:	2b00      	cmp	r3, #0
   d6090:	d048      	beq.n	d6124 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   d6092:	a806      	add	r0, sp, #24
   d6094:	f7ff fbde 	bl	d5854 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d6098:	9b00      	ldr	r3, [sp, #0]
   d609a:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d609c:	7863      	ldrb	r3, [r4, #1]
   d609e:	2b02      	cmp	r3, #2
   d60a0:	d104      	bne.n	d60ac <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d60a2:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d60a4:	a806      	add	r0, sp, #24
   d60a6:	f7ff f953 	bl	d5350 <_ZN9IPAddressaSIPKhEERS_T_>
        }
        if (port) {
   d60aa:	e026      	b.n	d60fa <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   d60ac:	2b0a      	cmp	r3, #10
   d60ae:	d124      	bne.n	d60fa <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   d60b0:	2211      	movs	r2, #17
   d60b2:	4629      	mov	r1, r5
   d60b4:	a801      	add	r0, sp, #4
   d60b6:	f001 f829 	bl	d710c <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d60ba:	68a3      	ldr	r3, [r4, #8]
   d60bc:	2b00      	cmp	r3, #0
   d60be:	d038      	beq.n	d6132 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d60c0:	f104 0308 	add.w	r3, r4, #8
   d60c4:	f10d 0c04 	add.w	ip, sp, #4
   d60c8:	3418      	adds	r4, #24
   d60ca:	6818      	ldr	r0, [r3, #0]
   d60cc:	6859      	ldr	r1, [r3, #4]
   d60ce:	4662      	mov	r2, ip
   d60d0:	c203      	stmia	r2!, {r0, r1}
   d60d2:	3308      	adds	r3, #8
   d60d4:	42a3      	cmp	r3, r4
   d60d6:	4694      	mov	ip, r2
   d60d8:	d1f7      	bne.n	d60ca <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   d60da:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d60dc:	a901      	add	r1, sp, #4
   d60de:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   d60e0:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d60e4:	f7ff fbc4 	bl	d5870 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
class IPAddress : public Printable {
   d60e8:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   d60ec:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d60f0:	ac07      	add	r4, sp, #28
   d60f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d60f4:	f8dc 3000 	ldr.w	r3, [ip]
   d60f8:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   d60fa:	a806      	add	r0, sp, #24
   d60fc:	f7ff fbca 	bl	d5894 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d6100:	b180      	cbz	r0, d6124 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   d6102:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   d6104:	ad07      	add	r5, sp, #28
   d6106:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d610a:	4b12      	ldr	r3, [pc, #72]	; (d6154 <_ZN9TCPClient7connectEPKctm+0xf8>)
   d610c:	930c      	str	r3, [sp, #48]	; 0x30
   d610e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6110:	ac0d      	add	r4, sp, #52	; 0x34
   d6112:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6114:	682b      	ldr	r3, [r5, #0]
   d6116:	7023      	strb	r3, [r4, #0]
   d6118:	463a      	mov	r2, r7
   d611a:	4643      	mov	r3, r8
   d611c:	a90c      	add	r1, sp, #48	; 0x30
   d611e:	4630      	mov	r0, r6
   d6120:	47c8      	blx	r9
   d6122:	4605      	mov	r5, r0
    SCOPE_GUARD({
   d6124:	9800      	ldr	r0, [sp, #0]
   d6126:	f7fe fe51 	bl	d4dcc <netdb_freeaddrinfo>
}
   d612a:	4628      	mov	r0, r5
   d612c:	b013      	add	sp, #76	; 0x4c
   d612e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d6132:	68e3      	ldr	r3, [r4, #12]
   d6134:	2b00      	cmp	r3, #0
   d6136:	d1c3      	bne.n	d60c0 <_ZN9TCPClient7connectEPKctm+0x64>
   d6138:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d613c:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d6140:	f7fe fec4 	bl	d4ecc <inet_htonl>
   d6144:	4581      	cmp	r9, r0
   d6146:	d1bb      	bne.n	d60c0 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   d6148:	f104 0114 	add.w	r1, r4, #20
   d614c:	e7aa      	b.n	d60a4 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d614e:	4625      	mov	r5, r4
   d6150:	e7e8      	b.n	d6124 <_ZN9TCPClient7connectEPKctm+0xc8>
   d6152:	bf00      	nop
   d6154:	000d77fc 	.word	0x000d77fc

000d6158 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6158:	2200      	movs	r2, #0
   d615a:	6840      	ldr	r0, [r0, #4]
   d615c:	4611      	mov	r1, r2
   d615e:	f7ff b801 	b.w	d5164 <network_ready>

000d6162 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6162:	2200      	movs	r2, #0
   d6164:	6840      	ldr	r0, [r0, #4]
   d6166:	4611      	mov	r1, r2
   d6168:	f7ff b81c 	b.w	d51a4 <network_listening>

000d616c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d616c:	2200      	movs	r2, #0
   d616e:	6840      	ldr	r0, [r0, #4]
   d6170:	4611      	mov	r1, r2
   d6172:	f7ff b827 	b.w	d51c4 <network_get_listen_timeout>

000d6176 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d6176:	6840      	ldr	r0, [r0, #4]
   d6178:	2200      	movs	r2, #0
   d617a:	f7ff b81b 	b.w	d51b4 <network_set_listen_timeout>

000d617e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d617e:	6840      	ldr	r0, [r0, #4]
   d6180:	2200      	movs	r2, #0
   d6182:	f081 0101 	eor.w	r1, r1, #1
   d6186:	f7ff b805 	b.w	d5194 <network_listen>

000d618a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d618a:	2300      	movs	r3, #0
   d618c:	6840      	ldr	r0, [r0, #4]
   d618e:	461a      	mov	r2, r3
   d6190:	4619      	mov	r1, r3
   d6192:	f7fe bff7 	b.w	d5184 <network_off>

000d6196 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d6196:	2200      	movs	r2, #0
   d6198:	6840      	ldr	r0, [r0, #4]
   d619a:	4611      	mov	r1, r2
   d619c:	f7fe bfd2 	b.w	d5144 <network_connecting>

000d61a0 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d61a0:	6840      	ldr	r0, [r0, #4]
   d61a2:	2200      	movs	r2, #0
   d61a4:	2102      	movs	r1, #2
   d61a6:	f7fe bfd5 	b.w	d5154 <network_disconnect>

000d61aa <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d61aa:	2300      	movs	r3, #0
   d61ac:	6840      	ldr	r0, [r0, #4]
   d61ae:	461a      	mov	r2, r3
   d61b0:	f7fe bfc0 	b.w	d5134 <network_connect>

000d61b4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d61b4:	4b02      	ldr	r3, [pc, #8]	; (d61c0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d61b6:	2204      	movs	r2, #4
   d61b8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d61ba:	4a02      	ldr	r2, [pc, #8]	; (d61c4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d61bc:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d61be:	4770      	bx	lr
   d61c0:	2003e7c4 	.word	0x2003e7c4
   d61c4:	000d7918 	.word	0x000d7918

000d61c8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d61c8:	2300      	movs	r3, #0
   d61ca:	6840      	ldr	r0, [r0, #4]
   d61cc:	461a      	mov	r2, r3
   d61ce:	f7fe bfb1 	b.w	d5134 <network_connect>

000d61d2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d61d2:	6840      	ldr	r0, [r0, #4]
   d61d4:	2200      	movs	r2, #0
   d61d6:	2102      	movs	r1, #2
   d61d8:	f7fe bfbc 	b.w	d5154 <network_disconnect>

000d61dc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d61dc:	2200      	movs	r2, #0
   d61de:	6840      	ldr	r0, [r0, #4]
   d61e0:	4611      	mov	r1, r2
   d61e2:	f7fe bfaf 	b.w	d5144 <network_connecting>

000d61e6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d61e6:	2200      	movs	r2, #0
   d61e8:	6840      	ldr	r0, [r0, #4]
   d61ea:	4611      	mov	r1, r2
   d61ec:	f7fe bfba 	b.w	d5164 <network_ready>

000d61f0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d61f0:	2300      	movs	r3, #0
   d61f2:	6840      	ldr	r0, [r0, #4]
   d61f4:	461a      	mov	r2, r3
   d61f6:	4619      	mov	r1, r3
   d61f8:	f7fe bfbc 	b.w	d5174 <network_on>

000d61fc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d61fc:	2300      	movs	r3, #0
   d61fe:	6840      	ldr	r0, [r0, #4]
   d6200:	461a      	mov	r2, r3
   d6202:	4619      	mov	r1, r3
   d6204:	f7fe bfbe 	b.w	d5184 <network_off>

000d6208 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d6208:	6840      	ldr	r0, [r0, #4]
   d620a:	2100      	movs	r1, #0
   d620c:	f7fe bfe2 	b.w	d51d4 <network_is_on>

000d6210 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d6210:	6840      	ldr	r0, [r0, #4]
   d6212:	2100      	movs	r1, #0
   d6214:	f7fe bfe6 	b.w	d51e4 <network_is_off>

000d6218 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6218:	6840      	ldr	r0, [r0, #4]
   d621a:	2200      	movs	r2, #0
   d621c:	f081 0101 	eor.w	r1, r1, #1
   d6220:	f7fe bfb8 	b.w	d5194 <network_listen>

000d6224 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6224:	6840      	ldr	r0, [r0, #4]
   d6226:	2200      	movs	r2, #0
   d6228:	f7fe bfc4 	b.w	d51b4 <network_set_listen_timeout>

000d622c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d622c:	2200      	movs	r2, #0
   d622e:	6840      	ldr	r0, [r0, #4]
   d6230:	4611      	mov	r1, r2
   d6232:	f7fe bfc7 	b.w	d51c4 <network_get_listen_timeout>

000d6236 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6236:	2200      	movs	r2, #0
   d6238:	6840      	ldr	r0, [r0, #4]
   d623a:	4611      	mov	r1, r2
   d623c:	f7fe bfb2 	b.w	d51a4 <network_listening>

000d6240 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6240:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6244:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d6246:	b095      	sub	sp, #84	; 0x54
   d6248:	4616      	mov	r6, r2
   d624a:	460d      	mov	r5, r1
   d624c:	4607      	mov	r7, r0
    IPAddress addr;
   d624e:	f7ff fb01 	bl	d5854 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d6252:	4621      	mov	r1, r4
   d6254:	2218      	movs	r2, #24
   d6256:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d6258:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d625a:	f000 ff57 	bl	d710c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d625e:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d6260:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6264:	4621      	mov	r1, r4
   d6266:	466b      	mov	r3, sp
   d6268:	aa0c      	add	r2, sp, #48	; 0x30
   d626a:	4630      	mov	r0, r6
   d626c:	f7fe fdb6 	bl	d4ddc <netdb_getaddrinfo>
    if (!r) {
   d6270:	4604      	mov	r4, r0
   d6272:	2800      	cmp	r0, #0
   d6274:	d14c      	bne.n	d6310 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6276:	4602      	mov	r2, r0
   d6278:	2101      	movs	r1, #1
   d627a:	6868      	ldr	r0, [r5, #4]
   d627c:	f7fe ff72 	bl	d5164 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6280:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6282:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6284:	4622      	mov	r2, r4
   d6286:	6868      	ldr	r0, [r5, #4]
   d6288:	f7fe ff6c 	bl	d5164 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d628c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d628e:	4681      	mov	r9, r0
        bool ok = false;
   d6290:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6292:	2e00      	cmp	r6, #0
   d6294:	d03c      	beq.n	d6310 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d6296:	2900      	cmp	r1, #0
   d6298:	d13a      	bne.n	d6310 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d629a:	6873      	ldr	r3, [r6, #4]
   d629c:	2b02      	cmp	r3, #2
   d629e:	d003      	beq.n	d62a8 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d62a0:	2b0a      	cmp	r3, #10
   d62a2:	d011      	beq.n	d62c8 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d62a4:	69f6      	ldr	r6, [r6, #28]
   d62a6:	e7f4      	b.n	d6292 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d62a8:	f1b8 0f00 	cmp.w	r8, #0
   d62ac:	d00a      	beq.n	d62c4 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d62ae:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d62b0:	a806      	add	r0, sp, #24
   d62b2:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d62b4:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d62b6:	f7ff fb1d 	bl	d58f4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d62ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d62bc:	1d3c      	adds	r4, r7, #4
   d62be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d62c0:	682b      	ldr	r3, [r5, #0]
   d62c2:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d62c4:	4641      	mov	r1, r8
   d62c6:	e7ed      	b.n	d62a4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d62c8:	f1b9 0f00 	cmp.w	r9, #0
   d62cc:	d101      	bne.n	d62d2 <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d62ce:	4649      	mov	r1, r9
   d62d0:	e7e8      	b.n	d62a4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d62d2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d62d4:	2210      	movs	r2, #16
   d62d6:	a801      	add	r0, sp, #4
   d62d8:	f000 ff18 	bl	d710c <memset>
                    a.v = 6;
   d62dc:	2306      	movs	r3, #6
   d62de:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d62e2:	ad01      	add	r5, sp, #4
   d62e4:	f104 0308 	add.w	r3, r4, #8
   d62e8:	3418      	adds	r4, #24
   d62ea:	6818      	ldr	r0, [r3, #0]
   d62ec:	6859      	ldr	r1, [r3, #4]
   d62ee:	462a      	mov	r2, r5
   d62f0:	c203      	stmia	r2!, {r0, r1}
   d62f2:	3308      	adds	r3, #8
   d62f4:	42a3      	cmp	r3, r4
   d62f6:	4615      	mov	r5, r2
   d62f8:	d1f7      	bne.n	d62ea <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d62fa:	a901      	add	r1, sp, #4
   d62fc:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d62fe:	ad07      	add	r5, sp, #28
   d6300:	f7ff fab6 	bl	d5870 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6304:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6306:	1d3c      	adds	r4, r7, #4
   d6308:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d630a:	682b      	ldr	r3, [r5, #0]
   d630c:	7023      	strb	r3, [r4, #0]
   d630e:	e7de      	b.n	d62ce <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6310:	9800      	ldr	r0, [sp, #0]
   d6312:	f7fe fd5b 	bl	d4dcc <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6316:	4638      	mov	r0, r7
   d6318:	b015      	add	sp, #84	; 0x54
   d631a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d6320 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6320:	4b02      	ldr	r3, [pc, #8]	; (d632c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6322:	4a03      	ldr	r2, [pc, #12]	; (d6330 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6324:	601a      	str	r2, [r3, #0]
   d6326:	2200      	movs	r2, #0
   d6328:	605a      	str	r2, [r3, #4]

} // spark
   d632a:	4770      	bx	lr
   d632c:	2003e7cc 	.word	0x2003e7cc
   d6330:	000d7954 	.word	0x000d7954

000d6334 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d6334:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d6336:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d6338:	d902      	bls.n	d6340 <pinAvailable+0xc>
    return false;
   d633a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d633c:	b002      	add	sp, #8
   d633e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d6340:	f1a0 030b 	sub.w	r3, r0, #11
   d6344:	2b02      	cmp	r3, #2
   d6346:	d81a      	bhi.n	d637e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d6348:	4c17      	ldr	r4, [pc, #92]	; (d63a8 <pinAvailable+0x74>)
   d634a:	7821      	ldrb	r1, [r4, #0]
   d634c:	f3bf 8f5b 	dmb	ish
   d6350:	f011 0101 	ands.w	r1, r1, #1
   d6354:	d10b      	bne.n	d636e <pinAvailable+0x3a>
   d6356:	4620      	mov	r0, r4
   d6358:	9101      	str	r1, [sp, #4]
   d635a:	f7fd fea2 	bl	d40a2 <__cxa_guard_acquire>
   d635e:	9901      	ldr	r1, [sp, #4]
   d6360:	b128      	cbz	r0, d636e <pinAvailable+0x3a>
   d6362:	4812      	ldr	r0, [pc, #72]	; (d63ac <pinAvailable+0x78>)
   d6364:	f7fe ffbc 	bl	d52e0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d6368:	4620      	mov	r0, r4
   d636a:	f7fd fe9f 	bl	d40ac <__cxa_guard_release>
   d636e:	4b0f      	ldr	r3, [pc, #60]	; (d63ac <pinAvailable+0x78>)
   d6370:	7818      	ldrb	r0, [r3, #0]
   d6372:	f7fe fe6b 	bl	d504c <hal_spi_is_enabled>
   d6376:	2800      	cmp	r0, #0
   d6378:	d1df      	bne.n	d633a <pinAvailable+0x6>
  return true; // 'pin' is available
   d637a:	2001      	movs	r0, #1
   d637c:	e7de      	b.n	d633c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d637e:	2801      	cmp	r0, #1
   d6380:	d809      	bhi.n	d6396 <pinAvailable+0x62>
   d6382:	f000 f8a7 	bl	d64d4 <_Z19__fetch_global_Wirev>
   d6386:	2100      	movs	r1, #0
   d6388:	7c00      	ldrb	r0, [r0, #16]
   d638a:	f7fe fe17 	bl	d4fbc <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d638e:	f080 0001 	eor.w	r0, r0, #1
   d6392:	b2c0      	uxtb	r0, r0
   d6394:	e7d2      	b.n	d633c <pinAvailable+0x8>
   d6396:	3809      	subs	r0, #9
   d6398:	2801      	cmp	r0, #1
   d639a:	d8ee      	bhi.n	d637a <pinAvailable+0x46>
   d639c:	f7ff fb94 	bl	d5ac8 <_Z22__fetch_global_Serial1v>
   d63a0:	7c00      	ldrb	r0, [r0, #16]
   d63a2:	f7fe fdd3 	bl	d4f4c <hal_usart_is_enabled>
   d63a6:	e7f2      	b.n	d638e <pinAvailable+0x5a>
   d63a8:	2003e644 	.word	0x2003e644
   d63ac:	2003e648 	.word	0x2003e648

000d63b0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d63b0:	2823      	cmp	r0, #35	; 0x23
{
   d63b2:	b538      	push	{r3, r4, r5, lr}
   d63b4:	4604      	mov	r4, r0
   d63b6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d63b8:	d80a      	bhi.n	d63d0 <pinMode+0x20>
   d63ba:	29ff      	cmp	r1, #255	; 0xff
   d63bc:	d008      	beq.n	d63d0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d63be:	f7ff ffb9 	bl	d6334 <pinAvailable>
   d63c2:	b128      	cbz	r0, d63d0 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d63c4:	4629      	mov	r1, r5
   d63c6:	4620      	mov	r0, r4
}
   d63c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d63cc:	f7fe bd16 	b.w	d4dfc <HAL_Pin_Mode>
}
   d63d0:	bd38      	pop	{r3, r4, r5, pc}

000d63d2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d63d2:	b538      	push	{r3, r4, r5, lr}
   d63d4:	4604      	mov	r4, r0
   d63d6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d63d8:	f7fe fd18 	bl	d4e0c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d63dc:	28ff      	cmp	r0, #255	; 0xff
   d63de:	d010      	beq.n	d6402 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d63e0:	2806      	cmp	r0, #6
   d63e2:	d804      	bhi.n	d63ee <digitalWrite+0x1c>
   d63e4:	234d      	movs	r3, #77	; 0x4d
   d63e6:	fa23 f000 	lsr.w	r0, r3, r0
   d63ea:	07c3      	lsls	r3, r0, #31
   d63ec:	d409      	bmi.n	d6402 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d63ee:	4620      	mov	r0, r4
   d63f0:	f7ff ffa0 	bl	d6334 <pinAvailable>
   d63f4:	b128      	cbz	r0, d6402 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d63f6:	4629      	mov	r1, r5
   d63f8:	4620      	mov	r0, r4
}
   d63fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d63fe:	f7fe bd0d 	b.w	d4e1c <HAL_GPIO_Write>
}
   d6402:	bd38      	pop	{r3, r4, r5, pc}

000d6404 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d6404:	b510      	push	{r4, lr}
   d6406:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6408:	f7fe fd00 	bl	d4e0c <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d640c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d640e:	b2db      	uxtb	r3, r3
   d6410:	2b01      	cmp	r3, #1
   d6412:	d908      	bls.n	d6426 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d6414:	4620      	mov	r0, r4
   d6416:	f7ff ff8d 	bl	d6334 <pinAvailable>
   d641a:	b120      	cbz	r0, d6426 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d641c:	4620      	mov	r0, r4
}
   d641e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d6422:	f7fe bd03 	b.w	d4e2c <HAL_GPIO_Read>
}
   d6426:	2000      	movs	r0, #0
   d6428:	bd10      	pop	{r4, pc}

000d642a <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d642a:	280d      	cmp	r0, #13
{
   d642c:	b510      	push	{r4, lr}
   d642e:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d6430:	bf9c      	itt	ls
   d6432:	340e      	addls	r4, #14
   d6434:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6436:	4620      	mov	r0, r4
   d6438:	f7ff ff7c 	bl	d6334 <pinAvailable>
   d643c:	b150      	cbz	r0, d6454 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d643e:	2103      	movs	r1, #3
   d6440:	4620      	mov	r0, r4
   d6442:	f7fe fcd3 	bl	d4dec <HAL_Validate_Pin_Function>
   d6446:	2803      	cmp	r0, #3
   d6448:	d104      	bne.n	d6454 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d644a:	4620      	mov	r0, r4
}
   d644c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d6450:	f7fe bcfc 	b.w	d4e4c <hal_adc_read>
}
   d6454:	2000      	movs	r0, #0
   d6456:	bd10      	pop	{r4, pc}

000d6458 <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   d6458:	b538      	push	{r3, r4, r5, lr}
   d645a:	4604      	mov	r4, r0
   d645c:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   d645e:	f7ff ff69 	bl	d6334 <pinAvailable>
   d6462:	b1f0      	cbz	r0, d64a2 <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   d6464:	2104      	movs	r1, #4
   d6466:	4620      	mov	r0, r4
   d6468:	f7fe fcc0 	bl	d4dec <HAL_Validate_Pin_Function>
   d646c:	2804      	cmp	r0, #4
   d646e:	d105      	bne.n	d647c <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   d6470:	b2a9      	uxth	r1, r5
   d6472:	4620      	mov	r0, r4
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
   d6474:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
   d6478:	f7fe bce0 	b.w	d4e3c <HAL_DAC_Write>
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   d647c:	2102      	movs	r1, #2
   d647e:	4620      	mov	r0, r4
   d6480:	f7fe fcb4 	bl	d4dec <HAL_Validate_Pin_Function>
   d6484:	2802      	cmp	r0, #2
   d6486:	d10c      	bne.n	d64a2 <_Z11analogWritetm+0x4a>
        PinMode mode = HAL_Get_Pin_Mode(pin);
   d6488:	4620      	mov	r0, r4
   d648a:	f7fe fcbf 	bl	d4e0c <HAL_Get_Pin_Mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   d648e:	2801      	cmp	r0, #1
   d6490:	d001      	beq.n	d6496 <_Z11analogWritetm+0x3e>
   d6492:	2804      	cmp	r0, #4
   d6494:	d105      	bne.n	d64a2 <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
   d6496:	4629      	mov	r1, r5
   d6498:	4620      	mov	r0, r4
}
   d649a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
   d649e:	f7fe bcdd 	b.w	d4e5c <hal_pwm_write_ext>
}
   d64a2:	bd38      	pop	{r3, r4, r5, pc}

000d64a4 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d64a4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d64a6:	2300      	movs	r3, #0
   d64a8:	2520      	movs	r5, #32
   d64aa:	8043      	strh	r3, [r0, #2]
   d64ac:	2314      	movs	r3, #20
{
   d64ae:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d64b0:	8003      	strh	r3, [r0, #0]
   d64b2:	6085      	str	r5, [r0, #8]
   d64b4:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d64b6:	4906      	ldr	r1, [pc, #24]	; (d64d0 <_Z17acquireWireBufferv+0x2c>)
   d64b8:	4628      	mov	r0, r5
   d64ba:	f000 f83a 	bl	d6532 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d64be:	4904      	ldr	r1, [pc, #16]	; (d64d0 <_Z17acquireWireBufferv+0x2c>)
	};
   d64c0:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d64c2:	4628      	mov	r0, r5
   d64c4:	f000 f835 	bl	d6532 <_ZnajRKSt9nothrow_t>
	};
   d64c8:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d64ca:	4620      	mov	r0, r4
   d64cc:	bd38      	pop	{r3, r4, r5, pc}
   d64ce:	bf00      	nop
   d64d0:	000d7988 	.word	0x000d7988

000d64d4 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d64d4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d64d6:	4d0f      	ldr	r5, [pc, #60]	; (d6514 <_Z19__fetch_global_Wirev+0x40>)
   d64d8:	7829      	ldrb	r1, [r5, #0]
   d64da:	f3bf 8f5b 	dmb	ish
   d64de:	f011 0401 	ands.w	r4, r1, #1
{
   d64e2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d64e4:	d113      	bne.n	d650e <_Z19__fetch_global_Wirev+0x3a>
   d64e6:	4628      	mov	r0, r5
   d64e8:	f7fd fddb 	bl	d40a2 <__cxa_guard_acquire>
   d64ec:	b178      	cbz	r0, d650e <_Z19__fetch_global_Wirev+0x3a>
   d64ee:	a801      	add	r0, sp, #4
   d64f0:	f7ff ffd8 	bl	d64a4 <_Z17acquireWireBufferv>
   d64f4:	aa01      	add	r2, sp, #4
   d64f6:	4621      	mov	r1, r4
   d64f8:	4807      	ldr	r0, [pc, #28]	; (d6518 <_Z19__fetch_global_Wirev+0x44>)
   d64fa:	f7ff fb3b 	bl	d5b74 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d64fe:	4628      	mov	r0, r5
   d6500:	f7fd fdd4 	bl	d40ac <__cxa_guard_release>
   d6504:	4a05      	ldr	r2, [pc, #20]	; (d651c <_Z19__fetch_global_Wirev+0x48>)
   d6506:	4906      	ldr	r1, [pc, #24]	; (d6520 <_Z19__fetch_global_Wirev+0x4c>)
   d6508:	4803      	ldr	r0, [pc, #12]	; (d6518 <_Z19__fetch_global_Wirev+0x44>)
   d650a:	f000 f80b 	bl	d6524 <__aeabi_atexit>
	return wire;
}
   d650e:	4802      	ldr	r0, [pc, #8]	; (d6518 <_Z19__fetch_global_Wirev+0x44>)
   d6510:	b007      	add	sp, #28
   d6512:	bd30      	pop	{r4, r5, pc}
   d6514:	2003e7d8 	.word	0x2003e7d8
   d6518:	2003e7dc 	.word	0x2003e7dc
   d651c:	2003e3a0 	.word	0x2003e3a0
   d6520:	000d5b1d 	.word	0x000d5b1d

000d6524 <__aeabi_atexit>:
   d6524:	460b      	mov	r3, r1
   d6526:	4601      	mov	r1, r0
   d6528:	4618      	mov	r0, r3
   d652a:	f000 bdd3 	b.w	d70d4 <__cxa_atexit>

000d652e <_ZdlPvj>:
   d652e:	f7fd bdb6 	b.w	d409e <_ZdlPv>

000d6532 <_ZnajRKSt9nothrow_t>:
   d6532:	f7fd bdb2 	b.w	d409a <_Znaj>
	...

000d6538 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   d6538:	4901      	ldr	r1, [pc, #4]	; (d6540 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   d653a:	f000 b8f9 	b.w	d6730 <_ZNKSt9type_infoeqERKS_>
   d653e:	bf00      	nop
   d6540:	000d79a4 	.word	0x000d79a4

000d6544 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   d6544:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d6546:	2400      	movs	r4, #0
   d6548:	2310      	movs	r3, #16
   d654a:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d654e:	6803      	ldr	r3, [r0, #0]
   d6550:	9400      	str	r4, [sp, #0]
   d6552:	699e      	ldr	r6, [r3, #24]
   d6554:	f88d 4004 	strb.w	r4, [sp, #4]
   d6558:	4615      	mov	r5, r2
   d655a:	466b      	mov	r3, sp
   d655c:	6812      	ldr	r2, [r2, #0]
   d655e:	47b0      	blx	r6
   d6560:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d6564:	f003 0306 	and.w	r3, r3, #6
   d6568:	2b06      	cmp	r3, #6
   d656a:	bf03      	ittte	eq
   d656c:	9b00      	ldreq	r3, [sp, #0]
   d656e:	602b      	streq	r3, [r5, #0]
   d6570:	2001      	moveq	r0, #1
   d6572:	4620      	movne	r0, r4
   d6574:	b004      	add	sp, #16
   d6576:	bd70      	pop	{r4, r5, r6, pc}

000d6578 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   d6578:	9800      	ldr	r0, [sp, #0]
   d657a:	4290      	cmp	r0, r2
   d657c:	bf14      	ite	ne
   d657e:	2001      	movne	r0, #1
   d6580:	2006      	moveq	r0, #6
   d6582:	4770      	bx	lr

000d6584 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   d6584:	b510      	push	{r4, lr}
   d6586:	4b03      	ldr	r3, [pc, #12]	; (d6594 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   d6588:	6003      	str	r3, [r0, #0]
   d658a:	4604      	mov	r4, r0
   d658c:	f000 f8cd 	bl	d672a <_ZNSt9type_infoD1Ev>
   d6590:	4620      	mov	r0, r4
   d6592:	bd10      	pop	{r4, pc}
   d6594:	000d79e4 	.word	0x000d79e4

000d6598 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   d6598:	b510      	push	{r4, lr}
   d659a:	4604      	mov	r4, r0
   d659c:	f7ff fff2 	bl	d6584 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d65a0:	4620      	mov	r0, r4
   d65a2:	2108      	movs	r1, #8
   d65a4:	f7ff ffc3 	bl	d652e <_ZdlPvj>
   d65a8:	4620      	mov	r0, r4
   d65aa:	bd10      	pop	{r4, pc}

000d65ac <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   d65ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d65b0:	461f      	mov	r7, r3
   d65b2:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   d65b6:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d65ba:	4598      	cmp	r8, r3
   d65bc:	4606      	mov	r6, r0
   d65be:	4615      	mov	r5, r2
   d65c0:	d107      	bne.n	d65d2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d65c2:	9907      	ldr	r1, [sp, #28]
   d65c4:	f000 f8b4 	bl	d6730 <_ZNKSt9type_infoeqERKS_>
   d65c8:	b118      	cbz	r0, d65d2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d65ca:	7165      	strb	r5, [r4, #5]
   d65cc:	2000      	movs	r0, #0
   d65ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d65d2:	4639      	mov	r1, r7
   d65d4:	4630      	mov	r0, r6
   d65d6:	f000 f8ab 	bl	d6730 <_ZNKSt9type_infoeqERKS_>
   d65da:	2800      	cmp	r0, #0
   d65dc:	d0f6      	beq.n	d65cc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   d65de:	2301      	movs	r3, #1
   d65e0:	f8c4 8000 	str.w	r8, [r4]
   d65e4:	7125      	strb	r5, [r4, #4]
   d65e6:	71a3      	strb	r3, [r4, #6]
   d65e8:	e7f0      	b.n	d65cc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000d65ea <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   d65ea:	b538      	push	{r3, r4, r5, lr}
   d65ec:	4615      	mov	r5, r2
   d65ee:	461c      	mov	r4, r3
   d65f0:	f000 f89e 	bl	d6730 <_ZNKSt9type_infoeqERKS_>
   d65f4:	b120      	cbz	r0, d6600 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   d65f6:	2308      	movs	r3, #8
   d65f8:	60e3      	str	r3, [r4, #12]
   d65fa:	2306      	movs	r3, #6
   d65fc:	6025      	str	r5, [r4, #0]
   d65fe:	7123      	strb	r3, [r4, #4]
   d6600:	bd38      	pop	{r3, r4, r5, pc}

000d6602 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   d6602:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6604:	4605      	mov	r5, r0
   d6606:	460c      	mov	r4, r1
   d6608:	9201      	str	r2, [sp, #4]
   d660a:	461e      	mov	r6, r3
   d660c:	f000 f890 	bl	d6730 <_ZNKSt9type_infoeqERKS_>
   d6610:	b950      	cbnz	r0, d6628 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d6612:	2e03      	cmp	r6, #3
   d6614:	d808      	bhi.n	d6628 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d6616:	6823      	ldr	r3, [r4, #0]
   d6618:	9a01      	ldr	r2, [sp, #4]
   d661a:	695b      	ldr	r3, [r3, #20]
   d661c:	4629      	mov	r1, r5
   d661e:	4620      	mov	r0, r4
   d6620:	b002      	add	sp, #8
   d6622:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d6626:	4718      	bx	r3
   d6628:	b002      	add	sp, #8
   d662a:	bd70      	pop	{r4, r5, r6, pc}

000d662c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   d662c:	b510      	push	{r4, lr}
   d662e:	4b03      	ldr	r3, [pc, #12]	; (d663c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   d6630:	6003      	str	r3, [r0, #0]
   d6632:	4604      	mov	r4, r0
   d6634:	f7ff ffa6 	bl	d6584 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d6638:	4620      	mov	r0, r4
   d663a:	bd10      	pop	{r4, pc}
   d663c:	000d7a44 	.word	0x000d7a44

000d6640 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   d6640:	b510      	push	{r4, lr}
   d6642:	4604      	mov	r4, r0
   d6644:	f7ff fff2 	bl	d662c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   d6648:	4620      	mov	r0, r4
   d664a:	210c      	movs	r1, #12
   d664c:	f7ff ff6f 	bl	d652e <_ZdlPvj>
   d6650:	4620      	mov	r0, r4
   d6652:	bd10      	pop	{r4, pc}

000d6654 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   d6654:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d6656:	9f08      	ldr	r7, [sp, #32]
   d6658:	4297      	cmp	r7, r2
   d665a:	4605      	mov	r5, r0
   d665c:	460e      	mov	r6, r1
   d665e:	4614      	mov	r4, r2
   d6660:	d00a      	beq.n	d6678 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   d6662:	68a8      	ldr	r0, [r5, #8]
   d6664:	6802      	ldr	r2, [r0, #0]
   d6666:	9708      	str	r7, [sp, #32]
   d6668:	6a15      	ldr	r5, [r2, #32]
   d666a:	4631      	mov	r1, r6
   d666c:	4622      	mov	r2, r4
   d666e:	46ac      	mov	ip, r5
   d6670:	b003      	add	sp, #12
   d6672:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d6676:	4760      	bx	ip
   d6678:	4619      	mov	r1, r3
   d667a:	9301      	str	r3, [sp, #4]
   d667c:	f000 f858 	bl	d6730 <_ZNKSt9type_infoeqERKS_>
   d6680:	9b01      	ldr	r3, [sp, #4]
   d6682:	2800      	cmp	r0, #0
   d6684:	d0ed      	beq.n	d6662 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   d6686:	2006      	movs	r0, #6
   d6688:	b003      	add	sp, #12
   d668a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d668c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   d668c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6690:	460d      	mov	r5, r1
   d6692:	4619      	mov	r1, r3
   d6694:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   d6698:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   d669c:	4681      	mov	r9, r0
   d669e:	4617      	mov	r7, r2
   d66a0:	4698      	mov	r8, r3
   d66a2:	f000 f845 	bl	d6730 <_ZNKSt9type_infoeqERKS_>
   d66a6:	b190      	cbz	r0, d66ce <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   d66a8:	2d00      	cmp	r5, #0
   d66aa:	6034      	str	r4, [r6, #0]
   d66ac:	7137      	strb	r7, [r6, #4]
   d66ae:	db09      	blt.n	d66c4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   d66b0:	1961      	adds	r1, r4, r5
   d66b2:	458a      	cmp	sl, r1
   d66b4:	bf0c      	ite	eq
   d66b6:	2106      	moveq	r1, #6
   d66b8:	2101      	movne	r1, #1
   d66ba:	71b1      	strb	r1, [r6, #6]
   d66bc:	2000      	movs	r0, #0
   d66be:	b001      	add	sp, #4
   d66c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d66c4:	3502      	adds	r5, #2
   d66c6:	d1f9      	bne.n	d66bc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d66c8:	2301      	movs	r3, #1
   d66ca:	71b3      	strb	r3, [r6, #6]
   d66cc:	e7f6      	b.n	d66bc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d66ce:	4554      	cmp	r4, sl
   d66d0:	d106      	bne.n	d66e0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d66d2:	4659      	mov	r1, fp
   d66d4:	4648      	mov	r0, r9
   d66d6:	f000 f82b 	bl	d6730 <_ZNKSt9type_infoeqERKS_>
   d66da:	b108      	cbz	r0, d66e0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d66dc:	7177      	strb	r7, [r6, #5]
   d66de:	e7ed      	b.n	d66bc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d66e0:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d66e4:	6803      	ldr	r3, [r0, #0]
   d66e6:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   d66ea:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   d66ee:	69dc      	ldr	r4, [r3, #28]
   d66f0:	463a      	mov	r2, r7
   d66f2:	4643      	mov	r3, r8
   d66f4:	4629      	mov	r1, r5
   d66f6:	46a4      	mov	ip, r4
   d66f8:	b001      	add	sp, #4
   d66fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d66fe:	4760      	bx	ip

000d6700 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   d6700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6704:	4607      	mov	r7, r0
   d6706:	460c      	mov	r4, r1
   d6708:	4615      	mov	r5, r2
   d670a:	461e      	mov	r6, r3
   d670c:	f7ff ff6d 	bl	d65ea <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   d6710:	b948      	cbnz	r0, d6726 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   d6712:	68b8      	ldr	r0, [r7, #8]
   d6714:	6803      	ldr	r3, [r0, #0]
   d6716:	699f      	ldr	r7, [r3, #24]
   d6718:	462a      	mov	r2, r5
   d671a:	4633      	mov	r3, r6
   d671c:	4621      	mov	r1, r4
   d671e:	46bc      	mov	ip, r7
   d6720:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d6724:	4760      	bx	ip
   d6726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d672a <_ZNSt9type_infoD1Ev>:
   d672a:	4770      	bx	lr

000d672c <_ZNKSt9type_info14__is_pointer_pEv>:
   d672c:	2000      	movs	r0, #0
   d672e:	4770      	bx	lr

000d6730 <_ZNKSt9type_infoeqERKS_>:
   d6730:	4281      	cmp	r1, r0
   d6732:	b508      	push	{r3, lr}
   d6734:	d00e      	beq.n	d6754 <_ZNKSt9type_infoeqERKS_+0x24>
   d6736:	6840      	ldr	r0, [r0, #4]
   d6738:	7803      	ldrb	r3, [r0, #0]
   d673a:	2b2a      	cmp	r3, #42	; 0x2a
   d673c:	d00c      	beq.n	d6758 <_ZNKSt9type_infoeqERKS_+0x28>
   d673e:	6849      	ldr	r1, [r1, #4]
   d6740:	780b      	ldrb	r3, [r1, #0]
   d6742:	2b2a      	cmp	r3, #42	; 0x2a
   d6744:	bf08      	it	eq
   d6746:	3101      	addeq	r1, #1
   d6748:	f000 fd0c 	bl	d7164 <strcmp>
   d674c:	fab0 f080 	clz	r0, r0
   d6750:	0940      	lsrs	r0, r0, #5
   d6752:	bd08      	pop	{r3, pc}
   d6754:	2001      	movs	r0, #1
   d6756:	e7fc      	b.n	d6752 <_ZNKSt9type_infoeqERKS_+0x22>
   d6758:	2000      	movs	r0, #0
   d675a:	e7fa      	b.n	d6752 <_ZNKSt9type_infoeqERKS_+0x22>

000d675c <__aeabi_drsub>:
   d675c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d6760:	e002      	b.n	d6768 <__adddf3>
   d6762:	bf00      	nop

000d6764 <__aeabi_dsub>:
   d6764:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d6768 <__adddf3>:
   d6768:	b530      	push	{r4, r5, lr}
   d676a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d676e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d6772:	ea94 0f05 	teq	r4, r5
   d6776:	bf08      	it	eq
   d6778:	ea90 0f02 	teqeq	r0, r2
   d677c:	bf1f      	itttt	ne
   d677e:	ea54 0c00 	orrsne.w	ip, r4, r0
   d6782:	ea55 0c02 	orrsne.w	ip, r5, r2
   d6786:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d678a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d678e:	f000 80e2 	beq.w	d6956 <__adddf3+0x1ee>
   d6792:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d6796:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d679a:	bfb8      	it	lt
   d679c:	426d      	neglt	r5, r5
   d679e:	dd0c      	ble.n	d67ba <__adddf3+0x52>
   d67a0:	442c      	add	r4, r5
   d67a2:	ea80 0202 	eor.w	r2, r0, r2
   d67a6:	ea81 0303 	eor.w	r3, r1, r3
   d67aa:	ea82 0000 	eor.w	r0, r2, r0
   d67ae:	ea83 0101 	eor.w	r1, r3, r1
   d67b2:	ea80 0202 	eor.w	r2, r0, r2
   d67b6:	ea81 0303 	eor.w	r3, r1, r3
   d67ba:	2d36      	cmp	r5, #54	; 0x36
   d67bc:	bf88      	it	hi
   d67be:	bd30      	pophi	{r4, r5, pc}
   d67c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d67c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d67c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d67cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d67d0:	d002      	beq.n	d67d8 <__adddf3+0x70>
   d67d2:	4240      	negs	r0, r0
   d67d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d67d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d67dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d67e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d67e4:	d002      	beq.n	d67ec <__adddf3+0x84>
   d67e6:	4252      	negs	r2, r2
   d67e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d67ec:	ea94 0f05 	teq	r4, r5
   d67f0:	f000 80a7 	beq.w	d6942 <__adddf3+0x1da>
   d67f4:	f1a4 0401 	sub.w	r4, r4, #1
   d67f8:	f1d5 0e20 	rsbs	lr, r5, #32
   d67fc:	db0d      	blt.n	d681a <__adddf3+0xb2>
   d67fe:	fa02 fc0e 	lsl.w	ip, r2, lr
   d6802:	fa22 f205 	lsr.w	r2, r2, r5
   d6806:	1880      	adds	r0, r0, r2
   d6808:	f141 0100 	adc.w	r1, r1, #0
   d680c:	fa03 f20e 	lsl.w	r2, r3, lr
   d6810:	1880      	adds	r0, r0, r2
   d6812:	fa43 f305 	asr.w	r3, r3, r5
   d6816:	4159      	adcs	r1, r3
   d6818:	e00e      	b.n	d6838 <__adddf3+0xd0>
   d681a:	f1a5 0520 	sub.w	r5, r5, #32
   d681e:	f10e 0e20 	add.w	lr, lr, #32
   d6822:	2a01      	cmp	r2, #1
   d6824:	fa03 fc0e 	lsl.w	ip, r3, lr
   d6828:	bf28      	it	cs
   d682a:	f04c 0c02 	orrcs.w	ip, ip, #2
   d682e:	fa43 f305 	asr.w	r3, r3, r5
   d6832:	18c0      	adds	r0, r0, r3
   d6834:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d6838:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d683c:	d507      	bpl.n	d684e <__adddf3+0xe6>
   d683e:	f04f 0e00 	mov.w	lr, #0
   d6842:	f1dc 0c00 	rsbs	ip, ip, #0
   d6846:	eb7e 0000 	sbcs.w	r0, lr, r0
   d684a:	eb6e 0101 	sbc.w	r1, lr, r1
   d684e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d6852:	d31b      	bcc.n	d688c <__adddf3+0x124>
   d6854:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d6858:	d30c      	bcc.n	d6874 <__adddf3+0x10c>
   d685a:	0849      	lsrs	r1, r1, #1
   d685c:	ea5f 0030 	movs.w	r0, r0, rrx
   d6860:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d6864:	f104 0401 	add.w	r4, r4, #1
   d6868:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d686c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d6870:	f080 809a 	bcs.w	d69a8 <__adddf3+0x240>
   d6874:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d6878:	bf08      	it	eq
   d687a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d687e:	f150 0000 	adcs.w	r0, r0, #0
   d6882:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6886:	ea41 0105 	orr.w	r1, r1, r5
   d688a:	bd30      	pop	{r4, r5, pc}
   d688c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d6890:	4140      	adcs	r0, r0
   d6892:	eb41 0101 	adc.w	r1, r1, r1
   d6896:	3c01      	subs	r4, #1
   d6898:	bf28      	it	cs
   d689a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d689e:	d2e9      	bcs.n	d6874 <__adddf3+0x10c>
   d68a0:	f091 0f00 	teq	r1, #0
   d68a4:	bf04      	itt	eq
   d68a6:	4601      	moveq	r1, r0
   d68a8:	2000      	moveq	r0, #0
   d68aa:	fab1 f381 	clz	r3, r1
   d68ae:	bf08      	it	eq
   d68b0:	3320      	addeq	r3, #32
   d68b2:	f1a3 030b 	sub.w	r3, r3, #11
   d68b6:	f1b3 0220 	subs.w	r2, r3, #32
   d68ba:	da0c      	bge.n	d68d6 <__adddf3+0x16e>
   d68bc:	320c      	adds	r2, #12
   d68be:	dd08      	ble.n	d68d2 <__adddf3+0x16a>
   d68c0:	f102 0c14 	add.w	ip, r2, #20
   d68c4:	f1c2 020c 	rsb	r2, r2, #12
   d68c8:	fa01 f00c 	lsl.w	r0, r1, ip
   d68cc:	fa21 f102 	lsr.w	r1, r1, r2
   d68d0:	e00c      	b.n	d68ec <__adddf3+0x184>
   d68d2:	f102 0214 	add.w	r2, r2, #20
   d68d6:	bfd8      	it	le
   d68d8:	f1c2 0c20 	rsble	ip, r2, #32
   d68dc:	fa01 f102 	lsl.w	r1, r1, r2
   d68e0:	fa20 fc0c 	lsr.w	ip, r0, ip
   d68e4:	bfdc      	itt	le
   d68e6:	ea41 010c 	orrle.w	r1, r1, ip
   d68ea:	4090      	lslle	r0, r2
   d68ec:	1ae4      	subs	r4, r4, r3
   d68ee:	bfa2      	ittt	ge
   d68f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d68f4:	4329      	orrge	r1, r5
   d68f6:	bd30      	popge	{r4, r5, pc}
   d68f8:	ea6f 0404 	mvn.w	r4, r4
   d68fc:	3c1f      	subs	r4, #31
   d68fe:	da1c      	bge.n	d693a <__adddf3+0x1d2>
   d6900:	340c      	adds	r4, #12
   d6902:	dc0e      	bgt.n	d6922 <__adddf3+0x1ba>
   d6904:	f104 0414 	add.w	r4, r4, #20
   d6908:	f1c4 0220 	rsb	r2, r4, #32
   d690c:	fa20 f004 	lsr.w	r0, r0, r4
   d6910:	fa01 f302 	lsl.w	r3, r1, r2
   d6914:	ea40 0003 	orr.w	r0, r0, r3
   d6918:	fa21 f304 	lsr.w	r3, r1, r4
   d691c:	ea45 0103 	orr.w	r1, r5, r3
   d6920:	bd30      	pop	{r4, r5, pc}
   d6922:	f1c4 040c 	rsb	r4, r4, #12
   d6926:	f1c4 0220 	rsb	r2, r4, #32
   d692a:	fa20 f002 	lsr.w	r0, r0, r2
   d692e:	fa01 f304 	lsl.w	r3, r1, r4
   d6932:	ea40 0003 	orr.w	r0, r0, r3
   d6936:	4629      	mov	r1, r5
   d6938:	bd30      	pop	{r4, r5, pc}
   d693a:	fa21 f004 	lsr.w	r0, r1, r4
   d693e:	4629      	mov	r1, r5
   d6940:	bd30      	pop	{r4, r5, pc}
   d6942:	f094 0f00 	teq	r4, #0
   d6946:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d694a:	bf06      	itte	eq
   d694c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d6950:	3401      	addeq	r4, #1
   d6952:	3d01      	subne	r5, #1
   d6954:	e74e      	b.n	d67f4 <__adddf3+0x8c>
   d6956:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d695a:	bf18      	it	ne
   d695c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6960:	d029      	beq.n	d69b6 <__adddf3+0x24e>
   d6962:	ea94 0f05 	teq	r4, r5
   d6966:	bf08      	it	eq
   d6968:	ea90 0f02 	teqeq	r0, r2
   d696c:	d005      	beq.n	d697a <__adddf3+0x212>
   d696e:	ea54 0c00 	orrs.w	ip, r4, r0
   d6972:	bf04      	itt	eq
   d6974:	4619      	moveq	r1, r3
   d6976:	4610      	moveq	r0, r2
   d6978:	bd30      	pop	{r4, r5, pc}
   d697a:	ea91 0f03 	teq	r1, r3
   d697e:	bf1e      	ittt	ne
   d6980:	2100      	movne	r1, #0
   d6982:	2000      	movne	r0, #0
   d6984:	bd30      	popne	{r4, r5, pc}
   d6986:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d698a:	d105      	bne.n	d6998 <__adddf3+0x230>
   d698c:	0040      	lsls	r0, r0, #1
   d698e:	4149      	adcs	r1, r1
   d6990:	bf28      	it	cs
   d6992:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d6996:	bd30      	pop	{r4, r5, pc}
   d6998:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d699c:	bf3c      	itt	cc
   d699e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d69a2:	bd30      	popcc	{r4, r5, pc}
   d69a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d69a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d69ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d69b0:	f04f 0000 	mov.w	r0, #0
   d69b4:	bd30      	pop	{r4, r5, pc}
   d69b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d69ba:	bf1a      	itte	ne
   d69bc:	4619      	movne	r1, r3
   d69be:	4610      	movne	r0, r2
   d69c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d69c4:	bf1c      	itt	ne
   d69c6:	460b      	movne	r3, r1
   d69c8:	4602      	movne	r2, r0
   d69ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d69ce:	bf06      	itte	eq
   d69d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d69d4:	ea91 0f03 	teqeq	r1, r3
   d69d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d69dc:	bd30      	pop	{r4, r5, pc}
   d69de:	bf00      	nop

000d69e0 <__aeabi_ui2d>:
   d69e0:	f090 0f00 	teq	r0, #0
   d69e4:	bf04      	itt	eq
   d69e6:	2100      	moveq	r1, #0
   d69e8:	4770      	bxeq	lr
   d69ea:	b530      	push	{r4, r5, lr}
   d69ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d69f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d69f4:	f04f 0500 	mov.w	r5, #0
   d69f8:	f04f 0100 	mov.w	r1, #0
   d69fc:	e750      	b.n	d68a0 <__adddf3+0x138>
   d69fe:	bf00      	nop

000d6a00 <__aeabi_i2d>:
   d6a00:	f090 0f00 	teq	r0, #0
   d6a04:	bf04      	itt	eq
   d6a06:	2100      	moveq	r1, #0
   d6a08:	4770      	bxeq	lr
   d6a0a:	b530      	push	{r4, r5, lr}
   d6a0c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6a10:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6a14:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6a18:	bf48      	it	mi
   d6a1a:	4240      	negmi	r0, r0
   d6a1c:	f04f 0100 	mov.w	r1, #0
   d6a20:	e73e      	b.n	d68a0 <__adddf3+0x138>
   d6a22:	bf00      	nop

000d6a24 <__aeabi_f2d>:
   d6a24:	0042      	lsls	r2, r0, #1
   d6a26:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d6a2a:	ea4f 0131 	mov.w	r1, r1, rrx
   d6a2e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d6a32:	bf1f      	itttt	ne
   d6a34:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6a38:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6a3c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6a40:	4770      	bxne	lr
   d6a42:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d6a46:	bf08      	it	eq
   d6a48:	4770      	bxeq	lr
   d6a4a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d6a4e:	bf04      	itt	eq
   d6a50:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d6a54:	4770      	bxeq	lr
   d6a56:	b530      	push	{r4, r5, lr}
   d6a58:	f44f 7460 	mov.w	r4, #896	; 0x380
   d6a5c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6a60:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6a64:	e71c      	b.n	d68a0 <__adddf3+0x138>
   d6a66:	bf00      	nop

000d6a68 <__aeabi_ul2d>:
   d6a68:	ea50 0201 	orrs.w	r2, r0, r1
   d6a6c:	bf08      	it	eq
   d6a6e:	4770      	bxeq	lr
   d6a70:	b530      	push	{r4, r5, lr}
   d6a72:	f04f 0500 	mov.w	r5, #0
   d6a76:	e00a      	b.n	d6a8e <__aeabi_l2d+0x16>

000d6a78 <__aeabi_l2d>:
   d6a78:	ea50 0201 	orrs.w	r2, r0, r1
   d6a7c:	bf08      	it	eq
   d6a7e:	4770      	bxeq	lr
   d6a80:	b530      	push	{r4, r5, lr}
   d6a82:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d6a86:	d502      	bpl.n	d6a8e <__aeabi_l2d+0x16>
   d6a88:	4240      	negs	r0, r0
   d6a8a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6a8e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6a92:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6a96:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d6a9a:	f43f aed8 	beq.w	d684e <__adddf3+0xe6>
   d6a9e:	f04f 0203 	mov.w	r2, #3
   d6aa2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6aa6:	bf18      	it	ne
   d6aa8:	3203      	addne	r2, #3
   d6aaa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6aae:	bf18      	it	ne
   d6ab0:	3203      	addne	r2, #3
   d6ab2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d6ab6:	f1c2 0320 	rsb	r3, r2, #32
   d6aba:	fa00 fc03 	lsl.w	ip, r0, r3
   d6abe:	fa20 f002 	lsr.w	r0, r0, r2
   d6ac2:	fa01 fe03 	lsl.w	lr, r1, r3
   d6ac6:	ea40 000e 	orr.w	r0, r0, lr
   d6aca:	fa21 f102 	lsr.w	r1, r1, r2
   d6ace:	4414      	add	r4, r2
   d6ad0:	e6bd      	b.n	d684e <__adddf3+0xe6>
   d6ad2:	bf00      	nop

000d6ad4 <__aeabi_dmul>:
   d6ad4:	b570      	push	{r4, r5, r6, lr}
   d6ad6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6ada:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6ade:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6ae2:	bf1d      	ittte	ne
   d6ae4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6ae8:	ea94 0f0c 	teqne	r4, ip
   d6aec:	ea95 0f0c 	teqne	r5, ip
   d6af0:	f000 f8de 	bleq	d6cb0 <__aeabi_dmul+0x1dc>
   d6af4:	442c      	add	r4, r5
   d6af6:	ea81 0603 	eor.w	r6, r1, r3
   d6afa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d6afe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6b02:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d6b06:	bf18      	it	ne
   d6b08:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6b0c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6b10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6b14:	d038      	beq.n	d6b88 <__aeabi_dmul+0xb4>
   d6b16:	fba0 ce02 	umull	ip, lr, r0, r2
   d6b1a:	f04f 0500 	mov.w	r5, #0
   d6b1e:	fbe1 e502 	umlal	lr, r5, r1, r2
   d6b22:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d6b26:	fbe0 e503 	umlal	lr, r5, r0, r3
   d6b2a:	f04f 0600 	mov.w	r6, #0
   d6b2e:	fbe1 5603 	umlal	r5, r6, r1, r3
   d6b32:	f09c 0f00 	teq	ip, #0
   d6b36:	bf18      	it	ne
   d6b38:	f04e 0e01 	orrne.w	lr, lr, #1
   d6b3c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6b40:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6b44:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6b48:	d204      	bcs.n	d6b54 <__aeabi_dmul+0x80>
   d6b4a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d6b4e:	416d      	adcs	r5, r5
   d6b50:	eb46 0606 	adc.w	r6, r6, r6
   d6b54:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6b58:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d6b5c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6b60:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6b64:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6b68:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6b6c:	bf88      	it	hi
   d6b6e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6b72:	d81e      	bhi.n	d6bb2 <__aeabi_dmul+0xde>
   d6b74:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d6b78:	bf08      	it	eq
   d6b7a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d6b7e:	f150 0000 	adcs.w	r0, r0, #0
   d6b82:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6b86:	bd70      	pop	{r4, r5, r6, pc}
   d6b88:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d6b8c:	ea46 0101 	orr.w	r1, r6, r1
   d6b90:	ea40 0002 	orr.w	r0, r0, r2
   d6b94:	ea81 0103 	eor.w	r1, r1, r3
   d6b98:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d6b9c:	bfc2      	ittt	gt
   d6b9e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6ba2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6ba6:	bd70      	popgt	{r4, r5, r6, pc}
   d6ba8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6bac:	f04f 0e00 	mov.w	lr, #0
   d6bb0:	3c01      	subs	r4, #1
   d6bb2:	f300 80ab 	bgt.w	d6d0c <__aeabi_dmul+0x238>
   d6bb6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d6bba:	bfde      	ittt	le
   d6bbc:	2000      	movle	r0, #0
   d6bbe:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d6bc2:	bd70      	pople	{r4, r5, r6, pc}
   d6bc4:	f1c4 0400 	rsb	r4, r4, #0
   d6bc8:	3c20      	subs	r4, #32
   d6bca:	da35      	bge.n	d6c38 <__aeabi_dmul+0x164>
   d6bcc:	340c      	adds	r4, #12
   d6bce:	dc1b      	bgt.n	d6c08 <__aeabi_dmul+0x134>
   d6bd0:	f104 0414 	add.w	r4, r4, #20
   d6bd4:	f1c4 0520 	rsb	r5, r4, #32
   d6bd8:	fa00 f305 	lsl.w	r3, r0, r5
   d6bdc:	fa20 f004 	lsr.w	r0, r0, r4
   d6be0:	fa01 f205 	lsl.w	r2, r1, r5
   d6be4:	ea40 0002 	orr.w	r0, r0, r2
   d6be8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d6bec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6bf0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6bf4:	fa21 f604 	lsr.w	r6, r1, r4
   d6bf8:	eb42 0106 	adc.w	r1, r2, r6
   d6bfc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6c00:	bf08      	it	eq
   d6c02:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6c06:	bd70      	pop	{r4, r5, r6, pc}
   d6c08:	f1c4 040c 	rsb	r4, r4, #12
   d6c0c:	f1c4 0520 	rsb	r5, r4, #32
   d6c10:	fa00 f304 	lsl.w	r3, r0, r4
   d6c14:	fa20 f005 	lsr.w	r0, r0, r5
   d6c18:	fa01 f204 	lsl.w	r2, r1, r4
   d6c1c:	ea40 0002 	orr.w	r0, r0, r2
   d6c20:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6c24:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6c28:	f141 0100 	adc.w	r1, r1, #0
   d6c2c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6c30:	bf08      	it	eq
   d6c32:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6c36:	bd70      	pop	{r4, r5, r6, pc}
   d6c38:	f1c4 0520 	rsb	r5, r4, #32
   d6c3c:	fa00 f205 	lsl.w	r2, r0, r5
   d6c40:	ea4e 0e02 	orr.w	lr, lr, r2
   d6c44:	fa20 f304 	lsr.w	r3, r0, r4
   d6c48:	fa01 f205 	lsl.w	r2, r1, r5
   d6c4c:	ea43 0302 	orr.w	r3, r3, r2
   d6c50:	fa21 f004 	lsr.w	r0, r1, r4
   d6c54:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6c58:	fa21 f204 	lsr.w	r2, r1, r4
   d6c5c:	ea20 0002 	bic.w	r0, r0, r2
   d6c60:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d6c64:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6c68:	bf08      	it	eq
   d6c6a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6c6e:	bd70      	pop	{r4, r5, r6, pc}
   d6c70:	f094 0f00 	teq	r4, #0
   d6c74:	d10f      	bne.n	d6c96 <__aeabi_dmul+0x1c2>
   d6c76:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d6c7a:	0040      	lsls	r0, r0, #1
   d6c7c:	eb41 0101 	adc.w	r1, r1, r1
   d6c80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6c84:	bf08      	it	eq
   d6c86:	3c01      	subeq	r4, #1
   d6c88:	d0f7      	beq.n	d6c7a <__aeabi_dmul+0x1a6>
   d6c8a:	ea41 0106 	orr.w	r1, r1, r6
   d6c8e:	f095 0f00 	teq	r5, #0
   d6c92:	bf18      	it	ne
   d6c94:	4770      	bxne	lr
   d6c96:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d6c9a:	0052      	lsls	r2, r2, #1
   d6c9c:	eb43 0303 	adc.w	r3, r3, r3
   d6ca0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d6ca4:	bf08      	it	eq
   d6ca6:	3d01      	subeq	r5, #1
   d6ca8:	d0f7      	beq.n	d6c9a <__aeabi_dmul+0x1c6>
   d6caa:	ea43 0306 	orr.w	r3, r3, r6
   d6cae:	4770      	bx	lr
   d6cb0:	ea94 0f0c 	teq	r4, ip
   d6cb4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6cb8:	bf18      	it	ne
   d6cba:	ea95 0f0c 	teqne	r5, ip
   d6cbe:	d00c      	beq.n	d6cda <__aeabi_dmul+0x206>
   d6cc0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6cc4:	bf18      	it	ne
   d6cc6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6cca:	d1d1      	bne.n	d6c70 <__aeabi_dmul+0x19c>
   d6ccc:	ea81 0103 	eor.w	r1, r1, r3
   d6cd0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6cd4:	f04f 0000 	mov.w	r0, #0
   d6cd8:	bd70      	pop	{r4, r5, r6, pc}
   d6cda:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6cde:	bf06      	itte	eq
   d6ce0:	4610      	moveq	r0, r2
   d6ce2:	4619      	moveq	r1, r3
   d6ce4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6ce8:	d019      	beq.n	d6d1e <__aeabi_dmul+0x24a>
   d6cea:	ea94 0f0c 	teq	r4, ip
   d6cee:	d102      	bne.n	d6cf6 <__aeabi_dmul+0x222>
   d6cf0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6cf4:	d113      	bne.n	d6d1e <__aeabi_dmul+0x24a>
   d6cf6:	ea95 0f0c 	teq	r5, ip
   d6cfa:	d105      	bne.n	d6d08 <__aeabi_dmul+0x234>
   d6cfc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6d00:	bf1c      	itt	ne
   d6d02:	4610      	movne	r0, r2
   d6d04:	4619      	movne	r1, r3
   d6d06:	d10a      	bne.n	d6d1e <__aeabi_dmul+0x24a>
   d6d08:	ea81 0103 	eor.w	r1, r1, r3
   d6d0c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6d10:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6d14:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6d18:	f04f 0000 	mov.w	r0, #0
   d6d1c:	bd70      	pop	{r4, r5, r6, pc}
   d6d1e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6d22:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d6d26:	bd70      	pop	{r4, r5, r6, pc}

000d6d28 <__aeabi_ddiv>:
   d6d28:	b570      	push	{r4, r5, r6, lr}
   d6d2a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6d2e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6d32:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6d36:	bf1d      	ittte	ne
   d6d38:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6d3c:	ea94 0f0c 	teqne	r4, ip
   d6d40:	ea95 0f0c 	teqne	r5, ip
   d6d44:	f000 f8a7 	bleq	d6e96 <__aeabi_ddiv+0x16e>
   d6d48:	eba4 0405 	sub.w	r4, r4, r5
   d6d4c:	ea81 0e03 	eor.w	lr, r1, r3
   d6d50:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6d54:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6d58:	f000 8088 	beq.w	d6e6c <__aeabi_ddiv+0x144>
   d6d5c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6d60:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d6d64:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6d68:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d6d6c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d6d70:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d6d74:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d6d78:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d6d7c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d6d80:	429d      	cmp	r5, r3
   d6d82:	bf08      	it	eq
   d6d84:	4296      	cmpeq	r6, r2
   d6d86:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d6d8a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d6d8e:	d202      	bcs.n	d6d96 <__aeabi_ddiv+0x6e>
   d6d90:	085b      	lsrs	r3, r3, #1
   d6d92:	ea4f 0232 	mov.w	r2, r2, rrx
   d6d96:	1ab6      	subs	r6, r6, r2
   d6d98:	eb65 0503 	sbc.w	r5, r5, r3
   d6d9c:	085b      	lsrs	r3, r3, #1
   d6d9e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6da2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d6da6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d6daa:	ebb6 0e02 	subs.w	lr, r6, r2
   d6dae:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6db2:	bf22      	ittt	cs
   d6db4:	1ab6      	subcs	r6, r6, r2
   d6db6:	4675      	movcs	r5, lr
   d6db8:	ea40 000c 	orrcs.w	r0, r0, ip
   d6dbc:	085b      	lsrs	r3, r3, #1
   d6dbe:	ea4f 0232 	mov.w	r2, r2, rrx
   d6dc2:	ebb6 0e02 	subs.w	lr, r6, r2
   d6dc6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6dca:	bf22      	ittt	cs
   d6dcc:	1ab6      	subcs	r6, r6, r2
   d6dce:	4675      	movcs	r5, lr
   d6dd0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6dd4:	085b      	lsrs	r3, r3, #1
   d6dd6:	ea4f 0232 	mov.w	r2, r2, rrx
   d6dda:	ebb6 0e02 	subs.w	lr, r6, r2
   d6dde:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6de2:	bf22      	ittt	cs
   d6de4:	1ab6      	subcs	r6, r6, r2
   d6de6:	4675      	movcs	r5, lr
   d6de8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d6dec:	085b      	lsrs	r3, r3, #1
   d6dee:	ea4f 0232 	mov.w	r2, r2, rrx
   d6df2:	ebb6 0e02 	subs.w	lr, r6, r2
   d6df6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6dfa:	bf22      	ittt	cs
   d6dfc:	1ab6      	subcs	r6, r6, r2
   d6dfe:	4675      	movcs	r5, lr
   d6e00:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6e04:	ea55 0e06 	orrs.w	lr, r5, r6
   d6e08:	d018      	beq.n	d6e3c <__aeabi_ddiv+0x114>
   d6e0a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d6e0e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d6e12:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d6e16:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d6e1a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d6e1e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d6e22:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d6e26:	d1c0      	bne.n	d6daa <__aeabi_ddiv+0x82>
   d6e28:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6e2c:	d10b      	bne.n	d6e46 <__aeabi_ddiv+0x11e>
   d6e2e:	ea41 0100 	orr.w	r1, r1, r0
   d6e32:	f04f 0000 	mov.w	r0, #0
   d6e36:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d6e3a:	e7b6      	b.n	d6daa <__aeabi_ddiv+0x82>
   d6e3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6e40:	bf04      	itt	eq
   d6e42:	4301      	orreq	r1, r0
   d6e44:	2000      	moveq	r0, #0
   d6e46:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6e4a:	bf88      	it	hi
   d6e4c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6e50:	f63f aeaf 	bhi.w	d6bb2 <__aeabi_dmul+0xde>
   d6e54:	ebb5 0c03 	subs.w	ip, r5, r3
   d6e58:	bf04      	itt	eq
   d6e5a:	ebb6 0c02 	subseq.w	ip, r6, r2
   d6e5e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6e62:	f150 0000 	adcs.w	r0, r0, #0
   d6e66:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6e6a:	bd70      	pop	{r4, r5, r6, pc}
   d6e6c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d6e70:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d6e74:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d6e78:	bfc2      	ittt	gt
   d6e7a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6e7e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6e82:	bd70      	popgt	{r4, r5, r6, pc}
   d6e84:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6e88:	f04f 0e00 	mov.w	lr, #0
   d6e8c:	3c01      	subs	r4, #1
   d6e8e:	e690      	b.n	d6bb2 <__aeabi_dmul+0xde>
   d6e90:	ea45 0e06 	orr.w	lr, r5, r6
   d6e94:	e68d      	b.n	d6bb2 <__aeabi_dmul+0xde>
   d6e96:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6e9a:	ea94 0f0c 	teq	r4, ip
   d6e9e:	bf08      	it	eq
   d6ea0:	ea95 0f0c 	teqeq	r5, ip
   d6ea4:	f43f af3b 	beq.w	d6d1e <__aeabi_dmul+0x24a>
   d6ea8:	ea94 0f0c 	teq	r4, ip
   d6eac:	d10a      	bne.n	d6ec4 <__aeabi_ddiv+0x19c>
   d6eae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6eb2:	f47f af34 	bne.w	d6d1e <__aeabi_dmul+0x24a>
   d6eb6:	ea95 0f0c 	teq	r5, ip
   d6eba:	f47f af25 	bne.w	d6d08 <__aeabi_dmul+0x234>
   d6ebe:	4610      	mov	r0, r2
   d6ec0:	4619      	mov	r1, r3
   d6ec2:	e72c      	b.n	d6d1e <__aeabi_dmul+0x24a>
   d6ec4:	ea95 0f0c 	teq	r5, ip
   d6ec8:	d106      	bne.n	d6ed8 <__aeabi_ddiv+0x1b0>
   d6eca:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6ece:	f43f aefd 	beq.w	d6ccc <__aeabi_dmul+0x1f8>
   d6ed2:	4610      	mov	r0, r2
   d6ed4:	4619      	mov	r1, r3
   d6ed6:	e722      	b.n	d6d1e <__aeabi_dmul+0x24a>
   d6ed8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6edc:	bf18      	it	ne
   d6ede:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6ee2:	f47f aec5 	bne.w	d6c70 <__aeabi_dmul+0x19c>
   d6ee6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d6eea:	f47f af0d 	bne.w	d6d08 <__aeabi_dmul+0x234>
   d6eee:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d6ef2:	f47f aeeb 	bne.w	d6ccc <__aeabi_dmul+0x1f8>
   d6ef6:	e712      	b.n	d6d1e <__aeabi_dmul+0x24a>

000d6ef8 <__gedf2>:
   d6ef8:	f04f 3cff 	mov.w	ip, #4294967295
   d6efc:	e006      	b.n	d6f0c <__cmpdf2+0x4>
   d6efe:	bf00      	nop

000d6f00 <__ledf2>:
   d6f00:	f04f 0c01 	mov.w	ip, #1
   d6f04:	e002      	b.n	d6f0c <__cmpdf2+0x4>
   d6f06:	bf00      	nop

000d6f08 <__cmpdf2>:
   d6f08:	f04f 0c01 	mov.w	ip, #1
   d6f0c:	f84d cd04 	str.w	ip, [sp, #-4]!
   d6f10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6f14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6f18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6f1c:	bf18      	it	ne
   d6f1e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d6f22:	d01b      	beq.n	d6f5c <__cmpdf2+0x54>
   d6f24:	b001      	add	sp, #4
   d6f26:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d6f2a:	bf0c      	ite	eq
   d6f2c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d6f30:	ea91 0f03 	teqne	r1, r3
   d6f34:	bf02      	ittt	eq
   d6f36:	ea90 0f02 	teqeq	r0, r2
   d6f3a:	2000      	moveq	r0, #0
   d6f3c:	4770      	bxeq	lr
   d6f3e:	f110 0f00 	cmn.w	r0, #0
   d6f42:	ea91 0f03 	teq	r1, r3
   d6f46:	bf58      	it	pl
   d6f48:	4299      	cmppl	r1, r3
   d6f4a:	bf08      	it	eq
   d6f4c:	4290      	cmpeq	r0, r2
   d6f4e:	bf2c      	ite	cs
   d6f50:	17d8      	asrcs	r0, r3, #31
   d6f52:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d6f56:	f040 0001 	orr.w	r0, r0, #1
   d6f5a:	4770      	bx	lr
   d6f5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6f60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6f64:	d102      	bne.n	d6f6c <__cmpdf2+0x64>
   d6f66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6f6a:	d107      	bne.n	d6f7c <__cmpdf2+0x74>
   d6f6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6f70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6f74:	d1d6      	bne.n	d6f24 <__cmpdf2+0x1c>
   d6f76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6f7a:	d0d3      	beq.n	d6f24 <__cmpdf2+0x1c>
   d6f7c:	f85d 0b04 	ldr.w	r0, [sp], #4
   d6f80:	4770      	bx	lr
   d6f82:	bf00      	nop

000d6f84 <__aeabi_cdrcmple>:
   d6f84:	4684      	mov	ip, r0
   d6f86:	4610      	mov	r0, r2
   d6f88:	4662      	mov	r2, ip
   d6f8a:	468c      	mov	ip, r1
   d6f8c:	4619      	mov	r1, r3
   d6f8e:	4663      	mov	r3, ip
   d6f90:	e000      	b.n	d6f94 <__aeabi_cdcmpeq>
   d6f92:	bf00      	nop

000d6f94 <__aeabi_cdcmpeq>:
   d6f94:	b501      	push	{r0, lr}
   d6f96:	f7ff ffb7 	bl	d6f08 <__cmpdf2>
   d6f9a:	2800      	cmp	r0, #0
   d6f9c:	bf48      	it	mi
   d6f9e:	f110 0f00 	cmnmi.w	r0, #0
   d6fa2:	bd01      	pop	{r0, pc}

000d6fa4 <__aeabi_dcmpeq>:
   d6fa4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6fa8:	f7ff fff4 	bl	d6f94 <__aeabi_cdcmpeq>
   d6fac:	bf0c      	ite	eq
   d6fae:	2001      	moveq	r0, #1
   d6fb0:	2000      	movne	r0, #0
   d6fb2:	f85d fb08 	ldr.w	pc, [sp], #8
   d6fb6:	bf00      	nop

000d6fb8 <__aeabi_dcmplt>:
   d6fb8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6fbc:	f7ff ffea 	bl	d6f94 <__aeabi_cdcmpeq>
   d6fc0:	bf34      	ite	cc
   d6fc2:	2001      	movcc	r0, #1
   d6fc4:	2000      	movcs	r0, #0
   d6fc6:	f85d fb08 	ldr.w	pc, [sp], #8
   d6fca:	bf00      	nop

000d6fcc <__aeabi_dcmple>:
   d6fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6fd0:	f7ff ffe0 	bl	d6f94 <__aeabi_cdcmpeq>
   d6fd4:	bf94      	ite	ls
   d6fd6:	2001      	movls	r0, #1
   d6fd8:	2000      	movhi	r0, #0
   d6fda:	f85d fb08 	ldr.w	pc, [sp], #8
   d6fde:	bf00      	nop

000d6fe0 <__aeabi_dcmpge>:
   d6fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6fe4:	f7ff ffce 	bl	d6f84 <__aeabi_cdrcmple>
   d6fe8:	bf94      	ite	ls
   d6fea:	2001      	movls	r0, #1
   d6fec:	2000      	movhi	r0, #0
   d6fee:	f85d fb08 	ldr.w	pc, [sp], #8
   d6ff2:	bf00      	nop

000d6ff4 <__aeabi_dcmpgt>:
   d6ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6ff8:	f7ff ffc4 	bl	d6f84 <__aeabi_cdrcmple>
   d6ffc:	bf34      	ite	cc
   d6ffe:	2001      	movcc	r0, #1
   d7000:	2000      	movcs	r0, #0
   d7002:	f85d fb08 	ldr.w	pc, [sp], #8
   d7006:	bf00      	nop

000d7008 <__aeabi_dcmpun>:
   d7008:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d700c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7010:	d102      	bne.n	d7018 <__aeabi_dcmpun+0x10>
   d7012:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d7016:	d10a      	bne.n	d702e <__aeabi_dcmpun+0x26>
   d7018:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d701c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7020:	d102      	bne.n	d7028 <__aeabi_dcmpun+0x20>
   d7022:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d7026:	d102      	bne.n	d702e <__aeabi_dcmpun+0x26>
   d7028:	f04f 0000 	mov.w	r0, #0
   d702c:	4770      	bx	lr
   d702e:	f04f 0001 	mov.w	r0, #1
   d7032:	4770      	bx	lr

000d7034 <__aeabi_d2iz>:
   d7034:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d7038:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d703c:	d215      	bcs.n	d706a <__aeabi_d2iz+0x36>
   d703e:	d511      	bpl.n	d7064 <__aeabi_d2iz+0x30>
   d7040:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d7044:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d7048:	d912      	bls.n	d7070 <__aeabi_d2iz+0x3c>
   d704a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d704e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d7052:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d7056:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d705a:	fa23 f002 	lsr.w	r0, r3, r2
   d705e:	bf18      	it	ne
   d7060:	4240      	negne	r0, r0
   d7062:	4770      	bx	lr
   d7064:	f04f 0000 	mov.w	r0, #0
   d7068:	4770      	bx	lr
   d706a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d706e:	d105      	bne.n	d707c <__aeabi_d2iz+0x48>
   d7070:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d7074:	bf08      	it	eq
   d7076:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d707a:	4770      	bx	lr
   d707c:	f04f 0000 	mov.w	r0, #0
   d7080:	4770      	bx	lr
   d7082:	bf00      	nop

000d7084 <__aeabi_d2uiz>:
   d7084:	004a      	lsls	r2, r1, #1
   d7086:	d211      	bcs.n	d70ac <__aeabi_d2uiz+0x28>
   d7088:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d708c:	d211      	bcs.n	d70b2 <__aeabi_d2uiz+0x2e>
   d708e:	d50d      	bpl.n	d70ac <__aeabi_d2uiz+0x28>
   d7090:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d7094:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d7098:	d40e      	bmi.n	d70b8 <__aeabi_d2uiz+0x34>
   d709a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d709e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d70a2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d70a6:	fa23 f002 	lsr.w	r0, r3, r2
   d70aa:	4770      	bx	lr
   d70ac:	f04f 0000 	mov.w	r0, #0
   d70b0:	4770      	bx	lr
   d70b2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d70b6:	d102      	bne.n	d70be <__aeabi_d2uiz+0x3a>
   d70b8:	f04f 30ff 	mov.w	r0, #4294967295
   d70bc:	4770      	bx	lr
   d70be:	f04f 0000 	mov.w	r0, #0
   d70c2:	4770      	bx	lr

000d70c4 <atoi>:
   d70c4:	220a      	movs	r2, #10
   d70c6:	2100      	movs	r1, #0
   d70c8:	f000 b8ec 	b.w	d72a4 <strtol>

000d70cc <atol>:
   d70cc:	220a      	movs	r2, #10
   d70ce:	2100      	movs	r1, #0
   d70d0:	f000 b8e8 	b.w	d72a4 <strtol>

000d70d4 <__cxa_atexit>:
   d70d4:	b510      	push	{r4, lr}
   d70d6:	4c05      	ldr	r4, [pc, #20]	; (d70ec <__cxa_atexit+0x18>)
   d70d8:	4613      	mov	r3, r2
   d70da:	b12c      	cbz	r4, d70e8 <__cxa_atexit+0x14>
   d70dc:	460a      	mov	r2, r1
   d70de:	4601      	mov	r1, r0
   d70e0:	2002      	movs	r0, #2
   d70e2:	f3af 8000 	nop.w
   d70e6:	bd10      	pop	{r4, pc}
   d70e8:	4620      	mov	r0, r4
   d70ea:	e7fc      	b.n	d70e6 <__cxa_atexit+0x12>
   d70ec:	00000000 	.word	0x00000000

000d70f0 <memcpy>:
   d70f0:	440a      	add	r2, r1
   d70f2:	4291      	cmp	r1, r2
   d70f4:	f100 33ff 	add.w	r3, r0, #4294967295
   d70f8:	d100      	bne.n	d70fc <memcpy+0xc>
   d70fa:	4770      	bx	lr
   d70fc:	b510      	push	{r4, lr}
   d70fe:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7102:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7106:	4291      	cmp	r1, r2
   d7108:	d1f9      	bne.n	d70fe <memcpy+0xe>
   d710a:	bd10      	pop	{r4, pc}

000d710c <memset>:
   d710c:	4402      	add	r2, r0
   d710e:	4603      	mov	r3, r0
   d7110:	4293      	cmp	r3, r2
   d7112:	d100      	bne.n	d7116 <memset+0xa>
   d7114:	4770      	bx	lr
   d7116:	f803 1b01 	strb.w	r1, [r3], #1
   d711a:	e7f9      	b.n	d7110 <memset+0x4>

000d711c <srand>:
   d711c:	b538      	push	{r3, r4, r5, lr}
   d711e:	4b0d      	ldr	r3, [pc, #52]	; (d7154 <srand+0x38>)
   d7120:	681d      	ldr	r5, [r3, #0]
   d7122:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d7124:	4604      	mov	r4, r0
   d7126:	b97b      	cbnz	r3, d7148 <srand+0x2c>
   d7128:	2018      	movs	r0, #24
   d712a:	f7fe f873 	bl	d5214 <malloc>
   d712e:	4a0a      	ldr	r2, [pc, #40]	; (d7158 <srand+0x3c>)
   d7130:	4b0a      	ldr	r3, [pc, #40]	; (d715c <srand+0x40>)
   d7132:	63a8      	str	r0, [r5, #56]	; 0x38
   d7134:	e9c0 2300 	strd	r2, r3, [r0]
   d7138:	4b09      	ldr	r3, [pc, #36]	; (d7160 <srand+0x44>)
   d713a:	6083      	str	r3, [r0, #8]
   d713c:	230b      	movs	r3, #11
   d713e:	8183      	strh	r3, [r0, #12]
   d7140:	2201      	movs	r2, #1
   d7142:	2300      	movs	r3, #0
   d7144:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7148:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d714a:	2200      	movs	r2, #0
   d714c:	611c      	str	r4, [r3, #16]
   d714e:	615a      	str	r2, [r3, #20]
   d7150:	bd38      	pop	{r3, r4, r5, pc}
   d7152:	bf00      	nop
   d7154:	2003e33c 	.word	0x2003e33c
   d7158:	abcd330e 	.word	0xabcd330e
   d715c:	e66d1234 	.word	0xe66d1234
   d7160:	0005deec 	.word	0x0005deec

000d7164 <strcmp>:
   d7164:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7168:	f811 3b01 	ldrb.w	r3, [r1], #1
   d716c:	2a01      	cmp	r2, #1
   d716e:	bf28      	it	cs
   d7170:	429a      	cmpcs	r2, r3
   d7172:	d0f7      	beq.n	d7164 <strcmp>
   d7174:	1ad0      	subs	r0, r2, r3
   d7176:	4770      	bx	lr

000d7178 <strlen>:
   d7178:	4603      	mov	r3, r0
   d717a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d717e:	2a00      	cmp	r2, #0
   d7180:	d1fb      	bne.n	d717a <strlen+0x2>
   d7182:	1a18      	subs	r0, r3, r0
   d7184:	3801      	subs	r0, #1
   d7186:	4770      	bx	lr

000d7188 <strncpy>:
   d7188:	b510      	push	{r4, lr}
   d718a:	3901      	subs	r1, #1
   d718c:	4603      	mov	r3, r0
   d718e:	b132      	cbz	r2, d719e <strncpy+0x16>
   d7190:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d7194:	f803 4b01 	strb.w	r4, [r3], #1
   d7198:	3a01      	subs	r2, #1
   d719a:	2c00      	cmp	r4, #0
   d719c:	d1f7      	bne.n	d718e <strncpy+0x6>
   d719e:	441a      	add	r2, r3
   d71a0:	2100      	movs	r1, #0
   d71a2:	4293      	cmp	r3, r2
   d71a4:	d100      	bne.n	d71a8 <strncpy+0x20>
   d71a6:	bd10      	pop	{r4, pc}
   d71a8:	f803 1b01 	strb.w	r1, [r3], #1
   d71ac:	e7f9      	b.n	d71a2 <strncpy+0x1a>
	...

000d71b0 <_strtol_l.isra.0>:
   d71b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d71b4:	4e3a      	ldr	r6, [pc, #232]	; (d72a0 <_strtol_l.isra.0+0xf0>)
   d71b6:	4686      	mov	lr, r0
   d71b8:	468c      	mov	ip, r1
   d71ba:	4660      	mov	r0, ip
   d71bc:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d71c0:	5da5      	ldrb	r5, [r4, r6]
   d71c2:	f015 0508 	ands.w	r5, r5, #8
   d71c6:	d1f8      	bne.n	d71ba <_strtol_l.isra.0+0xa>
   d71c8:	2c2d      	cmp	r4, #45	; 0x2d
   d71ca:	d133      	bne.n	d7234 <_strtol_l.isra.0+0x84>
   d71cc:	f89c 4000 	ldrb.w	r4, [ip]
   d71d0:	f04f 0801 	mov.w	r8, #1
   d71d4:	f100 0c02 	add.w	ip, r0, #2
   d71d8:	2b00      	cmp	r3, #0
   d71da:	d05c      	beq.n	d7296 <_strtol_l.isra.0+0xe6>
   d71dc:	2b10      	cmp	r3, #16
   d71de:	d10c      	bne.n	d71fa <_strtol_l.isra.0+0x4a>
   d71e0:	2c30      	cmp	r4, #48	; 0x30
   d71e2:	d10a      	bne.n	d71fa <_strtol_l.isra.0+0x4a>
   d71e4:	f89c 0000 	ldrb.w	r0, [ip]
   d71e8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d71ec:	2858      	cmp	r0, #88	; 0x58
   d71ee:	d14d      	bne.n	d728c <_strtol_l.isra.0+0xdc>
   d71f0:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d71f4:	2310      	movs	r3, #16
   d71f6:	f10c 0c02 	add.w	ip, ip, #2
   d71fa:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d71fe:	3f01      	subs	r7, #1
   d7200:	2600      	movs	r6, #0
   d7202:	fbb7 f9f3 	udiv	r9, r7, r3
   d7206:	4630      	mov	r0, r6
   d7208:	fb03 7a19 	mls	sl, r3, r9, r7
   d720c:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d7210:	2d09      	cmp	r5, #9
   d7212:	d818      	bhi.n	d7246 <_strtol_l.isra.0+0x96>
   d7214:	462c      	mov	r4, r5
   d7216:	42a3      	cmp	r3, r4
   d7218:	dd24      	ble.n	d7264 <_strtol_l.isra.0+0xb4>
   d721a:	1c75      	adds	r5, r6, #1
   d721c:	d007      	beq.n	d722e <_strtol_l.isra.0+0x7e>
   d721e:	4581      	cmp	r9, r0
   d7220:	d31d      	bcc.n	d725e <_strtol_l.isra.0+0xae>
   d7222:	d101      	bne.n	d7228 <_strtol_l.isra.0+0x78>
   d7224:	45a2      	cmp	sl, r4
   d7226:	db1a      	blt.n	d725e <_strtol_l.isra.0+0xae>
   d7228:	fb00 4003 	mla	r0, r0, r3, r4
   d722c:	2601      	movs	r6, #1
   d722e:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d7232:	e7eb      	b.n	d720c <_strtol_l.isra.0+0x5c>
   d7234:	2c2b      	cmp	r4, #43	; 0x2b
   d7236:	bf08      	it	eq
   d7238:	f89c 4000 	ldrbeq.w	r4, [ip]
   d723c:	46a8      	mov	r8, r5
   d723e:	bf08      	it	eq
   d7240:	f100 0c02 	addeq.w	ip, r0, #2
   d7244:	e7c8      	b.n	d71d8 <_strtol_l.isra.0+0x28>
   d7246:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d724a:	2d19      	cmp	r5, #25
   d724c:	d801      	bhi.n	d7252 <_strtol_l.isra.0+0xa2>
   d724e:	3c37      	subs	r4, #55	; 0x37
   d7250:	e7e1      	b.n	d7216 <_strtol_l.isra.0+0x66>
   d7252:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d7256:	2d19      	cmp	r5, #25
   d7258:	d804      	bhi.n	d7264 <_strtol_l.isra.0+0xb4>
   d725a:	3c57      	subs	r4, #87	; 0x57
   d725c:	e7db      	b.n	d7216 <_strtol_l.isra.0+0x66>
   d725e:	f04f 36ff 	mov.w	r6, #4294967295
   d7262:	e7e4      	b.n	d722e <_strtol_l.isra.0+0x7e>
   d7264:	1c73      	adds	r3, r6, #1
   d7266:	d106      	bne.n	d7276 <_strtol_l.isra.0+0xc6>
   d7268:	2322      	movs	r3, #34	; 0x22
   d726a:	f8ce 3000 	str.w	r3, [lr]
   d726e:	4638      	mov	r0, r7
   d7270:	b942      	cbnz	r2, d7284 <_strtol_l.isra.0+0xd4>
   d7272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7276:	f1b8 0f00 	cmp.w	r8, #0
   d727a:	d000      	beq.n	d727e <_strtol_l.isra.0+0xce>
   d727c:	4240      	negs	r0, r0
   d727e:	2a00      	cmp	r2, #0
   d7280:	d0f7      	beq.n	d7272 <_strtol_l.isra.0+0xc2>
   d7282:	b10e      	cbz	r6, d7288 <_strtol_l.isra.0+0xd8>
   d7284:	f10c 31ff 	add.w	r1, ip, #4294967295
   d7288:	6011      	str	r1, [r2, #0]
   d728a:	e7f2      	b.n	d7272 <_strtol_l.isra.0+0xc2>
   d728c:	2430      	movs	r4, #48	; 0x30
   d728e:	2b00      	cmp	r3, #0
   d7290:	d1b3      	bne.n	d71fa <_strtol_l.isra.0+0x4a>
   d7292:	2308      	movs	r3, #8
   d7294:	e7b1      	b.n	d71fa <_strtol_l.isra.0+0x4a>
   d7296:	2c30      	cmp	r4, #48	; 0x30
   d7298:	d0a4      	beq.n	d71e4 <_strtol_l.isra.0+0x34>
   d729a:	230a      	movs	r3, #10
   d729c:	e7ad      	b.n	d71fa <_strtol_l.isra.0+0x4a>
   d729e:	bf00      	nop
   d72a0:	000d7a7e 	.word	0x000d7a7e

000d72a4 <strtol>:
   d72a4:	4613      	mov	r3, r2
   d72a6:	460a      	mov	r2, r1
   d72a8:	4601      	mov	r1, r0
   d72aa:	4802      	ldr	r0, [pc, #8]	; (d72b4 <strtol+0x10>)
   d72ac:	6800      	ldr	r0, [r0, #0]
   d72ae:	f7ff bf7f 	b.w	d71b0 <_strtol_l.isra.0>
   d72b2:	bf00      	nop
   d72b4:	2003e33c 	.word	0x2003e33c

000d72b8 <dynalib_user>:
   d72b8:	000d4021 000d405d 000d4085 000d4089     !@..]@...@...@..
   d72c8:	00000000 25004320 6c250069 6e690069     .... C.%i.%li.in
   d72d8:	74756f00 6d777000 00776400 6b007761     .out.pwm.dw.aw.k
   d72e8:	4578336f 43315967 4c5a7a74 57486a47     o3xEgY1CtzZLGjHW
   d72f8:	44344a6c 734f5550 4e4c5a6f 00726d6d     lJ4DPUOsoZLNmmr.
   d7308:	20746f47 75702061 6e206873 6669746f     Got a push notif
   d7318:	74616369 006e6f69 68737550 6e657320     ication.Push sen
   d7328:	                                         t.

000d732a <_ZZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEvE7profile>:
   d732a:	6b6e6c62 00666e69 00726576 2e302e31     blnkinf.ver.1.0.
   d733a:	2d680030 74616562 00353400 66667562     0.h-beat.45.buff
   d734a:	006e692d 34323031 76656400 72615000     -in.1024.dev.Par
   d735a:	6c636974 75620065 00646c69 206c754a     ticle.build.Jul 
   d736a:	32203420 20313230 323a3431 32343a33      4 2021 14:23:42
   d737a:	00000000                                 ......

000d7380 <_ZL22BlynkReadHandlerVector>:
   d7380:	000d4d9f 000d4d9f 000d4d9f 000d4d9f     .M...M...M...M..
   d7390:	000d4d9f 000d4d9f 000d4d9f 000d4d9f     .M...M...M...M..
   d73a0:	000d4d9f 000d4d9f 000d4d9f 000d4d9f     .M...M...M...M..
   d73b0:	000d4d9f 000d4d9f 000d4d9f 000d4d9f     .M...M...M...M..
   d73c0:	000d4d9f 000d4d9f 000d4d9f 000d4d9f     .M...M...M...M..
   d73d0:	000d4d9f 000d4d9f 000d4d9f 000d4d9f     .M...M...M...M..
   d73e0:	000d4d9f 000d4d9f 000d4d9f 000d4d9f     .M...M...M...M..
   d73f0:	000d4d9f 000d4d9f 000d4d9f 000d4d9f     .M...M...M...M..
   d7400:	000d4d9f 000d4d9f 000d4d9f 000d4d9f     .M...M...M...M..
   d7410:	000d4d9f 000d4d9f 000d4d9f 000d4d9f     .M...M...M...M..
   d7420:	000d4d9f 000d4d9f 000d4d9f 000d4d9f     .M...M...M...M..
   d7430:	000d4d9f 000d4d9f 000d4d9f 000d4d9f     .M...M...M...M..
   d7440:	000d4d9f 000d4d9f 000d4d9f 000d4d9f     .M...M...M...M..
   d7450:	000d4d9f 000d4d9f 000d4d9f 000d4d9f     .M...M...M...M..
   d7460:	000d4d9f 000d4d9f 000d4d9f 000d4d9f     .M...M...M...M..
   d7470:	000d4d9f 000d4d9f 000d4d9f 000d4d9f     .M...M...M...M..
   d7480:	000d4d9f 000d4d9f 000d4d9f 000d4d9f     .M...M...M...M..
   d7490:	000d4d9f 000d4d9f 000d4d9f 000d4d9f     .M...M...M...M..
   d74a0:	000d4d9f 000d4d9f 000d4d9f 000d4d9f     .M...M...M...M..
   d74b0:	000d4d9f 000d4d9f 000d4d9f 000d4d9f     .M...M...M...M..
   d74c0:	000d4d9f 000d4d9f 000d4d9f 000d4d9f     .M...M...M...M..
   d74d0:	000d4d9f 000d4d9f 000d4d9f 000d4d9f     .M...M...M...M..
   d74e0:	000d4d9f 000d4d9f 000d4d9f 000d4d9f     .M...M...M...M..
   d74f0:	000d4d9f 000d4d9f 000d4d9f 000d4d9f     .M...M...M...M..
   d7500:	000d4d9f 000d4d9f 000d4d9f 000d4d9f     .M...M...M...M..
   d7510:	000d4d9f 000d4d9f 000d4d9f 000d4d9f     .M...M...M...M..
   d7520:	000d4d9f 000d4d9f 000d4d9f 000d4d9f     .M...M...M...M..
   d7530:	000d4d9f 000d4d9f 000d4d9f 000d4d9f     .M...M...M...M..
   d7540:	000d4d9f 000d4d9f 000d4d9f 000d4d9f     .M...M...M...M..
   d7550:	000d4d9f 000d4d9f 000d4d9f 000d4d9f     .M...M...M...M..
   d7560:	000d4d9f 000d4d9f 000d4d9f 000d4d9f     .M...M...M...M..
   d7570:	000d4d9f 000d4d9f 000d4d9f 000d4d9f     .M...M...M...M..

000d7580 <_ZL23BlynkWriteHandlerVector>:
   d7580:	000d4da1 000d4da1 000d4da1 000d4da1     .M...M...M...M..
   d7590:	000d4da1 000d4da1 000d4da1 000d4da1     .M...M...M...M..
   d75a0:	000d4da1 000d4da1 000d4da1 000d4da1     .M...M...M...M..
   d75b0:	000d4da1 000d4da1 000d4da1 000d4da1     .M...M...M...M..
   d75c0:	000d4da1 000d4da1 000d4da1 000d4da1     .M...M...M...M..
   d75d0:	000d4da1 000d4da1 000d4da1 000d4da1     .M...M...M...M..
   d75e0:	000d4da1 000d4da1 000d4da1 000d4da1     .M...M...M...M..
   d75f0:	000d4da1 000d4da1 000d4da1 000d4da1     .M...M...M...M..
   d7600:	000d4da1 000d4da1 000d4da1 000d4da1     .M...M...M...M..
   d7610:	000d4da1 000d4da1 000d4da1 000d4da1     .M...M...M...M..
   d7620:	000d4da1 000d4da1 000d4da1 000d4da1     .M...M...M...M..
   d7630:	000d4da1 000d4da1 000d4da1 000d4da1     .M...M...M...M..
   d7640:	000d4da1 000d4da1 000d4da1 000d4da1     .M...M...M...M..
   d7650:	000d4da1 000d4da1 000d4da1 000d4da1     .M...M...M...M..
   d7660:	000d4da1 000d4da1 000d4da1 000d4da1     .M...M...M...M..
   d7670:	000d4da1 000d4da1 000d4da1 000d4da1     .M...M...M...M..
   d7680:	000d4da1 000d4da1 000d4da1 000d4da1     .M...M...M...M..
   d7690:	000d4da1 000d4da1 000d4da1 000d4da1     .M...M...M...M..
   d76a0:	000d4da1 000d4da1 000d4da1 000d4da1     .M...M...M...M..
   d76b0:	000d4da1 000d4da1 000d4da1 000d4da1     .M...M...M...M..
   d76c0:	000d4da1 000d4da1 000d4da1 000d4da1     .M...M...M...M..
   d76d0:	000d4da1 000d4da1 000d4da1 000d4da1     .M...M...M...M..
   d76e0:	000d4da1 000d4da1 000d4da1 000d4da1     .M...M...M...M..
   d76f0:	000d4da1 000d4da1 000d4da1 000d4da1     .M...M...M...M..
   d7700:	000d4da1 000d4da1 000d4da1 000d4da1     .M...M...M...M..
   d7710:	000d4da1 000d4da1 000d4da1 000d4da1     .M...M...M...M..
   d7720:	000d4da1 000d4da1 000d4da1 000d4da1     .M...M...M...M..
   d7730:	000d4da1 000d4da1 000d4da1 000d4da1     .M...M...M...M..
   d7740:	000d4da1 000d4da1 000d4da1 000d4da1     .M...M...M...M..
   d7750:	000d4da1 000d4da1 000d4da1 000d4da1     .M...M...M...M..
   d7760:	000d4da1 000d4da1 000d4da1 000d4da1     .M...M...M...M..
   d7770:	000d4da1 000d4da1 000d4da1 000d4da1     .M...M...M...M..

000d7780 <_ZTVN5spark13EthernetClassE>:
	...
   d7788:	000d52c3 000d52b9 000d52af 000d52a5     .R...R...R...R..
   d7798:	000d5299 000d528d 000d6209 000d6211     .R...R...b...b..
   d77a8:	000d5281 000d5279 000d526f 000d5265     .R..yR..oR..eR..
   d77b8:	000d6241                                Ab..

000d77bc <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   d77c4:	006e616e 00666e69 0066766f 7061002e     nan.inf.ovf...ap
   d77d4:	59250070 2d6d252d 25546425 4d253a48     p.%Y-%m-%dT%H:%M
   d77e4:	2553253a 7361007a 6d697463 00000065     :%S%z.asctime...

000d77f4 <_ZTV9IPAddress>:
	...
   d77fc:	000d57f1 000d57e1 000d57e3              .W...W...W..

000d7808 <_ZTV9USBSerial>:
	...
   d7810:	000d5915 000d597d 000d5953 000d53b9     .Y..}Y..SY...S..
   d7820:	000d5945 000d5917 000d5927 000d5977     EY...Y..'Y..wY..
   d7830:	000d5937 000d5911                       7Y...Y..

000d7838 <_ZTV11USARTSerial>:
	...
   d7840:	000d5a21 000d5a8d 000d5a65 000d53b9     !Z...Z..eZ...S..
   d7850:	000d5a35 000d5a51 000d5a43 000d5a5f     5Z..QZ..CZ.._Z..
   d7860:	000d5a23 000d5a27                       #Z..'Z..

000d7868 <_ZTV7TwoWire>:
	...
   d7870:	000d5b1d 000d5b67 000d5b3f 000d5b1f     .[..g[..?[...[..
   d7880:	000d5b47 000d5b4f 000d5b57 000d5b5f     G[..O[..W[.._[..
   d7890:	69726977 7200676e 20766365 6f727265     wiring.recv erro
   d78a0:	203d2072 00006425                       r = %d..

000d78a8 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d78b0:	000d5c1b 000d5c3d 000d6057 000d5c4b     .\..=\..W`..K\..
   d78c0:	000d5c1d                                .\..

000d78c4 <_ZTV9TCPClient>:
	...
   d78cc:	000d5cc9 000d5cfd 000d5b99 000d5bb3     .\...\...[...[..
   d78dc:	000d5eed 000d5d5f 000d5d31 000d5bdd     .^.._]..1]...[..
   d78ec:	000d5df7 000d605d 000d5d93 000d5fa1     .]..]`...]..._..
   d78fc:	000d5bdf 000d5c11 000d5bc5 000d5c4f     .[...\...[..O\..
   d790c:	000d5d11                                .]..

000d7910 <_ZTVN5spark9WiFiClassE>:
	...
   d7918:	000d61ab 000d61a1 000d6197 000d6159     .a...a...a..Ya..
   d7928:	000d565b 000d618b 000d6209 000d6211     [V...a...b...b..
   d7938:	000d617f 000d6177 000d616d 000d6163     .a..wa..ma..ca..
   d7948:	000d6241                                Ab..

000d794c <_ZTVN5spark12NetworkClassE>:
	...
   d7954:	000d61c9 000d61d3 000d61dd 000d61e7     .a...a...a...a..
   d7964:	000d61f1 000d61fd 000d6209 000d6211     .a...a...b...b..
   d7974:	000d6219 000d6225 000d622d 000d6237     .b..%b..-b..7b..
   d7984:	000d6241                                Ab..

000d7988 <_ZSt7nothrow>:
	...

000d7989 <_ZTSSt19_Sp_make_shared_tag>:
   d7989:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   d7999:	5f646572 00676174                        red_tag....

000d79a4 <_ZTISt19_Sp_make_shared_tag>:
   d79a4:	000d79e4 000d7989                       .y...y..

000d79ac <_ZTIN10__cxxabiv117__class_type_infoE>:
   d79ac:	000d7a44 000d79b8 000d7a68              Dz...y..hz..

000d79b8 <_ZTSN10__cxxabiv117__class_type_infoE>:
   d79b8:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   d79c8:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   d79d8:	00000045                                E...

000d79dc <_ZTVN10__cxxabiv117__class_type_infoE>:
   d79dc:	00000000 000d79ac 000d6585 000d6599     .....y...e...e..
   d79ec:	000d672d 000d672d 000d6603 000d6545     -g..-g...f..Ee..
   d79fc:	000d65eb 000d65ad 000d6579              .e...e..ye..

000d7a08 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   d7a08:	000d7a44 000d7a14 000d79ac              Dz...z...y..

000d7a14 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   d7a14:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   d7a24:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   d7a34:	456f666e 00000000                       nfoE....

000d7a3c <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   d7a3c:	00000000 000d7a08 000d662d 000d6641     .....z..-f..Af..
   d7a4c:	000d672d 000d672d 000d6603 000d6545     -g..-g...f..Ee..
   d7a5c:	000d6701 000d668d 000d6655              .g...f..Uf..

000d7a68 <_ZTISt9type_info>:
   d7a68:	000d79e4 000d7a70                       .y..pz..

000d7a70 <_ZTSSt9type_info>:
   d7a70:	74397453 5f657079 6f666e69               St9type_info.

000d7a7d <_ctype_>:
   d7a7d:	20202000 20202020 28282020 20282828     .         ((((( 
   d7a8d:	20202020 20202020 20202020 20202020                     
   d7a9d:	10108820 10101010 10101010 10101010      ...............
   d7aad:	04040410 04040404 10040404 10101010     ................
   d7abd:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d7acd:	01010101 01010101 01010101 10101010     ................
   d7add:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d7aed:	02020202 02020202 02020202 10101010     ................
   d7afd:	00000020 00000000 00000000 00000000      ...............
	...

000d7b7e <link_const_variable_data_end>:
	...

000d7b80 <link_constructors_location>:
   d7b80:	000d4b99 	.word	0x000d4b99
   d7b84:	000d52cd 	.word	0x000d52cd
   d7b88:	000d5315 	.word	0x000d5315
   d7b8c:	000d5391 	.word	0x000d5391
   d7b90:	000d5669 	.word	0x000d5669
   d7b94:	000d5679 	.word	0x000d5679
   d7b98:	000d56a1 	.word	0x000d56a1
   d7b9c:	000d61b5 	.word	0x000d61b5
   d7ba0:	000d6321 	.word	0x000d6321

000d7ba4 <link_constructors_end>:
	...
